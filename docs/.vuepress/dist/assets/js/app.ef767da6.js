(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function t(t){for(var r,o,s=t[0],c=t[1],u=t[2],p=0,d=[];p<s.length;p++)o=s[p],Object.prototype.hasOwnProperty.call(a,o)&&a[o]&&d.push(a[o][0]),a[o]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(n[r]=c[r]);for(l&&l(t);d.length;)d.shift()();return i.push.apply(i,u||[]),e()}function e(){for(var n,t=0;t<i.length;t++){for(var e=i[t],r=!0,s=1;s<e.length;s++){var c=e[s];0!==a[c]&&(r=!1)}r&&(i.splice(t--,1),n=o(o.s=e[0]))}return n}var r={},a={1:0},i=[];function o(t){if(r[t])return r[t].exports;var e=r[t]={i:t,l:!1,exports:{}};return n[t].call(e.exports,e,e.exports,o),e.l=!0,e.exports}o.e=function(n){var t=[],e=a[n];if(0!==e)if(e)t.push(e[2]);else{var r=new Promise((function(t,r){e=a[n]=[t,r]}));t.push(e[2]=r);var i,s=document.createElement("script");s.charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.src=function(n){return o.p+"assets/js/"+({}[n]||n)+"."+{2:"5de4fde3",3:"4e1bbbeb",4:"9f4249ef",5:"2835d3d0",6:"021ccd82",7:"76039e30",8:"6850c978",9:"c2aa28b5",10:"d301099e",11:"c588b41c",12:"a50272e0"}[n]+".js"}(n);var c=new Error;i=function(t){s.onerror=s.onload=null,clearTimeout(u);var e=a[n];if(0!==e){if(e){var r=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;c.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",c.name="ChunkLoadError",c.type=r,c.request=i,e[1](c)}a[n]=void 0}};var u=setTimeout((function(){i({type:"timeout",target:s})}),12e4);s.onerror=s.onload=i,document.head.appendChild(s)}return Promise.all(t)},o.m=n,o.c=r,o.d=function(n,t,e){o.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:e})},o.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},o.t=function(n,t){if(1&t&&(n=o(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(o.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var r in n)o.d(e,r,function(t){return n[t]}.bind(null,r));return e},o.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(t,"a",t),t},o.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},o.p="/13rokyDocs/",o.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=t,s=s.slice();for(var u=0;u<s.length;u++)t(s[u]);var l=c;i.push([193,0]),e()}([function(n,t,e){var r=e(1),a=e(23).f,i=e(12),o=e(14),s=e(78),c=e(118),u=e(75);n.exports=function(n,t){var e,l,p,d,f,m=n.target,h=n.global,g=n.stat;if(e=h?r:g?r[m]||s(m,{}):(r[m]||{}).prototype)for(l in t){if(d=t[l],p=n.noTargetGet?(f=a(e,l))&&f.value:e[l],!u(h?l:m+(g?".":"#")+l,n.forced)&&void 0!==p){if(typeof d==typeof p)continue;c(d,p)}(n.sham||p&&p.sham)&&i(d,"sham",!0),o(e,l,d,n)}}},function(n,t){var e=function(n){return n&&n.Math==Math&&n};n.exports=e("object"==typeof globalThis&&globalThis)||e("object"==typeof window&&window)||e("object"==typeof self&&self)||e("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,t){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,t,e){var r=e(1),a=e(53),i=e(7),o=e(54),s=e(80),c=e(113),u=a("wks"),l=r.Symbol,p=c?l:l&&l.withoutSetter||o;n.exports=function(n){return i(u,n)&&(s||"string"==typeof u[n])||(s&&i(l,n)?u[n]=l[n]:u[n]=p("Symbol."+n)),u[n]}},function(n,t){n.exports=function(n){return"object"==typeof n?null!==n:"function"==typeof n}},function(n,t,e){var r=e(4);n.exports=function(n){if(!r(n))throw TypeError(String(n)+" is not an object");return n}},function(n,t,e){var r=e(2);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,t,e){var r=e(10),a={}.hasOwnProperty;n.exports=function(n,t){return a.call(r(n),t)}},function(n,t,e){var r=e(6),a=e(111),i=e(5),o=e(38),s=Object.defineProperty;t.f=r?s:function(n,t,e){if(i(n),t=o(t,!0),i(e),a)try{return s(n,t,e)}catch(n){}if("get"in e||"set"in e)throw TypeError("Accessors not supported");return"value"in e&&(n[t]=e.value),n}},function(n,t,e){var r=e(87),a=e(14),i=e(205);r||a(Object.prototype,"toString",i,{unsafe:!0})},function(n,t,e){var r=e(21);n.exports=function(n){return Object(r(n))}},function(n,t,e){"use strict";var r=e(108).charAt,a=e(30),i=e(117),o=a.set,s=a.getterFor("String Iterator");i(String,"String",(function(n){o(this,{type:"String Iterator",string:String(n),index:0})}),(function(){var n,t=s(this),e=t.string,a=t.index;return a>=e.length?{value:void 0,done:!0}:(n=r(e,a),t.index+=n.length,{value:n,done:!1})}))},function(n,t,e){var r=e(6),a=e(8),i=e(33);n.exports=r?function(n,t,e){return a.f(n,t,i(1,e))}:function(n,t,e){return n[t]=e,n}},function(n,t,e){var r=e(48),a=Math.min;n.exports=function(n){return n>0?a(r(n),9007199254740991):0}},function(n,t,e){var r=e(1),a=e(12),i=e(7),o=e(78),s=e(83),c=e(30),u=c.get,l=c.enforce,p=String(String).split("String");(n.exports=function(n,t,e,s){var c,u=!!s&&!!s.unsafe,d=!!s&&!!s.enumerable,f=!!s&&!!s.noTargetGet;"function"==typeof e&&("string"!=typeof t||i(e,"name")||a(e,"name",t),(c=l(e)).source||(c.source=p.join("string"==typeof t?t:""))),n!==r?(u?!f&&n[t]&&(d=!0):delete n[t],d?n[t]=e:a(n,t,e)):d?n[t]=e:o(t,e)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||s(this)}))},function(n,t,e){var r=e(37),a=e(21);n.exports=function(n){return r(a(n))}},function(n,t,e){var r=e(1),a=e(130),i=e(104),o=e(12),s=e(3),c=s("iterator"),u=s("toStringTag"),l=i.values;for(var p in a){var d=r[p],f=d&&d.prototype;if(f){if(f[c]!==l)try{o(f,c,l)}catch(n){f[c]=l}if(f[u]||o(f,u,p),a[p])for(var m in i)if(f[m]!==i[m])try{o(f,m,i[m])}catch(n){f[m]=i[m]}}}},function(n,t){var e=Array.isArray;n.exports=e},function(n,t,e){var r=e(141),a="object"==typeof self&&self&&self.Object===Object&&self,i=r||a||Function("return this")();n.exports=i},function(n,t,e){"use strict";function r(n,t,e,r,a,i,o,s){var c,u="function"==typeof n?n.options:n;if(t&&(u.render=t,u.staticRenderFns=e,u._compiled=!0),r&&(u.functional=!0),i&&(u._scopeId="data-v-"+i),o?(c=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),a&&a.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(o)},u._ssrRegister=c):a&&(c=s?function(){a.call(this,(u.functional?this.parent:this).$root.$options.shadowRoot)}:a),c)if(u.functional){u._injectStyles=c;var l=u.render;u.render=function(n,t){return c.call(t),l(n,t)}}else{var p=u.beforeCreate;u.beforeCreate=p?[].concat(p,c):[c]}return{exports:n,options:u}}e.d(t,"a",(function(){return r}))},function(n,t,e){var r=e(112),a=e(1),i=function(n){return"function"==typeof n?n:void 0};n.exports=function(n,t){return arguments.length<2?i(r[n])||i(a[n]):r[n]&&r[n][t]||a[n]&&a[n][t]}},function(n,t){n.exports=function(n){if(null==n)throw TypeError("Can't call method on "+n);return n}},function(n,t){n.exports=!1},function(n,t,e){var r=e(6),a=e(84),i=e(33),o=e(15),s=e(38),c=e(7),u=e(111),l=Object.getOwnPropertyDescriptor;t.f=r?l:function(n,t){if(n=o(n),t=s(t,!0),u)try{return l(n,t)}catch(n){}if(c(n,t))return i(!a.f.call(n,t),n[t])}},function(n,t){var e={}.toString;n.exports=function(n){return e.call(n).slice(8,-1)}},function(n,t){n.exports=function(n){if("function"!=typeof n)throw TypeError(String(n)+" is not a function");return n}},function(n,t,e){var r=e(232),a=e(235);n.exports=function(n,t){var e=a(n,t);return r(e)?e:void 0}},function(n,t,e){var r,a=e(5),i=e(172),o=e(82),s=e(40),c=e(116),u=e(79),l=e(57),p=l("IE_PROTO"),d=function(){},f=function(n){return"<script>"+n+"<\/script>"},m=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(n){}var n,t;m=r?function(n){n.write(f("")),n.close();var t=n.parentWindow.Object;return n=null,t}(r):((t=u("iframe")).style.display="none",c.appendChild(t),t.src=String("javascript:"),(n=t.contentWindow.document).open(),n.write(f("document.F=Object")),n.close(),n.F);for(var e=o.length;e--;)delete m.prototype[o[e]];return m()};s[p]=!0,n.exports=Object.create||function(n,t){var e;return null!==n?(d.prototype=a(n),e=new d,d.prototype=null,e[p]=n):e=m(),void 0===t?e:i(e,t)}},function(n,t){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,t,e){"use strict";var r=e(0),a=e(31).filter;r({target:"Array",proto:!0,forced:!e(62)("filter")},{filter:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,t,e){var r,a,i,o=e(194),s=e(1),c=e(4),u=e(12),l=e(7),p=e(77),d=e(57),f=e(40),m=s.WeakMap;if(o||p.state){var h=p.state||(p.state=new m),g=h.get,v=h.has,y=h.set;r=function(n,t){if(v.call(h,n))throw new TypeError("Object already initialized");return t.facade=n,y.call(h,n,t),t},a=function(n){return g.call(h,n)||{}},i=function(n){return v.call(h,n)}}else{var b=d("state");f[b]=!0,r=function(n,t){if(l(n,b))throw new TypeError("Object already initialized");return t.facade=n,u(n,b,t),t},a=function(n){return l(n,b)?n[b]:{}},i=function(n){return l(n,b)}}n.exports={set:r,get:a,has:i,enforce:function(n){return i(n)?a(n):r(n,{})},getterFor:function(n){return function(t){var e;if(!c(t)||(e=a(t)).type!==n)throw TypeError("Incompatible receiver, "+n+" required");return e}}}},function(n,t,e){var r=e(50),a=e(37),i=e(10),o=e(13),s=e(109),c=[].push,u=function(n){var t=1==n,e=2==n,u=3==n,l=4==n,p=6==n,d=7==n,f=5==n||p;return function(m,h,g,v){for(var y,b,x=i(m),w=a(x),S=r(h,g,3),k=o(w.length),j=0,T=v||s,_=t?T(m,k):e||d?T(m,0):void 0;k>j;j++)if((f||j in w)&&(b=S(y=w[j],j,x),n))if(t)_[j]=b;else if(b)switch(n){case 3:return!0;case 5:return y;case 6:return j;case 2:c.call(_,y)}else switch(n){case 4:return!1;case 7:c.call(_,y)}return p?-1:u||l?l:_}};n.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterOut:u(7)}},function(n,t,e){"use strict";var r=e(2);n.exports=function(n,t){var e=[][n];return!!e&&r((function(){e.call(null,t||function(){throw 1},1)}))}},function(n,t){n.exports=function(n,t){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:t}}},function(n,t,e){var r=e(24);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,t,e){"use strict";var r=e(0),a=e(1),i=e(20),o=e(22),s=e(6),c=e(80),u=e(113),l=e(2),p=e(7),d=e(34),f=e(4),m=e(5),h=e(10),g=e(15),v=e(38),y=e(33),b=e(27),x=e(56),w=e(52),S=e(211),k=e(85),j=e(23),T=e(8),_=e(84),E=e(12),O=e(14),C=e(53),A=e(57),D=e(40),I=e(54),P=e(3),$=e(136),L=e(137),B=e(49),N=e(30),M=e(31).forEach,R=A("hidden"),F=P("toPrimitive"),z=N.set,J=N.getterFor("Symbol"),U=Object.prototype,q=a.Symbol,G=i("JSON","stringify"),W=j.f,V=T.f,H=S.f,K=_.f,X=C("symbols"),Y=C("op-symbols"),Z=C("string-to-symbol-registry"),Q=C("symbol-to-string-registry"),nn=C("wks"),tn=a.QObject,en=!tn||!tn.prototype||!tn.prototype.findChild,rn=s&&l((function(){return 7!=b(V({},"a",{get:function(){return V(this,"a",{value:7}).a}})).a}))?function(n,t,e){var r=W(U,t);r&&delete U[t],V(n,t,e),r&&n!==U&&V(U,t,r)}:V,an=function(n,t){var e=X[n]=b(q.prototype);return z(e,{type:"Symbol",tag:n,description:t}),s||(e.description=t),e},on=u?function(n){return"symbol"==typeof n}:function(n){return Object(n)instanceof q},sn=function(n,t,e){n===U&&sn(Y,t,e),m(n);var r=v(t,!0);return m(e),p(X,r)?(e.enumerable?(p(n,R)&&n[R][r]&&(n[R][r]=!1),e=b(e,{enumerable:y(0,!1)})):(p(n,R)||V(n,R,y(1,{})),n[R][r]=!0),rn(n,r,e)):V(n,r,e)},cn=function(n,t){m(n);var e=g(t),r=x(e).concat(dn(e));return M(r,(function(t){s&&!un.call(e,t)||sn(n,t,e[t])})),n},un=function(n){var t=v(n,!0),e=K.call(this,t);return!(this===U&&p(X,t)&&!p(Y,t))&&(!(e||!p(this,t)||!p(X,t)||p(this,R)&&this[R][t])||e)},ln=function(n,t){var e=g(n),r=v(t,!0);if(e!==U||!p(X,r)||p(Y,r)){var a=W(e,r);return!a||!p(X,r)||p(e,R)&&e[R][r]||(a.enumerable=!0),a}},pn=function(n){var t=H(g(n)),e=[];return M(t,(function(n){p(X,n)||p(D,n)||e.push(n)})),e},dn=function(n){var t=n===U,e=H(t?Y:g(n)),r=[];return M(e,(function(n){!p(X,n)||t&&!p(U,n)||r.push(X[n])})),r};(c||(O((q=function(){if(this instanceof q)throw TypeError("Symbol is not a constructor");var n=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=I(n),e=function(n){this===U&&e.call(Y,n),p(this,R)&&p(this[R],t)&&(this[R][t]=!1),rn(this,t,y(1,n))};return s&&en&&rn(U,t,{configurable:!0,set:e}),an(t,n)}).prototype,"toString",(function(){return J(this).tag})),O(q,"withoutSetter",(function(n){return an(I(n),n)})),_.f=un,T.f=sn,j.f=ln,w.f=S.f=pn,k.f=dn,$.f=function(n){return an(P(n),n)},s&&(V(q.prototype,"description",{configurable:!0,get:function(){return J(this).description}}),o||O(U,"propertyIsEnumerable",un,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!c,sham:!c},{Symbol:q}),M(x(nn),(function(n){L(n)})),r({target:"Symbol",stat:!0,forced:!c},{for:function(n){var t=String(n);if(p(Z,t))return Z[t];var e=q(t);return Z[t]=e,Q[e]=t,e},keyFor:function(n){if(!on(n))throw TypeError(n+" is not a symbol");if(p(Q,n))return Q[n]},useSetter:function(){en=!0},useSimple:function(){en=!1}}),r({target:"Object",stat:!0,forced:!c,sham:!s},{create:function(n,t){return void 0===t?b(n):cn(b(n),t)},defineProperty:sn,defineProperties:cn,getOwnPropertyDescriptor:ln}),r({target:"Object",stat:!0,forced:!c},{getOwnPropertyNames:pn,getOwnPropertySymbols:dn}),r({target:"Object",stat:!0,forced:l((function(){k.f(1)}))},{getOwnPropertySymbols:function(n){return k.f(h(n))}}),G)&&r({target:"JSON",stat:!0,forced:!c||l((function(){var n=q();return"[null]"!=G([n])||"{}"!=G({a:n})||"{}"!=G(Object(n))}))},{stringify:function(n,t,e){for(var r,a=[n],i=1;arguments.length>i;)a.push(arguments[i++]);if(r=t,(f(t)||void 0!==n)&&!on(n))return d(t)||(t=function(n,t){if("function"==typeof r&&(t=r.call(this,n,t)),!on(t))return t}),a[1]=t,G.apply(null,a)}});q.prototype[F]||E(q.prototype,F,q.prototype.valueOf),B(q,"Symbol"),D[R]=!0},function(n,t,e){var r=e(43),a=e(217),i=e(218),o=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":o&&o in Object(n)?a(n):i(n)}},function(n,t,e){var r=e(2),a=e(24),i="".split;n.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(n){return"String"==a(n)?i.call(n,""):Object(n)}:Object},function(n,t,e){var r=e(4);n.exports=function(n,t){if(!r(n))return n;var e,a;if(t&&"function"==typeof(e=n.toString)&&!r(a=e.call(n)))return a;if("function"==typeof(e=n.valueOf)&&!r(a=e.call(n)))return a;if(!t&&"function"==typeof(e=n.toString)&&!r(a=e.call(n)))return a;throw TypeError("Can't convert object to primitive value")}},function(n,t,e){var r,a,i=e(1),o=e(55),s=i.process,c=s&&s.versions,u=c&&c.v8;u?a=(r=u.split("."))[0]<4?1:r[0]+r[1]:o&&(!(r=o.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=o.match(/Chrome\/(\d+)/))&&(a=r[1]),n.exports=a&&+a},function(n,t){n.exports={}},function(n,t){n.exports={}},function(n,t,e){"use strict";var r=e(0),a=e(6),i=e(1),o=e(7),s=e(4),c=e(8).f,u=e(118),l=i.Symbol;if(a&&"function"==typeof l&&(!("description"in l.prototype)||void 0!==l().description)){var p={},d=function(){var n=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof d?new l(n):void 0===n?l():l(n);return""===n&&(p[t]=!0),t};u(d,l);var f=d.prototype=l.prototype;f.constructor=d;var m=f.toString,h="Symbol(test)"==String(l("test")),g=/^Symbol\((.*)\)[^)]+$/;c(f,"description",{configurable:!0,get:function(){var n=s(this)?this.valueOf():this,t=m.call(n);if(o(p,n))return"";var e=h?t.slice(7,-1):t.replace(g,"$1");return""===e?void 0:e}}),r({global:!0,forced:!0},{Symbol:d})}},function(n,t,e){var r=e(18).Symbol;n.exports=r},function(n,t,e){"use strict";e.d(t,"a",(function(){return i}));e(103);var r=e(45);e(35),e(42),e(9),e(63),e(11),e(16),e(138);var a=e(69);function i(n){return function(n){if(Array.isArray(n))return Object(r.a)(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||Object(a.a)(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,t,e){"use strict";function r(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}e.d(t,"a",(function(){return r}))},function(n,t,e){"use strict";var r=e(0),a=e(31).map;r({target:"Array",proto:!0,forced:!e(62)("map")},{map:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,t,e){"use strict";var r=e(0),a=e(76);r({target:"RegExp",proto:!0,forced:/./.exec!==a},{exec:a})},function(n,t){var e=Math.ceil,r=Math.floor;n.exports=function(n){return isNaN(n=+n)?0:(n>0?r:e)(n)}},function(n,t,e){var r=e(8).f,a=e(7),i=e(3)("toStringTag");n.exports=function(n,t,e){n&&!a(n=e?n:n.prototype,i)&&r(n,i,{configurable:!0,value:t})}},function(n,t,e){var r=e(25);n.exports=function(n,t,e){if(r(n),void 0===t)return n;switch(e){case 0:return function(){return n.call(t)};case 1:return function(e){return n.call(t,e)};case 2:return function(e,r){return n.call(t,e,r)};case 3:return function(e,r,a){return n.call(t,e,r,a)}}return function(){return n.apply(t,arguments)}}},function(n,t,e){"use strict";var r=e(0),a=e(4),i=e(34),o=e(115),s=e(13),c=e(15),u=e(61),l=e(3),p=e(62)("slice"),d=l("species"),f=[].slice,m=Math.max;r({target:"Array",proto:!0,forced:!p},{slice:function(n,t){var e,r,l,p=c(this),h=s(p.length),g=o(n,h),v=o(void 0===t?h:t,h);if(i(p)&&("function"!=typeof(e=p.constructor)||e!==Array&&!i(e.prototype)?a(e)&&null===(e=e[d])&&(e=void 0):e=void 0,e===Array||void 0===e))return f.call(p,g,v);for(r=new(void 0===e?Array:e)(m(v-g,0)),l=0;g<v;g++,l++)g in p&&u(r,l,p[g]);return r.length=l,r}})},function(n,t,e){var r=e(114),a=e(82).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(n){return r(n,a)}},function(n,t,e){var r=e(22),a=e(77);(n.exports=function(n,t){return a[n]||(a[n]=void 0!==t?t:{})})("versions",[]).push({version:"3.12.1",mode:r?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},function(n,t){var e=0,r=Math.random();n.exports=function(n){return"Symbol("+String(void 0===n?"":n)+")_"+(++e+r).toString(36)}},function(n,t,e){var r=e(20);n.exports=r("navigator","userAgent")||""},function(n,t,e){var r=e(114),a=e(82);n.exports=Object.keys||function(n){return r(n,a)}},function(n,t,e){var r=e(53),a=e(54),i=r("keys");n.exports=function(n){return i[n]||(i[n]=a(n))}},function(n,t,e){var r=e(5),a=e(195);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,t=!1,e={};try{(n=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(e,[]),t=e instanceof Array}catch(n){}return function(e,i){return r(e),a(i),t?n.call(e,i):e.__proto__=i,e}}():void 0)},function(n,t,e){var r=e(24),a=e(1);n.exports="process"==r(a.process)},function(n,t,e){"use strict";e.d(t,"a",(function(){return a}));e(9);function r(n,t,e,r,a,i,o){try{var s=n[i](o),c=s.value}catch(n){return void e(n)}s.done?t(c):Promise.resolve(c).then(r,a)}function a(n){return function(){var t=this,e=arguments;return new Promise((function(a,i){var o=n.apply(t,e);function s(n){r(o,a,i,s,c,"next",n)}function c(n){r(o,a,i,s,c,"throw",n)}s(void 0)}))}}},function(n,t,e){"use strict";var r=e(38),a=e(8),i=e(33);n.exports=function(n,t,e){var o=r(t);o in n?a.f(n,o,i(0,e)):n[o]=e}},function(n,t,e){var r=e(2),a=e(3),i=e(39),o=a("species");n.exports=function(n){return i>=51||!r((function(){var t=[];return(t.constructor={})[o]=function(){return{foo:1}},1!==t[n](Boolean).foo}))}},function(n,t,e){e(137)("iterator")},function(n,t,e){var r=e(222),a=e(223),i=e(224),o=e(225),s=e(226);function c(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=i,c.prototype.has=o,c.prototype.set=s,n.exports=c},function(n,t,e){var r=e(143);n.exports=function(n,t){for(var e=n.length;e--;)if(r(n[e][0],t))return e;return-1}},function(n,t,e){var r=e(26)(Object,"create");n.exports=r},function(n,t,e){var r=e(244);n.exports=function(n,t){var e=n.__data__;return r(t)?e["string"==typeof t?"string":"hash"]:e.map}},function(n,t,e){var r=e(96);n.exports=function(n){if("string"==typeof n||r(n))return n;var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}},function(n,t,e){"use strict";e.d(t,"a",(function(){return a}));e(51),e(9),e(88),e(138),e(11);var r=e(45);function a(n,t){if(n){if("string"==typeof n)return Object(r.a)(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?Object(r.a)(n,t):void 0}}},function(n,t){var e=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,i=/^0o[0-7]+$/i,o=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,c="object"==typeof self&&self&&self.Object===Object&&self,u=s||c||Function("return this")(),l=Object.prototype.toString,p=Math.max,d=Math.min,f=function(){return u.Date.now()};function m(n){var t=typeof n;return!!n&&("object"==t||"function"==t)}function h(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==l.call(n)}(n))return NaN;if(m(n)){var t="function"==typeof n.valueOf?n.valueOf():n;n=m(t)?t+"":t}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(e,"");var s=a.test(n);return s||i.test(n)?o(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,t,e){var r,a,i,o,s,c,u=0,l=!1,g=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function y(t){var e=r,i=a;return r=a=void 0,u=t,o=n.apply(i,e)}function b(n){return u=n,s=setTimeout(w,t),l?y(n):o}function x(n){var e=n-c;return void 0===c||e>=t||e<0||g&&n-u>=i}function w(){var n=f();if(x(n))return S(n);s=setTimeout(w,function(n){var e=t-(n-c);return g?d(e,i-(n-u)):e}(n))}function S(n){return s=void 0,v&&r?y(n):(r=a=void 0,o)}function k(){var n=f(),e=x(n);if(r=arguments,a=this,c=n,e){if(void 0===s)return b(c);if(g)return s=setTimeout(w,t),y(c)}return void 0===s&&(s=setTimeout(w,t)),o}return t=h(t)||0,m(e)&&(l=!!e.leading,i=(g="maxWait"in e)?p(h(e.maxWait)||0,t):i,v="trailing"in e?!!e.trailing:v),k.cancel=function(){void 0!==s&&clearTimeout(s),u=0,r=c=a=s=void 0},k.flush=function(){return void 0===s?o:S(f())},k}},function(n,t,e){var r,a;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(a="function"==typeof(r=function(){var n,t,e={version:"0.2.0"},r=e.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function a(n,t,e){return n<t?t:n>e?e:n}function i(n){return 100*(-1+n)}e.configure=function(n){var t,e;for(t in n)void 0!==(e=n[t])&&n.hasOwnProperty(t)&&(r[t]=e);return this},e.status=null,e.set=function(n){var t=e.isStarted();n=a(n,r.minimum,1),e.status=1===n?null:n;var c=e.render(!t),u=c.querySelector(r.barSelector),l=r.speed,p=r.easing;return c.offsetWidth,o((function(t){""===r.positionUsing&&(r.positionUsing=e.getPositioningCSS()),s(u,function(n,t,e){var a;return(a="translate3d"===r.positionUsing?{transform:"translate3d("+i(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+i(n)+"%,0)"}:{"margin-left":i(n)+"%"}).transition="all "+t+"ms "+e,a}(n,l,p)),1===n?(s(c,{transition:"none",opacity:1}),c.offsetWidth,setTimeout((function(){s(c,{transition:"all "+l+"ms linear",opacity:0}),setTimeout((function(){e.remove(),t()}),l)}),l)):setTimeout(t,l)})),this},e.isStarted=function(){return"number"==typeof e.status},e.start=function(){e.status||e.set(0);var n=function(){setTimeout((function(){e.status&&(e.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},e.done=function(n){return n||e.status?e.inc(.3+.5*Math.random()).set(1):this},e.inc=function(n){var t=e.status;return t?("number"!=typeof n&&(n=(1-t)*a(Math.random()*t,.1,.95)),t=a(t+n,0,.994),e.set(t)):e.start()},e.trickle=function(){return e.inc(Math.random()*r.trickleRate)},n=0,t=0,e.promise=function(r){return r&&"resolved"!==r.state()?(0===t&&e.start(),n++,t++,r.always((function(){0==--t?(n=0,e.done()):e.set((n-t)/n)})),this):this},e.render=function(n){if(e.isRendered())return document.getElementById("nprogress");u(document.documentElement,"nprogress-busy");var t=document.createElement("div");t.id="nprogress",t.innerHTML=r.template;var a,o=t.querySelector(r.barSelector),c=n?"-100":i(e.status||0),l=document.querySelector(r.parent);return s(o,{transition:"all 0 linear",transform:"translate3d("+c+"%,0,0)"}),r.showSpinner||(a=t.querySelector(r.spinnerSelector))&&d(a),l!=document.body&&u(l,"nprogress-custom-parent"),l.appendChild(t),t},e.remove=function(){l(document.documentElement,"nprogress-busy"),l(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&d(n)},e.isRendered=function(){return!!document.getElementById("nprogress")},e.getPositioningCSS=function(){var n=document.body.style,t="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return t+"Perspective"in n?"translate3d":t+"Transform"in n?"translate":"margin"};var o=function(){var n=[];function t(){var e=n.shift();e&&e(t)}return function(e){n.push(e),1==n.length&&t()}}(),s=function(){var n=["Webkit","O","Moz","ms"],t={};function e(e){return e=e.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,t){return t.toUpperCase()})),t[e]||(t[e]=function(t){var e=document.body.style;if(t in e)return t;for(var r,a=n.length,i=t.charAt(0).toUpperCase()+t.slice(1);a--;)if((r=n[a]+i)in e)return r;return t}(e))}function r(n,t,r){t=e(t),n.style[t]=r}return function(n,t){var e,a,i=arguments;if(2==i.length)for(e in t)void 0!==(a=t[e])&&t.hasOwnProperty(e)&&r(n,e,a);else r(n,i[1],i[2])}}();function c(n,t){return("string"==typeof n?n:p(n)).indexOf(" "+t+" ")>=0}function u(n,t){var e=p(n),r=e+t;c(e,t)||(n.className=r.substring(1))}function l(n,t){var e,r=p(n);c(n,t)&&(e=r.replace(" "+t+" "," "),n.className=e.substring(1,e.length-1))}function p(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function d(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return e})?r.call(t,e,t,n):r)||(n.exports=a)},function(n,t,e){"use strict";var r=e(169),a=e(5),i=e(13),o=e(48),s=e(21),c=e(177),u=e(213),l=e(170),p=Math.max,d=Math.min;r("replace",2,(function(n,t,e,r){var f=r.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,m=r.REPLACE_KEEPS_$0,h=f?"$":"$0";return[function(e,r){var a=s(this),i=null==e?void 0:e[n];return void 0!==i?i.call(e,a,r):t.call(String(a),e,r)},function(n,r){if(!f&&m||"string"==typeof r&&-1===r.indexOf(h)){var s=e(t,n,this,r);if(s.done)return s.value}var g=a(n),v=String(this),y="function"==typeof r;y||(r=String(r));var b=g.global;if(b){var x=g.unicode;g.lastIndex=0}for(var w=[];;){var S=l(g,v);if(null===S)break;if(w.push(S),!b)break;""===String(S[0])&&(g.lastIndex=c(v,i(g.lastIndex),x))}for(var k,j="",T=0,_=0;_<w.length;_++){S=w[_];for(var E=String(S[0]),O=p(d(o(S.index),v.length),0),C=[],A=1;A<S.length;A++)C.push(void 0===(k=S[A])?k:String(k));var D=S.groups;if(y){var I=[E].concat(C,O,v);void 0!==D&&I.push(D);var P=String(r.apply(void 0,I))}else P=u(E,v,O,C,D,r);O>=T&&(j+=v.slice(T,O)+P,T=O+E.length)}return j+v.slice(T)}]}))},function(n,t,e){"use strict";var r=e(0),a=e(134);r({target:"Array",proto:!0,forced:[].forEach!=a},{forEach:a})},function(n,t,e){var r=e(1),a=e(130),i=e(134),o=e(12);for(var s in a){var c=r[s],u=c&&c.prototype;if(u&&u.forEach!==i)try{o(u,"forEach",i)}catch(n){u.forEach=i}}},function(n,t,e){var r=e(2),a=/#|\.prototype\./,i=function(n,t){var e=s[o(n)];return e==u||e!=c&&("function"==typeof t?r(t):!!t)},o=i.normalize=function(n){return String(n).replace(a,".").toLowerCase()},s=i.data={},c=i.NATIVE="N",u=i.POLYFILL="P";n.exports=i},function(n,t,e){"use strict";var r,a,i=e(175),o=e(176),s=e(53),c=RegExp.prototype.exec,u=s("native-string-replace",String.prototype.replace),l=c,p=(r=/a/,a=/b*/g,c.call(r,"a"),c.call(a,"a"),0!==r.lastIndex||0!==a.lastIndex),d=o.UNSUPPORTED_Y||o.BROKEN_CARET,f=void 0!==/()??/.exec("")[1];(p||f||d)&&(l=function(n){var t,e,r,a,o=this,s=d&&o.sticky,l=i.call(o),m=o.source,h=0,g=n;return s&&(-1===(l=l.replace("y","")).indexOf("g")&&(l+="g"),g=String(n).slice(o.lastIndex),o.lastIndex>0&&(!o.multiline||o.multiline&&"\n"!==n[o.lastIndex-1])&&(m="(?: "+m+")",g=" "+g,h++),e=new RegExp("^(?:"+m+")",l)),f&&(e=new RegExp("^"+m+"$(?!\\s)",l)),p&&(t=o.lastIndex),r=c.call(s?e:o,g),s?r?(r.input=r.input.slice(h),r[0]=r[0].slice(h),r.index=o.lastIndex,o.lastIndex+=r[0].length):o.lastIndex=0:p&&r&&(o.lastIndex=o.global?r.index+r[0].length:t),f&&r&&r.length>1&&u.call(r[0],e,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(r[a]=void 0)})),r}),n.exports=l},function(n,t,e){var r=e(1),a=e(78),i=r["__core-js_shared__"]||a("__core-js_shared__",{});n.exports=i},function(n,t,e){var r=e(1),a=e(12);n.exports=function(n,t){try{a(r,n,t)}catch(e){r[n]=t}return t}},function(n,t,e){var r=e(1),a=e(4),i=r.document,o=a(i)&&a(i.createElement);n.exports=function(n){return o?i.createElement(n):{}}},function(n,t,e){var r=e(39),a=e(2);n.exports=!!Object.getOwnPropertySymbols&&!a((function(){return!String(Symbol())||!Symbol.sham&&r&&r<41}))},function(n,t,e){var r=e(15),a=e(13),i=e(115),o=function(n){return function(t,e,o){var s,c=r(t),u=a(c.length),l=i(o,u);if(n&&e!=e){for(;u>l;)if((s=c[l++])!=s)return!0}else for(;u>l;l++)if((n||l in c)&&c[l]===e)return n||l||0;return!n&&-1}};n.exports={includes:o(!0),indexOf:o(!1)}},function(n,t){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,t,e){var r=e(77),a=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(n){return a.call(n)}),n.exports=r.inspectSource},function(n,t,e){"use strict";var r={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,i=a&&!r.call({1:2},1);t.f=i?function(n){var t=a(this,n);return!!t&&t.enumerable}:r},function(n,t){t.f=Object.getOwnPropertySymbols},function(n,t,e){var r=e(7),a=e(10),i=e(57),o=e(121),s=i("IE_PROTO"),c=Object.prototype;n.exports=o?Object.getPrototypeOf:function(n){return n=a(n),r(n,s)?n[s]:"function"==typeof n.constructor&&n instanceof n.constructor?n.constructor.prototype:n instanceof Object?c:null}},function(n,t,e){var r={};r[e(3)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,t,e){var r=e(6),a=e(8).f,i=Function.prototype,o=i.toString,s=/^\s*function ([^ (]*)/;r&&!("name"in i)&&a(i,"name",{configurable:!0,get:function(){try{return o.call(this).match(s)[1]}catch(n){return""}}})},function(n,t,e){var r=e(216),a=e(28),i=Object.prototype,o=i.hasOwnProperty,s=i.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(n){return a(n)&&o.call(n,"callee")&&!s.call(n,"callee")};n.exports=c},function(n,t,e){var r=e(26)(e(18),"Map");n.exports=r},function(n,t){n.exports=function(n){var t=typeof n;return null!=n&&("object"==t||"function"==t)}},function(n,t,e){var r=e(236),a=e(243),i=e(245),o=e(246),s=e(247);function c(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=i,c.prototype.has=o,c.prototype.set=s,n.exports=c},function(n,t){n.exports=function(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=n})),e}},function(n,t){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,t,e){var r=e(17),a=e(96),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;n.exports=function(n,t){if(r(n))return!1;var e=typeof n;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=n&&!a(n))||(o.test(n)||!i.test(n)||null!=t&&n in Object(t))}},function(n,t,e){var r=e(36),a=e(28);n.exports=function(n){return"symbol"==typeof n||a(n)&&"[object Symbol]"==r(n)}},function(n,t){n.exports=function(n){return n}},function(n,t,e){"use strict";e.d(t,"a",(function(){return a}));e(103);e(35),e(42),e(9),e(63),e(11),e(16);var r=e(69);function a(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){var e=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=e){var r,a,i=[],o=!0,s=!1;try{for(e=e.call(n);!(o=(r=e.next()).done)&&(i.push(r.value),!t||i.length!==t);o=!0);}catch(n){s=!0,a=n}finally{try{o||null==e.return||e.return()}finally{if(s)throw a}}return i}}(n,t)||Object(r.a)(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,t,e){"use strict";var r=e(0),a=e(31).some;r({target:"Array",proto:!0,forced:!e(32)("some")},{some:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,t,e){var r=e(0),a=e(10),i=e(56);r({target:"Object",stat:!0,forced:e(2)((function(){i(1)}))},{keys:function(n){return i(a(n))}})},function(n,t,e){var r=e(106),a=e(41),i=e(3)("iterator");n.exports=function(n){if(null!=n)return n[i]||n["@@iterator"]||a[r(n)]}},function(n,t,e){var r=function(n){"use strict";var t=Object.prototype,e=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},a=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",o=r.toStringTag||"@@toStringTag";function s(n,t,e){return Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}),n[t]}try{s({},"")}catch(n){s=function(n,t,e){return n[t]=e}}function c(n,t,e,r){var a=t&&t.prototype instanceof p?t:p,i=Object.create(a.prototype),o=new k(r||[]);return i._invoke=function(n,t,e){var r="suspendedStart";return function(a,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw i;return T()}for(e.method=a,e.arg=i;;){var o=e.delegate;if(o){var s=x(o,e);if(s){if(s===l)continue;return s}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===r)throw r="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r="executing";var c=u(n,t,e);if("normal"===c.type){if(r=e.done?"completed":"suspendedYield",c.arg===l)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(r="completed",e.method="throw",e.arg=c.arg)}}}(n,e,o),i}function u(n,t,e){try{return{type:"normal",arg:n.call(t,e)}}catch(n){return{type:"throw",arg:n}}}n.wrap=c;var l={};function p(){}function d(){}function f(){}var m={};m[a]=function(){return this};var h=Object.getPrototypeOf,g=h&&h(h(j([])));g&&g!==t&&e.call(g,a)&&(m=g);var v=f.prototype=p.prototype=Object.create(m);function y(n){["next","throw","return"].forEach((function(t){s(n,t,(function(n){return this._invoke(t,n)}))}))}function b(n,t){var r;this._invoke=function(a,i){function o(){return new t((function(r,o){!function r(a,i,o,s){var c=u(n[a],n,i);if("throw"!==c.type){var l=c.arg,p=l.value;return p&&"object"==typeof p&&e.call(p,"__await")?t.resolve(p.__await).then((function(n){r("next",n,o,s)}),(function(n){r("throw",n,o,s)})):t.resolve(p).then((function(n){l.value=n,o(l)}),(function(n){return r("throw",n,o,s)}))}s(c.arg)}(a,i,r,o)}))}return r=r?r.then(o,o):o()}}function x(n,t){var e=n.iterator[t.method];if(void 0===e){if(t.delegate=null,"throw"===t.method){if(n.iterator.return&&(t.method="return",t.arg=void 0,x(n,t),"throw"===t.method))return l;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return l}var r=u(e,n.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,l;var a=r.arg;return a?a.done?(t[n.resultName]=a.value,t.next=n.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,l):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,l)}function w(n){var t={tryLoc:n[0]};1 in n&&(t.catchLoc=n[1]),2 in n&&(t.finallyLoc=n[2],t.afterLoc=n[3]),this.tryEntries.push(t)}function S(n){var t=n.completion||{};t.type="normal",delete t.arg,n.completion=t}function k(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(w,this),this.reset(!0)}function j(n){if(n){var t=n[a];if(t)return t.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var r=-1,i=function t(){for(;++r<n.length;)if(e.call(n,r))return t.value=n[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return i.next=i}}return{next:T}}function T(){return{value:void 0,done:!0}}return d.prototype=v.constructor=f,f.constructor=d,d.displayName=s(f,o,"GeneratorFunction"),n.isGeneratorFunction=function(n){var t="function"==typeof n&&n.constructor;return!!t&&(t===d||"GeneratorFunction"===(t.displayName||t.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,f):(n.__proto__=f,s(n,o,"GeneratorFunction")),n.prototype=Object.create(v),n},n.awrap=function(n){return{__await:n}},y(b.prototype),b.prototype[i]=function(){return this},n.AsyncIterator=b,n.async=function(t,e,r,a,i){void 0===i&&(i=Promise);var o=new b(c(t,e,r,a),i);return n.isGeneratorFunction(e)?o:o.next().then((function(n){return n.done?n.value:o.next()}))},y(v),s(v,o,"Generator"),v[a]=function(){return this},v.toString=function(){return"[object Generator]"},n.keys=function(n){var t=[];for(var e in n)t.push(e);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},n.values=j,k.prototype={constructor:k,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!n)for(var t in this)"t"===t.charAt(0)&&e.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var t=this;function r(e,r){return o.type="throw",o.arg=n,t.next=e,r&&(t.method="next",t.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],o=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=e.call(i,"catchLoc"),c=e.call(i,"finallyLoc");if(s&&c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(n,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&e.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var i=a;break}}i&&("break"===n||"continue"===n)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=n,o.arg=t,i?(this.method="next",this.next=i.finallyLoc,l):this.complete(o)},complete:function(n,t){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&t&&(this.next=t),l},finish:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.finallyLoc===n)return this.complete(e.completion,e.afterLoc),S(e),l}},catch:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.tryLoc===n){var r=e.completion;if("throw"===r.type){var a=r.arg;S(e)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(n,t,e){return this.delegate={iterator:j(n),resultName:t,nextLoc:e},"next"===this.method&&(this.arg=void 0),l}},n}(n.exports);try{regeneratorRuntime=r}catch(n){Function("r","regeneratorRuntime = r")(r)}},function(n,t,e){e(0)({target:"Array",stat:!0},{isArray:e(34)})},function(n,t,e){"use strict";var r=e(15),a=e(105),i=e(41),o=e(30),s=e(117),c=o.set,u=o.getterFor("Array Iterator");n.exports=s(Array,"Array",(function(n,t){c(this,{type:"Array Iterator",target:r(n),index:0,kind:t})}),(function(){var n=u(this),t=n.target,e=n.kind,r=n.index++;return!t||r>=t.length?(n.target=void 0,{value:void 0,done:!0}):"keys"==e?{value:r,done:!1}:"values"==e?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values"),i.Arguments=i.Array,a("keys"),a("values"),a("entries")},function(n,t,e){var r=e(3),a=e(27),i=e(8),o=r("unscopables"),s=Array.prototype;null==s[o]&&i.f(s,o,{configurable:!0,value:a(null)}),n.exports=function(n){s[o][n]=!0}},function(n,t,e){var r=e(87),a=e(24),i=e(3)("toStringTag"),o="Arguments"==a(function(){return arguments}());n.exports=r?a:function(n){var t,e,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(e=function(n,t){try{return n[t]}catch(n){}}(t=Object(n),i))?e:o?a(t):"Object"==(r=a(t))&&"function"==typeof t.callee?"Arguments":r}},function(n,t,e){var r=e(5),a=e(25),i=e(3)("species");n.exports=function(n,t){var e,o=r(n).constructor;return void 0===o||null==(e=r(o)[i])?t:a(e)}},function(n,t,e){var r=e(48),a=e(21),i=function(n){return function(t,e){var i,o,s=String(a(t)),c=r(e),u=s.length;return c<0||c>=u?n?"":void 0:(i=s.charCodeAt(c))<55296||i>56319||c+1===u||(o=s.charCodeAt(c+1))<56320||o>57343?n?s.charAt(c):i:n?s.slice(c,c+2):o-56320+(i-55296<<10)+65536}};n.exports={codeAt:i(!1),charAt:i(!0)}},function(n,t,e){var r=e(4),a=e(34),i=e(3)("species");n.exports=function(n,t){var e;return a(n)&&("function"!=typeof(e=n.constructor)||e!==Array&&!a(e.prototype)?r(e)&&null===(e=e[i])&&(e=void 0):e=void 0),new(void 0===e?Array:e)(0===t?0:t)}},function(n,t){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,t,e){var r=e(6),a=e(2),i=e(79);n.exports=!r&&!a((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(n,t,e){var r=e(1);n.exports=r},function(n,t,e){var r=e(80);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,t,e){var r=e(7),a=e(15),i=e(81).indexOf,o=e(40);n.exports=function(n,t){var e,s=a(n),c=0,u=[];for(e in s)!r(o,e)&&r(s,e)&&u.push(e);for(;t.length>c;)r(s,e=t[c++])&&(~i(u,e)||u.push(e));return u}},function(n,t,e){var r=e(48),a=Math.max,i=Math.min;n.exports=function(n,t){var e=r(n);return e<0?a(e+t,0):i(e,t)}},function(n,t,e){var r=e(20);n.exports=r("document","documentElement")},function(n,t,e){"use strict";var r=e(0),a=e(183),i=e(86),o=e(58),s=e(49),c=e(12),u=e(14),l=e(3),p=e(22),d=e(41),f=e(120),m=f.IteratorPrototype,h=f.BUGGY_SAFARI_ITERATORS,g=l("iterator"),v=function(){return this};n.exports=function(n,t,e,l,f,y,b){a(e,t,l);var x,w,S,k=function(n){if(n===f&&O)return O;if(!h&&n in _)return _[n];switch(n){case"keys":case"values":case"entries":return function(){return new e(this,n)}}return function(){return new e(this)}},j=t+" Iterator",T=!1,_=n.prototype,E=_[g]||_["@@iterator"]||f&&_[f],O=!h&&E||k(f),C="Array"==t&&_.entries||E;if(C&&(x=i(C.call(new n)),m!==Object.prototype&&x.next&&(p||i(x)===m||(o?o(x,m):"function"!=typeof x[g]&&c(x,g,v)),s(x,j,!0,!0),p&&(d[j]=v))),"values"==f&&E&&"values"!==E.name&&(T=!0,O=function(){return E.call(this)}),p&&!b||_[g]===O||c(_,g,O),d[t]=O,f)if(w={values:k("values"),keys:y?O:k("keys"),entries:k("entries")},b)for(S in w)(h||T||!(S in _))&&u(_,S,w[S]);else r({target:t,proto:!0,forced:h||T},w);return w}},function(n,t,e){var r=e(7),a=e(119),i=e(23),o=e(8);n.exports=function(n,t){for(var e=a(t),s=o.f,c=i.f,u=0;u<e.length;u++){var l=e[u];r(n,l)||s(n,l,c(t,l))}}},function(n,t,e){var r=e(20),a=e(52),i=e(85),o=e(5);n.exports=r("Reflect","ownKeys")||function(n){var t=a.f(o(n)),e=i.f;return e?t.concat(e(n)):t}},function(n,t,e){"use strict";var r,a,i,o=e(2),s=e(86),c=e(12),u=e(7),l=e(3),p=e(22),d=l("iterator"),f=!1;[].keys&&("next"in(i=[].keys())?(a=s(s(i)))!==Object.prototype&&(r=a):f=!0);var m=null==r||o((function(){var n={};return r[d].call(n)!==n}));m&&(r={}),p&&!m||u(r,d)||c(r,d,(function(){return this})),n.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:f}},function(n,t,e){var r=e(2);n.exports=!r((function(){function n(){}return n.prototype.constructor=null,Object.getPrototypeOf(new n)!==n.prototype}))},function(n,t,e){var r=e(1);n.exports=r.Promise},function(n,t,e){var r=e(3),a=e(41),i=r("iterator"),o=Array.prototype;n.exports=function(n){return void 0!==n&&(a.Array===n||o[i]===n)}},function(n,t,e){var r=e(5);n.exports=function(n){var t=n.return;if(void 0!==t)return r(t.call(n)).value}},function(n,t,e){var r=e(3)("iterator"),a=!1;try{var i=0,o={next:function(){return{done:!!i++}},return:function(){a=!0}};o[r]=function(){return this},Array.from(o,(function(){throw 2}))}catch(n){}n.exports=function(n,t){if(!t&&!a)return!1;var e=!1;try{var i={};i[r]=function(){return{next:function(){return{done:e=!0}}}},n(i)}catch(n){}return e}},function(n,t,e){var r,a,i,o=e(1),s=e(2),c=e(50),u=e(116),l=e(79),p=e(127),d=e(59),f=o.location,m=o.setImmediate,h=o.clearImmediate,g=o.process,v=o.MessageChannel,y=o.Dispatch,b=0,x={},w=function(n){if(x.hasOwnProperty(n)){var t=x[n];delete x[n],t()}},S=function(n){return function(){w(n)}},k=function(n){w(n.data)},j=function(n){o.postMessage(n+"",f.protocol+"//"+f.host)};m&&h||(m=function(n){for(var t=[],e=1;arguments.length>e;)t.push(arguments[e++]);return x[++b]=function(){("function"==typeof n?n:Function(n)).apply(void 0,t)},r(b),b},h=function(n){delete x[n]},d?r=function(n){g.nextTick(S(n))}:y&&y.now?r=function(n){y.now(S(n))}:v&&!p?(i=(a=new v).port2,a.port1.onmessage=k,r=c(i.postMessage,i,1)):o.addEventListener&&"function"==typeof postMessage&&!o.importScripts&&f&&"file:"!==f.protocol&&!s(j)?(r=j,o.addEventListener("message",k,!1)):r="onreadystatechange"in l("script")?function(n){u.appendChild(l("script")).onreadystatechange=function(){u.removeChild(this),w(n)}}:function(n){setTimeout(S(n),0)}),n.exports={set:m,clear:h}},function(n,t,e){var r=e(55);n.exports=/(?:iphone|ipod|ipad).*applewebkit/i.test(r)},function(n,t,e){var r=e(5),a=e(4),i=e(129);n.exports=function(n,t){if(r(n),a(t)&&t.constructor===n)return t;var e=i.f(n);return(0,e.resolve)(t),e.promise}},function(n,t,e){"use strict";var r=e(25),a=function(n){var t,e;this.promise=new n((function(n,r){if(void 0!==t||void 0!==e)throw TypeError("Bad Promise constructor");t=n,e=r})),this.resolve=r(t),this.reject=r(e)};n.exports.f=function(n){return new a(n)}},function(n,t){n.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(n,t,e){var r=e(0),a=e(2),i=e(10),o=e(86),s=e(121);r({target:"Object",stat:!0,forced:a((function(){o(1)})),sham:!s},{getPrototypeOf:function(n){return o(i(n))}})},function(n,t,e){var r=e(174);n.exports=function(n){if(r(n))throw TypeError("The method doesn't accept regular expressions");return n}},function(n,t,e){var r=e(3)("match");n.exports=function(n){var t=/./;try{"/./"[n](t)}catch(e){try{return t[r]=!1,"/./"[n](t)}catch(n){}}return!1}},function(n,t,e){"use strict";var r=e(31).forEach,a=e(32)("forEach");n.exports=a?[].forEach:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}},function(n,t,e){var r=e(2);n.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(n,t,e){var r=e(3);t.f=r},function(n,t,e){var r=e(112),a=e(7),i=e(136),o=e(8).f;n.exports=function(n){var t=r.Symbol||(r.Symbol={});a(t,n)||o(t,n,{value:i.f(n)})}},function(n,t,e){var r=e(0),a=e(188);r({target:"Array",stat:!0,forced:!e(125)((function(n){Array.from(n)}))},{from:a})},function(n,t,e){e(0)({target:"Object",stat:!0,sham:!e(6)},{create:e(27)})},function(n,t){n.exports=function(n,t){for(var e=-1,r=t.length,a=n.length;++e<r;)n[a+e]=t[e];return n}},function(n,t){var e="object"==typeof global&&global&&global.Object===Object&&global;n.exports=e},function(n,t,e){var r=e(64),a=e(227),i=e(228),o=e(229),s=e(230),c=e(231);function u(n){var t=this.__data__=new r(n);this.size=t.size}u.prototype.clear=a,u.prototype.delete=i,u.prototype.get=o,u.prototype.has=s,u.prototype.set=c,n.exports=u},function(n,t){n.exports=function(n,t){return n===t||n!=n&&t!=t}},function(n,t,e){var r=e(36),a=e(91);n.exports=function(n){if(!a(n))return!1;var t=r(n);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(n,t){var e=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return e.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,t,e){var r=e(248),a=e(28);n.exports=function n(t,e,i,o,s){return t===e||(null==t||null==e||!a(t)&&!a(e)?t!=t&&e!=e:r(t,e,i,o,n,s))}},function(n,t,e){var r=e(148),a=e(251),i=e(149);n.exports=function(n,t,e,o,s,c){var u=1&e,l=n.length,p=t.length;if(l!=p&&!(u&&p>l))return!1;var d=c.get(n),f=c.get(t);if(d&&f)return d==t&&f==n;var m=-1,h=!0,g=2&e?new r:void 0;for(c.set(n,t),c.set(t,n);++m<l;){var v=n[m],y=t[m];if(o)var b=u?o(y,v,m,t,n,c):o(v,y,m,n,t,c);if(void 0!==b){if(b)continue;h=!1;break}if(g){if(!a(t,(function(n,t){if(!i(g,t)&&(v===n||s(v,n,e,o,c)))return g.push(t)}))){h=!1;break}}else if(v!==y&&!s(v,y,e,o,c)){h=!1;break}}return c.delete(n),c.delete(t),h}},function(n,t,e){var r=e(92),a=e(249),i=e(250);function o(n){var t=-1,e=null==n?0:n.length;for(this.__data__=new r;++t<e;)this.add(n[t])}o.prototype.add=o.prototype.push=a,o.prototype.has=i,n.exports=o},function(n,t){n.exports=function(n,t){return n.has(t)}},function(n,t,e){var r=e(261),a=e(267),i=e(154);n.exports=function(n){return i(n)?r(n):a(n)}},function(n,t,e){(function(n){var r=e(18),a=e(263),i=t&&!t.nodeType&&t,o=i&&"object"==typeof n&&n&&!n.nodeType&&n,s=o&&o.exports===i?r.Buffer:void 0,c=(s?s.isBuffer:void 0)||a;n.exports=c}).call(this,e(110)(n))},function(n,t){var e=/^(?:0|[1-9]\d*)$/;n.exports=function(n,t){var r=typeof n;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&e.test(n))&&n>-1&&n%1==0&&n<t}},function(n,t,e){var r=e(264),a=e(265),i=e(266),o=i&&i.isTypedArray,s=o?a(o):r;n.exports=s},function(n,t,e){var r=e(144),a=e(94);n.exports=function(n){return null!=n&&a(n.length)&&!r(n)}},function(n,t,e){var r=e(26)(e(18),"Set");n.exports=r},function(n,t,e){var r=e(91);n.exports=function(n){return n==n&&!r(n)}},function(n,t){n.exports=function(n,t){return function(e){return null!=e&&(e[n]===t&&(void 0!==t||n in Object(e)))}}},function(n,t,e){var r=e(159),a=e(68);n.exports=function(n,t){for(var e=0,i=(t=r(t,n)).length;null!=n&&e<i;)n=n[a(t[e++])];return e&&e==i?n:void 0}},function(n,t,e){var r=e(17),a=e(95),i=e(278),o=e(281);n.exports=function(n,t){return r(n)?n:a(n,t)?[n]:i(o(n))}},function(n,t,e){},function(n,t,e){},function(n,t,e){e(0)({target:"Object",stat:!0},{setPrototypeOf:e(58)})},function(n,t,e){var r=e(0),a=e(20),i=e(25),o=e(5),s=e(4),c=e(27),u=e(314),l=e(2),p=a("Reflect","construct"),d=l((function(){function n(){}return!(p((function(){}),[],n)instanceof n)})),f=!l((function(){p((function(){}))})),m=d||f;r({target:"Reflect",stat:!0,forced:m,sham:m},{construct:function(n,t){i(n),o(t);var e=arguments.length<3?n:i(arguments[2]);if(f&&!d)return p(n,t,e);if(n==e){switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(u.apply(n,r))}var a=e.prototype,l=c(s(a)?a:Object.prototype),m=Function.apply.call(n,l,t);return s(m)?m:l}})},function(n,t,e){},function(n,t,e){},function(n,t,e){var r=e(214),a=e(219),i=e(290),o=e(298),s=e(307),c=e(191),u=i((function(n){var t=c(n);return s(t)&&(t=void 0),o(r(n,1,s,!0),a(t,2))}));n.exports=u},function(n,t){var e=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,i=/^0o[0-7]+$/i,o=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,c="object"==typeof self&&self&&self.Object===Object&&self,u=s||c||Function("return this")(),l=Object.prototype.toString,p=Math.max,d=Math.min,f=function(){return u.Date.now()};function m(n,t,e){var r,a,i,o,s,c,u=0,l=!1,m=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function y(t){var e=r,i=a;return r=a=void 0,u=t,o=n.apply(i,e)}function b(n){return u=n,s=setTimeout(w,t),l?y(n):o}function x(n){var e=n-c;return void 0===c||e>=t||e<0||m&&n-u>=i}function w(){var n=f();if(x(n))return S(n);s=setTimeout(w,function(n){var e=t-(n-c);return m?d(e,i-(n-u)):e}(n))}function S(n){return s=void 0,v&&r?y(n):(r=a=void 0,o)}function k(){var n=f(),e=x(n);if(r=arguments,a=this,c=n,e){if(void 0===s)return b(c);if(m)return s=setTimeout(w,t),y(c)}return void 0===s&&(s=setTimeout(w,t)),o}return t=g(t)||0,h(e)&&(l=!!e.leading,i=(m="maxWait"in e)?p(g(e.maxWait)||0,t):i,v="trailing"in e?!!e.trailing:v),k.cancel=function(){void 0!==s&&clearTimeout(s),u=0,r=c=a=s=void 0},k.flush=function(){return void 0===s?o:S(f())},k}function h(n){var t=typeof n;return!!n&&("object"==t||"function"==t)}function g(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==l.call(n)}(n))return NaN;if(h(n)){var t="function"==typeof n.valueOf?n.valueOf():n;n=h(t)?t+"":t}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(e,"");var s=a.test(n);return s||i.test(n)?o(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,t,e){var r=!0,a=!0;if("function"!=typeof n)throw new TypeError("Expected a function");return h(e)&&(r="leading"in e?!!e.leading:r,a="trailing"in e?!!e.trailing:a),m(n,t,{leading:r,maxWait:t,trailing:a})}},function(n,t,e){function r(t){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?(n.exports=r=function(n){return typeof n},n.exports.default=n.exports,n.exports.__esModule=!0):(n.exports=r=function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},n.exports.default=n.exports,n.exports.__esModule=!0),r(t)}e(35),e(42),e(9),e(63),e(11),e(16),n.exports=r,n.exports.default=n.exports,n.exports.__esModule=!0},function(n,t,e){"use strict";e(47);var r=e(14),a=e(76),i=e(2),o=e(3),s=e(12),c=o("species"),u=RegExp.prototype,l=!i((function(){var n=/./;return n.exec=function(){var n=[];return n.groups={a:"7"},n},"7"!=="".replace(n,"$<a>")})),p="$0"==="a".replace(/./,"$0"),d=o("replace"),f=!!/./[d]&&""===/./[d]("a","$0"),m=!i((function(){var n=/(?:)/,t=n.exec;n.exec=function(){return t.apply(this,arguments)};var e="ab".split(n);return 2!==e.length||"a"!==e[0]||"b"!==e[1]}));n.exports=function(n,t,e,d){var h=o(n),g=!i((function(){var t={};return t[h]=function(){return 7},7!=""[n](t)})),v=g&&!i((function(){var t=!1,e=/a/;return"split"===n&&((e={}).constructor={},e.constructor[c]=function(){return e},e.flags="",e[h]=/./[h]),e.exec=function(){return t=!0,null},e[h](""),!t}));if(!g||!v||"replace"===n&&(!l||!p||f)||"split"===n&&!m){var y=/./[h],b=e(h,""[n],(function(n,t,e,r,i){var o=t.exec;return o===a||o===u.exec?g&&!i?{done:!0,value:y.call(t,e,r)}:{done:!0,value:n.call(e,t,r)}:{done:!1}}),{REPLACE_KEEPS_$0:p,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:f}),x=b[0],w=b[1];r(String.prototype,n,x),r(u,h,2==t?function(n,t){return w.call(n,this,t)}:function(n){return w.call(n,this)})}d&&s(u[h],"sham",!0)}},function(n,t,e){var r=e(24),a=e(76);n.exports=function(n,t){var e=n.exec;if("function"==typeof e){var i=e.call(n,t);if("object"!=typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(n))throw TypeError("RegExp#exec called on incompatible receiver");return a.call(n,t)}},function(n,t,e){"use strict";var r=e(0),a=e(81).indexOf,i=e(32),o=[].indexOf,s=!!o&&1/[1].indexOf(1,-0)<0,c=i("indexOf");r({target:"Array",proto:!0,forced:s||!c},{indexOf:function(n){return s?o.apply(this,arguments)||0:a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,t,e){var r=e(6),a=e(8),i=e(5),o=e(56);n.exports=r?Object.defineProperties:function(n,t){i(n);for(var e,r=o(t),s=r.length,c=0;s>c;)a.f(n,e=r[c++],t[e]);return n}},function(n,t){n.exports=function(n,t,e){if(!(n instanceof t))throw TypeError("Incorrect "+(e?e+" ":"")+"invocation");return n}},function(n,t,e){var r=e(4),a=e(24),i=e(3)("match");n.exports=function(n){var t;return r(n)&&(void 0!==(t=n[i])?!!t:"RegExp"==a(n))}},function(n,t,e){"use strict";var r=e(5);n.exports=function(){var n=r(this),t="";return n.global&&(t+="g"),n.ignoreCase&&(t+="i"),n.multiline&&(t+="m"),n.dotAll&&(t+="s"),n.unicode&&(t+="u"),n.sticky&&(t+="y"),t}},function(n,t,e){"use strict";var r=e(2);function a(n,t){return RegExp(n,t)}t.UNSUPPORTED_Y=r((function(){var n=a("a","y");return n.lastIndex=2,null!=n.exec("abcd")})),t.BROKEN_CARET=r((function(){var n=a("^r","gy");return n.lastIndex=2,null!=n.exec("str")}))},function(n,t,e){"use strict";var r=e(108).charAt;n.exports=function(n,t,e){return t+(e?r(n,t).length:1)}},function(n,t,e){"use strict";var r=e(0),a=e(37),i=e(15),o=e(32),s=[].join,c=a!=Object,u=o("join",",");r({target:"Array",proto:!0,forced:c||!u},{join:function(n){return s.call(i(this),void 0===n?",":n)}})},function(n,t,e){"use strict";var r=e(0),a=e(2),i=e(34),o=e(4),s=e(10),c=e(13),u=e(61),l=e(109),p=e(62),d=e(3),f=e(39),m=d("isConcatSpreadable"),h=f>=51||!a((function(){var n=[];return n[m]=!1,n.concat()[0]!==n})),g=p("concat"),v=function(n){if(!o(n))return!1;var t=n[m];return void 0!==t?!!t:i(n)};r({target:"Array",proto:!0,forced:!h||!g},{concat:function(n){var t,e,r,a,i,o=s(this),p=l(o,0),d=0;for(t=-1,r=arguments.length;t<r;t++)if(v(i=-1===t?o:arguments[t])){if(d+(a=c(i.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(e=0;e<a;e++,d++)e in i&&u(p,d,i[e])}else{if(d>=9007199254740991)throw TypeError("Maximum allowed index exceeded");u(p,d++,i)}return p.length=d,p}})},function(n,t,e){var r=e(21),a="["+e(181)+"]",i=RegExp("^"+a+a+"*"),o=RegExp(a+a+"*$"),s=function(n){return function(t){var e=String(r(t));return 1&n&&(e=e.replace(i,"")),2&n&&(e=e.replace(o,"")),e}};n.exports={start:s(1),end:s(2),trim:s(3)}},function(n,t){n.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(n,t,e){var r=e(0),a=e(6);r({target:"Object",stat:!0,forced:!a,sham:!a},{defineProperty:e(8).f})},function(n,t,e){"use strict";var r=e(120).IteratorPrototype,a=e(27),i=e(33),o=e(49),s=e(41),c=function(){return this};n.exports=function(n,t,e){var u=t+" Iterator";return n.prototype=a(r,{next:i(1,e)}),o(n,u,!1,!0),s[u]=c,n}},function(n,t,e){var r=e(14);n.exports=function(n,t,e){for(var a in t)r(n,a,t[a],e);return n}},function(n,t,e){"use strict";var r=e(20),a=e(8),i=e(3),o=e(6),s=i("species");n.exports=function(n){var t=r(n),e=a.f;o&&t&&!t[s]&&e(t,s,{configurable:!0,get:function(){return this}})}},function(n,t,e){"use strict";var r=e(6),a=e(2),i=e(56),o=e(85),s=e(84),c=e(10),u=e(37),l=Object.assign,p=Object.defineProperty;n.exports=!l||a((function(){if(r&&1!==l({b:1},l(p({},"a",{enumerable:!0,get:function(){p(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var n={},t={},e=Symbol();return n[e]=7,"abcdefghijklmnopqrst".split("").forEach((function(n){t[n]=n})),7!=l({},n)[e]||"abcdefghijklmnopqrst"!=i(l({},t)).join("")}))?function(n,t){for(var e=c(n),a=arguments.length,l=1,p=o.f,d=s.f;a>l;)for(var f,m=u(arguments[l++]),h=p?i(m).concat(p(m)):i(m),g=h.length,v=0;g>v;)f=h[v++],r&&!d.call(m,f)||(e[f]=m[f]);return e}:l},function(n,t,e){var r=e(0),a=e(6),i=e(119),o=e(15),s=e(23),c=e(61);r({target:"Object",stat:!0,sham:!a},{getOwnPropertyDescriptors:function(n){for(var t,e,r=o(n),a=s.f,u=i(r),l={},p=0;u.length>p;)void 0!==(e=a(r,t=u[p++]))&&c(l,t,e);return l}})},function(n,t,e){"use strict";var r=e(50),a=e(10),i=e(212),o=e(123),s=e(13),c=e(61),u=e(101);n.exports=function(n){var t,e,l,p,d,f,m=a(n),h="function"==typeof this?this:Array,g=arguments.length,v=g>1?arguments[1]:void 0,y=void 0!==v,b=u(m),x=0;if(y&&(v=r(v,g>2?arguments[2]:void 0,2)),null==b||h==Array&&o(b))for(e=new h(t=s(m.length));t>x;x++)f=y?v(m[x],x):m[x],c(e,x,f);else for(d=(p=b.call(m)).next,e=new h;!(l=d.call(p)).done;x++)f=y?i(p,v,[l.value,x],!0):l.value,c(e,x,f);return e.length=x,e}},function(n,t,e){"use strict";var r=e(0),a=e(81).includes,i=e(105);r({target:"Array",proto:!0},{includes:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(n,t,e){"use strict";var r=e(0),a=e(132),i=e(21);r({target:"String",proto:!0,forced:!e(133)("includes")},{includes:function(n){return!!~String(i(this)).indexOf(a(n),arguments.length>1?arguments[1]:void 0)}})},function(n,t){n.exports=function(n){var t=null==n?0:n.length;return t?n[t-1]:void 0}},function(n,t,e){var r=e(4),a=e(58);n.exports=function(n,t,e){var i,o;return a&&"function"==typeof(i=t.constructor)&&i!==e&&r(o=i.prototype)&&o!==e.prototype&&a(n,o),n}},function(n,t,e){n.exports=e(317)},function(n,t,e){var r=e(1),a=e(83),i=r.WeakMap;n.exports="function"==typeof i&&/native code/.test(a(i))},function(n,t,e){var r=e(4);n.exports=function(n){if(!r(n)&&null!==n)throw TypeError("Can't set "+String(n)+" as a prototype");return n}},function(n,t,e){"use strict";var r,a,i,o,s=e(0),c=e(22),u=e(1),l=e(20),p=e(122),d=e(14),f=e(184),m=e(58),h=e(49),g=e(185),v=e(4),y=e(25),b=e(173),x=e(83),w=e(197),S=e(125),k=e(107),j=e(126).set,T=e(198),_=e(128),E=e(200),O=e(129),C=e(201),A=e(30),D=e(75),I=e(3),P=e(202),$=e(59),L=e(39),B=I("species"),N="Promise",M=A.get,R=A.set,F=A.getterFor(N),z=p&&p.prototype,J=p,U=z,q=u.TypeError,G=u.document,W=u.process,V=O.f,H=V,K=!!(G&&G.createEvent&&u.dispatchEvent),X="function"==typeof PromiseRejectionEvent,Y=!1,Z=D(N,(function(){var n=x(J)!==String(J);if(!n&&66===L)return!0;if(c&&!U.finally)return!0;if(L>=51&&/native code/.test(J))return!1;var t=new J((function(n){n(1)})),e=function(n){n((function(){}),(function(){}))};return(t.constructor={})[B]=e,!(Y=t.then((function(){}))instanceof e)||!n&&P&&!X})),Q=Z||!S((function(n){J.all(n).catch((function(){}))})),nn=function(n){var t;return!(!v(n)||"function"!=typeof(t=n.then))&&t},tn=function(n,t){if(!n.notified){n.notified=!0;var e=n.reactions;T((function(){for(var r=n.value,a=1==n.state,i=0;e.length>i;){var o,s,c,u=e[i++],l=a?u.ok:u.fail,p=u.resolve,d=u.reject,f=u.domain;try{l?(a||(2===n.rejection&&on(n),n.rejection=1),!0===l?o=r:(f&&f.enter(),o=l(r),f&&(f.exit(),c=!0)),o===u.promise?d(q("Promise-chain cycle")):(s=nn(o))?s.call(o,p,d):p(o)):d(r)}catch(n){f&&!c&&f.exit(),d(n)}}n.reactions=[],n.notified=!1,t&&!n.rejection&&rn(n)}))}},en=function(n,t,e){var r,a;K?((r=G.createEvent("Event")).promise=t,r.reason=e,r.initEvent(n,!1,!0),u.dispatchEvent(r)):r={promise:t,reason:e},!X&&(a=u["on"+n])?a(r):"unhandledrejection"===n&&E("Unhandled promise rejection",e)},rn=function(n){j.call(u,(function(){var t,e=n.facade,r=n.value;if(an(n)&&(t=C((function(){$?W.emit("unhandledRejection",r,e):en("unhandledrejection",e,r)})),n.rejection=$||an(n)?2:1,t.error))throw t.value}))},an=function(n){return 1!==n.rejection&&!n.parent},on=function(n){j.call(u,(function(){var t=n.facade;$?W.emit("rejectionHandled",t):en("rejectionhandled",t,n.value)}))},sn=function(n,t,e){return function(r){n(t,r,e)}},cn=function(n,t,e){n.done||(n.done=!0,e&&(n=e),n.value=t,n.state=2,tn(n,!0))},un=function(n,t,e){if(!n.done){n.done=!0,e&&(n=e);try{if(n.facade===t)throw q("Promise can't be resolved itself");var r=nn(t);r?T((function(){var e={done:!1};try{r.call(t,sn(un,e,n),sn(cn,e,n))}catch(t){cn(e,t,n)}})):(n.value=t,n.state=1,tn(n,!1))}catch(t){cn({done:!1},t,n)}}};if(Z&&(U=(J=function(n){b(this,J,N),y(n),r.call(this);var t=M(this);try{n(sn(un,t),sn(cn,t))}catch(n){cn(t,n)}}).prototype,(r=function(n){R(this,{type:N,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=f(U,{then:function(n,t){var e=F(this),r=V(k(this,J));return r.ok="function"!=typeof n||n,r.fail="function"==typeof t&&t,r.domain=$?W.domain:void 0,e.parent=!0,e.reactions.push(r),0!=e.state&&tn(e,!1),r.promise},catch:function(n){return this.then(void 0,n)}}),a=function(){var n=new r,t=M(n);this.promise=n,this.resolve=sn(un,t),this.reject=sn(cn,t)},O.f=V=function(n){return n===J||n===i?new a(n):H(n)},!c&&"function"==typeof p&&z!==Object.prototype)){o=z.then,Y||(d(z,"then",(function(n,t){var e=this;return new J((function(n,t){o.call(e,n,t)})).then(n,t)}),{unsafe:!0}),d(z,"catch",U.catch,{unsafe:!0}));try{delete z.constructor}catch(n){}m&&m(z,U)}s({global:!0,wrap:!0,forced:Z},{Promise:J}),h(J,N,!1,!0),g(N),i=l(N),s({target:N,stat:!0,forced:Z},{reject:function(n){var t=V(this);return t.reject.call(void 0,n),t.promise}}),s({target:N,stat:!0,forced:c||Z},{resolve:function(n){return _(c&&this===i?J:this,n)}}),s({target:N,stat:!0,forced:Q},{all:function(n){var t=this,e=V(t),r=e.resolve,a=e.reject,i=C((function(){var e=y(t.resolve),i=[],o=0,s=1;w(n,(function(n){var c=o++,u=!1;i.push(void 0),s++,e.call(t,n).then((function(n){u||(u=!0,i[c]=n,--s||r(i))}),a)})),--s||r(i)}));return i.error&&a(i.value),e.promise},race:function(n){var t=this,e=V(t),r=e.reject,a=C((function(){var a=y(t.resolve);w(n,(function(n){a.call(t,n).then(e.resolve,r)}))}));return a.error&&r(a.value),e.promise}})},function(n,t,e){var r=e(5),a=e(123),i=e(13),o=e(50),s=e(101),c=e(124),u=function(n,t){this.stopped=n,this.result=t};n.exports=function(n,t,e){var l,p,d,f,m,h,g,v=e&&e.that,y=!(!e||!e.AS_ENTRIES),b=!(!e||!e.IS_ITERATOR),x=!(!e||!e.INTERRUPTED),w=o(t,v,1+y+x),S=function(n){return l&&c(l),new u(!0,n)},k=function(n){return y?(r(n),x?w(n[0],n[1],S):w(n[0],n[1])):x?w(n,S):w(n)};if(b)l=n;else{if("function"!=typeof(p=s(n)))throw TypeError("Target is not iterable");if(a(p)){for(d=0,f=i(n.length);f>d;d++)if((m=k(n[d]))&&m instanceof u)return m;return new u(!1)}l=p.call(n)}for(h=l.next;!(g=h.call(l)).done;){try{m=k(g.value)}catch(n){throw c(l),n}if("object"==typeof m&&m&&m instanceof u)return m}return new u(!1)}},function(n,t,e){var r,a,i,o,s,c,u,l,p=e(1),d=e(23).f,f=e(126).set,m=e(127),h=e(199),g=e(59),v=p.MutationObserver||p.WebKitMutationObserver,y=p.document,b=p.process,x=p.Promise,w=d(p,"queueMicrotask"),S=w&&w.value;S||(r=function(){var n,t;for(g&&(n=b.domain)&&n.exit();a;){t=a.fn,a=a.next;try{t()}catch(n){throw a?o():i=void 0,n}}i=void 0,n&&n.enter()},m||g||h||!v||!y?x&&x.resolve?((u=x.resolve(void 0)).constructor=x,l=u.then,o=function(){l.call(u,r)}):o=g?function(){b.nextTick(r)}:function(){f.call(p,r)}:(s=!0,c=y.createTextNode(""),new v(r).observe(c,{characterData:!0}),o=function(){c.data=s=!s})),n.exports=S||function(n){var t={fn:n,next:void 0};i&&(i.next=t),a||(a=t,o()),i=t}},function(n,t,e){var r=e(55);n.exports=/web0s(?!.*chrome)/i.test(r)},function(n,t,e){var r=e(1);n.exports=function(n,t){var e=r.console;e&&e.error&&(1===arguments.length?e.error(n):e.error(n,t))}},function(n,t){n.exports=function(n){try{return{error:!1,value:n()}}catch(n){return{error:!0,value:n}}}},function(n,t){n.exports="object"==typeof window},function(n,t,e){var r=e(0),a=e(186);r({target:"Object",stat:!0,forced:Object.assign!==a},{assign:a})},function(n,t,e){"use strict";var r=e(0),a=e(22),i=e(122),o=e(2),s=e(20),c=e(107),u=e(128),l=e(14);if(r({target:"Promise",proto:!0,real:!0,forced:!!i&&o((function(){i.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(n){var t=c(this,s("Promise")),e="function"==typeof n;return this.then(e?function(e){return u(t,n()).then((function(){return e}))}:n,e?function(e){return u(t,n()).then((function(){throw e}))}:n)}}),!a&&"function"==typeof i){var p=s("Promise").prototype.finally;i.prototype.finally!==p&&l(i.prototype,"finally",p,{unsafe:!0})}},function(n,t,e){"use strict";var r=e(87),a=e(106);n.exports=r?{}.toString:function(){return"[object "+a(this)+"]"}},function(n,t,e){"use strict";var r=e(0),a=e(207).left,i=e(32),o=e(39),s=e(59);r({target:"Array",proto:!0,forced:!i("reduce")||!s&&o>79&&o<83},{reduce:function(n){return a(this,n,arguments.length,arguments.length>1?arguments[1]:void 0)}})},function(n,t,e){var r=e(25),a=e(10),i=e(37),o=e(13),s=function(n){return function(t,e,s,c){r(e);var u=a(t),l=i(u),p=o(u.length),d=n?p-1:0,f=n?-1:1;if(s<2)for(;;){if(d in l){c=l[d],d+=f;break}if(d+=f,n?d<0:p<=d)throw TypeError("Reduce of empty array with no initial value")}for(;n?d>=0:p>d;d+=f)d in l&&(c=e(c,l[d],d,u));return c}};n.exports={left:s(!1),right:s(!0)}},function(n,t,e){"use strict";var r,a=e(0),i=e(23).f,o=e(13),s=e(132),c=e(21),u=e(133),l=e(22),p="".startsWith,d=Math.min,f=u("startsWith");a({target:"String",proto:!0,forced:!!(l||f||(r=i(String.prototype,"startsWith"),!r||r.writable))&&!f},{startsWith:function(n){var t=String(c(this));s(n);var e=o(d(arguments.length>1?arguments[1]:void 0,t.length)),r=String(n);return p?p.call(t,r,e):t.slice(e,e+r.length)===r}})},function(n,t,e){var r=e(0),a=e(135),i=e(2),o=e(4),s=e(210).onFreeze,c=Object.freeze;r({target:"Object",stat:!0,forced:i((function(){c(1)})),sham:!a},{freeze:function(n){return c&&o(n)?c(s(n)):n}})},function(n,t,e){var r=e(40),a=e(4),i=e(7),o=e(8).f,s=e(54),c=e(135),u=s("meta"),l=0,p=Object.isExtensible||function(){return!0},d=function(n){o(n,u,{value:{objectID:"O"+ ++l,weakData:{}}})},f=n.exports={REQUIRED:!1,fastKey:function(n,t){if(!a(n))return"symbol"==typeof n?n:("string"==typeof n?"S":"P")+n;if(!i(n,u)){if(!p(n))return"F";if(!t)return"E";d(n)}return n[u].objectID},getWeakData:function(n,t){if(!i(n,u)){if(!p(n))return!0;if(!t)return!1;d(n)}return n[u].weakData},onFreeze:function(n){return c&&f.REQUIRED&&p(n)&&!i(n,u)&&d(n),n}};r[u]=!0},function(n,t,e){var r=e(15),a=e(52).f,i={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(n){return o&&"[object Window]"==i.call(n)?function(n){try{return a(n)}catch(n){return o.slice()}}(n):a(r(n))}},function(n,t,e){var r=e(5),a=e(124);n.exports=function(n,t,e,i){try{return i?t(r(e)[0],e[1]):t(e)}catch(t){throw a(n),t}}},function(n,t,e){var r=e(10),a=Math.floor,i="".replace,o=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,s=/\$([$&'`]|\d{1,2})/g;n.exports=function(n,t,e,c,u,l){var p=e+n.length,d=c.length,f=s;return void 0!==u&&(u=r(u),f=o),i.call(l,f,(function(r,i){var o;switch(i.charAt(0)){case"$":return"$";case"&":return n;case"`":return t.slice(0,e);case"'":return t.slice(p);case"<":o=u[i.slice(1,-1)];break;default:var s=+i;if(0===s)return r;if(s>d){var l=a(s/10);return 0===l?r:l<=d?void 0===c[l-1]?i.charAt(1):c[l-1]+i.charAt(1):r}o=c[s-1]}return void 0===o?"":o}))}},function(n,t,e){var r=e(140),a=e(215);n.exports=function n(t,e,i,o,s){var c=-1,u=t.length;for(i||(i=a),s||(s=[]);++c<u;){var l=t[c];e>0&&i(l)?e>1?n(l,e-1,i,o,s):r(s,l):o||(s[s.length]=l)}return s}},function(n,t,e){var r=e(43),a=e(89),i=e(17),o=r?r.isConcatSpreadable:void 0;n.exports=function(n){return i(n)||a(n)||!!(o&&n&&n[o])}},function(n,t,e){var r=e(36),a=e(28);n.exports=function(n){return a(n)&&"[object Arguments]"==r(n)}},function(n,t,e){var r=e(43),a=Object.prototype,i=a.hasOwnProperty,o=a.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var t=i.call(n,s),e=n[s];try{n[s]=void 0;var r=!0}catch(n){}var a=o.call(n);return r&&(t?n[s]=e:delete n[s]),a}},function(n,t){var e=Object.prototype.toString;n.exports=function(n){return e.call(n)}},function(n,t,e){var r=e(220),a=e(276),i=e(97),o=e(17),s=e(287);n.exports=function(n){return"function"==typeof n?n:null==n?i:"object"==typeof n?o(n)?a(n[0],n[1]):r(n):s(n)}},function(n,t,e){var r=e(221),a=e(275),i=e(157);n.exports=function(n){var t=a(n);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(e){return e===n||r(e,n,t)}}},function(n,t,e){var r=e(142),a=e(146);n.exports=function(n,t,e,i){var o=e.length,s=o,c=!i;if(null==n)return!s;for(n=Object(n);o--;){var u=e[o];if(c&&u[2]?u[1]!==n[u[0]]:!(u[0]in n))return!1}for(;++o<s;){var l=(u=e[o])[0],p=n[l],d=u[1];if(c&&u[2]){if(void 0===p&&!(l in n))return!1}else{var f=new r;if(i)var m=i(p,d,l,n,t,f);if(!(void 0===m?a(d,p,3,i,f):m))return!1}}return!0}},function(n,t){n.exports=function(){this.__data__=[],this.size=0}},function(n,t,e){var r=e(65),a=Array.prototype.splice;n.exports=function(n){var t=this.__data__,e=r(t,n);return!(e<0)&&(e==t.length-1?t.pop():a.call(t,e,1),--this.size,!0)}},function(n,t,e){var r=e(65);n.exports=function(n){var t=this.__data__,e=r(t,n);return e<0?void 0:t[e][1]}},function(n,t,e){var r=e(65);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,t,e){var r=e(65);n.exports=function(n,t){var e=this.__data__,a=r(e,n);return a<0?(++this.size,e.push([n,t])):e[a][1]=t,this}},function(n,t,e){var r=e(64);n.exports=function(){this.__data__=new r,this.size=0}},function(n,t){n.exports=function(n){var t=this.__data__,e=t.delete(n);return this.size=t.size,e}},function(n,t){n.exports=function(n){return this.__data__.get(n)}},function(n,t){n.exports=function(n){return this.__data__.has(n)}},function(n,t,e){var r=e(64),a=e(90),i=e(92);n.exports=function(n,t){var e=this.__data__;if(e instanceof r){var o=e.__data__;if(!a||o.length<199)return o.push([n,t]),this.size=++e.size,this;e=this.__data__=new i(o)}return e.set(n,t),this.size=e.size,this}},function(n,t,e){var r=e(144),a=e(233),i=e(91),o=e(145),s=/^\[object .+?Constructor\]$/,c=Function.prototype,u=Object.prototype,l=c.toString,p=u.hasOwnProperty,d=RegExp("^"+l.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!i(n)||a(n))&&(r(n)?d:s).test(o(n))}},function(n,t,e){var r,a=e(234),i=(r=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!i&&i in n}},function(n,t,e){var r=e(18)["__core-js_shared__"];n.exports=r},function(n,t){n.exports=function(n,t){return null==n?void 0:n[t]}},function(n,t,e){var r=e(237),a=e(64),i=e(90);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||a),string:new r}}},function(n,t,e){var r=e(238),a=e(239),i=e(240),o=e(241),s=e(242);function c(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=i,c.prototype.has=o,c.prototype.set=s,n.exports=c},function(n,t,e){var r=e(66);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,t){n.exports=function(n){var t=this.has(n)&&delete this.__data__[n];return this.size-=t?1:0,t}},function(n,t,e){var r=e(66),a=Object.prototype.hasOwnProperty;n.exports=function(n){var t=this.__data__;if(r){var e=t[n];return"__lodash_hash_undefined__"===e?void 0:e}return a.call(t,n)?t[n]:void 0}},function(n,t,e){var r=e(66),a=Object.prototype.hasOwnProperty;n.exports=function(n){var t=this.__data__;return r?void 0!==t[n]:a.call(t,n)}},function(n,t,e){var r=e(66);n.exports=function(n,t){var e=this.__data__;return this.size+=this.has(n)?0:1,e[n]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},function(n,t,e){var r=e(67);n.exports=function(n){var t=r(this,n).delete(n);return this.size-=t?1:0,t}},function(n,t){n.exports=function(n){var t=typeof n;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==n:null===n}},function(n,t,e){var r=e(67);n.exports=function(n){return r(this,n).get(n)}},function(n,t,e){var r=e(67);n.exports=function(n){return r(this,n).has(n)}},function(n,t,e){var r=e(67);n.exports=function(n,t){var e=r(this,n),a=e.size;return e.set(n,t),this.size+=e.size==a?0:1,this}},function(n,t,e){var r=e(142),a=e(147),i=e(252),o=e(255),s=e(271),c=e(17),u=e(151),l=e(153),p="[object Object]",d=Object.prototype.hasOwnProperty;n.exports=function(n,t,e,f,m,h){var g=c(n),v=c(t),y=g?"[object Array]":s(n),b=v?"[object Array]":s(t),x=(y="[object Arguments]"==y?p:y)==p,w=(b="[object Arguments]"==b?p:b)==p,S=y==b;if(S&&u(n)){if(!u(t))return!1;g=!0,x=!1}if(S&&!x)return h||(h=new r),g||l(n)?a(n,t,e,f,m,h):i(n,t,y,e,f,m,h);if(!(1&e)){var k=x&&d.call(n,"__wrapped__"),j=w&&d.call(t,"__wrapped__");if(k||j){var T=k?n.value():n,_=j?t.value():t;return h||(h=new r),m(T,_,e,f,h)}}return!!S&&(h||(h=new r),o(n,t,e,f,m,h))}},function(n,t){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,t){n.exports=function(n){return this.__data__.has(n)}},function(n,t){n.exports=function(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(t(n[e],e,n))return!0;return!1}},function(n,t,e){var r=e(43),a=e(253),i=e(143),o=e(147),s=e(254),c=e(93),u=r?r.prototype:void 0,l=u?u.valueOf:void 0;n.exports=function(n,t,e,r,u,p,d){switch(e){case"[object DataView]":if(n.byteLength!=t.byteLength||n.byteOffset!=t.byteOffset)return!1;n=n.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=t.byteLength||!p(new a(n),new a(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+n,+t);case"[object Error]":return n.name==t.name&&n.message==t.message;case"[object RegExp]":case"[object String]":return n==t+"";case"[object Map]":var f=s;case"[object Set]":var m=1&r;if(f||(f=c),n.size!=t.size&&!m)return!1;var h=d.get(n);if(h)return h==t;r|=2,d.set(n,t);var g=o(f(n),f(t),r,u,p,d);return d.delete(n),g;case"[object Symbol]":if(l)return l.call(n)==l.call(t)}return!1}},function(n,t,e){var r=e(18).Uint8Array;n.exports=r},function(n,t){n.exports=function(n){var t=-1,e=Array(n.size);return n.forEach((function(n,r){e[++t]=[r,n]})),e}},function(n,t,e){var r=e(256),a=Object.prototype.hasOwnProperty;n.exports=function(n,t,e,i,o,s){var c=1&e,u=r(n),l=u.length;if(l!=r(t).length&&!c)return!1;for(var p=l;p--;){var d=u[p];if(!(c?d in t:a.call(t,d)))return!1}var f=s.get(n),m=s.get(t);if(f&&m)return f==t&&m==n;var h=!0;s.set(n,t),s.set(t,n);for(var g=c;++p<l;){var v=n[d=u[p]],y=t[d];if(i)var b=c?i(y,v,d,t,n,s):i(v,y,d,n,t,s);if(!(void 0===b?v===y||o(v,y,e,i,s):b)){h=!1;break}g||(g="constructor"==d)}if(h&&!g){var x=n.constructor,w=t.constructor;x==w||!("constructor"in n)||!("constructor"in t)||"function"==typeof x&&x instanceof x&&"function"==typeof w&&w instanceof w||(h=!1)}return s.delete(n),s.delete(t),h}},function(n,t,e){var r=e(257),a=e(258),i=e(150);n.exports=function(n){return r(n,i,a)}},function(n,t,e){var r=e(140),a=e(17);n.exports=function(n,t,e){var i=t(n);return a(n)?i:r(i,e(n))}},function(n,t,e){var r=e(259),a=e(260),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,s=o?function(n){return null==n?[]:(n=Object(n),r(o(n),(function(t){return i.call(n,t)})))}:a;n.exports=s},function(n,t){n.exports=function(n,t){for(var e=-1,r=null==n?0:n.length,a=0,i=[];++e<r;){var o=n[e];t(o,e,n)&&(i[a++]=o)}return i}},function(n,t){n.exports=function(){return[]}},function(n,t,e){var r=e(262),a=e(89),i=e(17),o=e(151),s=e(152),c=e(153),u=Object.prototype.hasOwnProperty;n.exports=function(n,t){var e=i(n),l=!e&&a(n),p=!e&&!l&&o(n),d=!e&&!l&&!p&&c(n),f=e||l||p||d,m=f?r(n.length,String):[],h=m.length;for(var g in n)!t&&!u.call(n,g)||f&&("length"==g||p&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||s(g,h))||m.push(g);return m}},function(n,t){n.exports=function(n,t){for(var e=-1,r=Array(n);++e<n;)r[e]=t(e);return r}},function(n,t){n.exports=function(){return!1}},function(n,t,e){var r=e(36),a=e(94),i=e(28),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,n.exports=function(n){return i(n)&&a(n.length)&&!!o[r(n)]}},function(n,t){n.exports=function(n){return function(t){return n(t)}}},function(n,t,e){(function(n){var r=e(141),a=t&&!t.nodeType&&t,i=a&&"object"==typeof n&&n&&!n.nodeType&&n,o=i&&i.exports===a&&r.process,s=function(){try{var n=i&&i.require&&i.require("util").types;return n||o&&o.binding&&o.binding("util")}catch(n){}}();n.exports=s}).call(this,e(110)(n))},function(n,t,e){var r=e(268),a=e(269),i=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return a(n);var t=[];for(var e in Object(n))i.call(n,e)&&"constructor"!=e&&t.push(e);return t}},function(n,t){var e=Object.prototype;n.exports=function(n){var t=n&&n.constructor;return n===("function"==typeof t&&t.prototype||e)}},function(n,t,e){var r=e(270)(Object.keys,Object);n.exports=r},function(n,t){n.exports=function(n,t){return function(e){return n(t(e))}}},function(n,t,e){var r=e(272),a=e(90),i=e(273),o=e(155),s=e(274),c=e(36),u=e(145),l=u(r),p=u(a),d=u(i),f=u(o),m=u(s),h=c;(r&&"[object DataView]"!=h(new r(new ArrayBuffer(1)))||a&&"[object Map]"!=h(new a)||i&&"[object Promise]"!=h(i.resolve())||o&&"[object Set]"!=h(new o)||s&&"[object WeakMap]"!=h(new s))&&(h=function(n){var t=c(n),e="[object Object]"==t?n.constructor:void 0,r=e?u(e):"";if(r)switch(r){case l:return"[object DataView]";case p:return"[object Map]";case d:return"[object Promise]";case f:return"[object Set]";case m:return"[object WeakMap]"}return t}),n.exports=h},function(n,t,e){var r=e(26)(e(18),"DataView");n.exports=r},function(n,t,e){var r=e(26)(e(18),"Promise");n.exports=r},function(n,t,e){var r=e(26)(e(18),"WeakMap");n.exports=r},function(n,t,e){var r=e(156),a=e(150);n.exports=function(n){for(var t=a(n),e=t.length;e--;){var i=t[e],o=n[i];t[e]=[i,o,r(o)]}return t}},function(n,t,e){var r=e(146),a=e(277),i=e(284),o=e(95),s=e(156),c=e(157),u=e(68);n.exports=function(n,t){return o(n)&&s(t)?c(u(n),t):function(e){var o=a(e,n);return void 0===o&&o===t?i(e,n):r(t,o,3)}}},function(n,t,e){var r=e(158);n.exports=function(n,t,e){var a=null==n?void 0:r(n,t);return void 0===a?e:a}},function(n,t,e){var r=e(279),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=r((function(n){var t=[];return 46===n.charCodeAt(0)&&t.push(""),n.replace(a,(function(n,e,r,a){t.push(r?a.replace(i,"$1"):e||n)})),t}));n.exports=o},function(n,t,e){var r=e(280);n.exports=function(n){var t=r(n,(function(n){return 500===e.size&&e.clear(),n})),e=t.cache;return t}},function(n,t,e){var r=e(92);function a(n,t){if("function"!=typeof n||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var e=function(){var r=arguments,a=t?t.apply(this,r):r[0],i=e.cache;if(i.has(a))return i.get(a);var o=n.apply(this,r);return e.cache=i.set(a,o)||i,o};return e.cache=new(a.Cache||r),e}a.Cache=r,n.exports=a},function(n,t,e){var r=e(282);n.exports=function(n){return null==n?"":r(n)}},function(n,t,e){var r=e(43),a=e(283),i=e(17),o=e(96),s=r?r.prototype:void 0,c=s?s.toString:void 0;n.exports=function n(t){if("string"==typeof t)return t;if(i(t))return a(t,n)+"";if(o(t))return c?c.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}},function(n,t){n.exports=function(n,t){for(var e=-1,r=null==n?0:n.length,a=Array(r);++e<r;)a[e]=t(n[e],e,n);return a}},function(n,t,e){var r=e(285),a=e(286);n.exports=function(n,t){return null!=n&&a(n,t,r)}},function(n,t){n.exports=function(n,t){return null!=n&&t in Object(n)}},function(n,t,e){var r=e(159),a=e(89),i=e(17),o=e(152),s=e(94),c=e(68);n.exports=function(n,t,e){for(var u=-1,l=(t=r(t,n)).length,p=!1;++u<l;){var d=c(t[u]);if(!(p=null!=n&&e(n,d)))break;n=n[d]}return p||++u!=l?p:!!(l=null==n?0:n.length)&&s(l)&&o(d,l)&&(i(n)||a(n))}},function(n,t,e){var r=e(288),a=e(289),i=e(95),o=e(68);n.exports=function(n){return i(n)?r(o(n)):a(n)}},function(n,t){n.exports=function(n){return function(t){return null==t?void 0:t[n]}}},function(n,t,e){var r=e(158);n.exports=function(n){return function(t){return r(t,n)}}},function(n,t,e){var r=e(97),a=e(291),i=e(293);n.exports=function(n,t){return i(a(n,t,r),n+"")}},function(n,t,e){var r=e(292),a=Math.max;n.exports=function(n,t,e){return t=a(void 0===t?n.length-1:t,0),function(){for(var i=arguments,o=-1,s=a(i.length-t,0),c=Array(s);++o<s;)c[o]=i[t+o];o=-1;for(var u=Array(t+1);++o<t;)u[o]=i[o];return u[t]=e(c),r(n,this,u)}}},function(n,t){n.exports=function(n,t,e){switch(e.length){case 0:return n.call(t);case 1:return n.call(t,e[0]);case 2:return n.call(t,e[0],e[1]);case 3:return n.call(t,e[0],e[1],e[2])}return n.apply(t,e)}},function(n,t,e){var r=e(294),a=e(297)(r);n.exports=a},function(n,t,e){var r=e(295),a=e(296),i=e(97),o=a?function(n,t){return a(n,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:i;n.exports=o},function(n,t){n.exports=function(n){return function(){return n}}},function(n,t,e){var r=e(26),a=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=a},function(n,t){var e=Date.now;n.exports=function(n){var t=0,r=0;return function(){var a=e(),i=16-(a-r);if(r=a,i>0){if(++t>=800)return arguments[0]}else t=0;return n.apply(void 0,arguments)}}},function(n,t,e){var r=e(148),a=e(299),i=e(304),o=e(149),s=e(305),c=e(93);n.exports=function(n,t,e){var u=-1,l=a,p=n.length,d=!0,f=[],m=f;if(e)d=!1,l=i;else if(p>=200){var h=t?null:s(n);if(h)return c(h);d=!1,l=o,m=new r}else m=t?[]:f;n:for(;++u<p;){var g=n[u],v=t?t(g):g;if(g=e||0!==g?g:0,d&&v==v){for(var y=m.length;y--;)if(m[y]===v)continue n;t&&m.push(v),f.push(g)}else l(m,v,e)||(m!==f&&m.push(v),f.push(g))}return f}},function(n,t,e){var r=e(300);n.exports=function(n,t){return!!(null==n?0:n.length)&&r(n,t,0)>-1}},function(n,t,e){var r=e(301),a=e(302),i=e(303);n.exports=function(n,t,e){return t==t?i(n,t,e):r(n,a,e)}},function(n,t){n.exports=function(n,t,e,r){for(var a=n.length,i=e+(r?1:-1);r?i--:++i<a;)if(t(n[i],i,n))return i;return-1}},function(n,t){n.exports=function(n){return n!=n}},function(n,t){n.exports=function(n,t,e){for(var r=e-1,a=n.length;++r<a;)if(n[r]===t)return r;return-1}},function(n,t){n.exports=function(n,t,e){for(var r=-1,a=null==n?0:n.length;++r<a;)if(e(t,n[r]))return!0;return!1}},function(n,t,e){var r=e(155),a=e(306),i=e(93),o=r&&1/i(new r([,-0]))[1]==1/0?function(n){return new r(n)}:a;n.exports=o},function(n,t){n.exports=function(){}},function(n,t,e){var r=e(154),a=e(28);n.exports=function(n){return a(n)&&r(n)}},function(n,t,e){},function(n,t,e){},function(n,t,e){"use strict";var r=e(6),a=e(1),i=e(75),o=e(14),s=e(7),c=e(24),u=e(192),l=e(38),p=e(2),d=e(27),f=e(52).f,m=e(23).f,h=e(8).f,g=e(180).trim,v=a.Number,y=v.prototype,b="Number"==c(d(y)),x=function(n){var t,e,r,a,i,o,s,c,u=l(n,!1);if("string"==typeof u&&u.length>2)if(43===(t=(u=g(u)).charCodeAt(0))||45===t){if(88===(e=u.charCodeAt(2))||120===e)return NaN}else if(48===t){switch(u.charCodeAt(1)){case 66:case 98:r=2,a=49;break;case 79:case 111:r=8,a=55;break;default:return+u}for(o=(i=u.slice(2)).length,s=0;s<o;s++)if((c=i.charCodeAt(s))<48||c>a)return NaN;return parseInt(i,r)}return+u};if(i("Number",!v(" 0o1")||!v("0b1")||v("+0x1"))){for(var w,S=function(n){var t=arguments.length<1?0:n,e=this;return e instanceof S&&(b?p((function(){y.valueOf.call(e)})):"Number"!=c(e))?u(new v(x(t)),e,S):x(t)},k=r?f(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,fromString,range".split(","),j=0;k.length>j;j++)s(v,w=k[j])&&!s(S,w)&&h(S,w,m(v,w));S.prototype=y,y.constructor=S,o(a,"Number",S)}},function(n,t,e){"use strict";e(160)},function(n,t,e){var r=e(0),a=e(1),i=e(55),o=[].slice,s=function(n){return function(t,e){var r=arguments.length>2,a=r?o.call(arguments,2):void 0;return n(r?function(){("function"==typeof t?t:Function(t)).apply(this,a)}:t,e)}};r({global:!0,bind:!0,forced:/MSIE .\./.test(i)},{setTimeout:s(a.setTimeout),setInterval:s(a.setInterval)})},function(n,t,e){"use strict";e(161)},function(n,t,e){"use strict";var r=e(25),a=e(4),i=[].slice,o={},s=function(n,t,e){if(!(t in o)){for(var r=[],a=0;a<t;a++)r[a]="a["+a+"]";o[t]=Function("C,a","return new C("+r.join(",")+")")}return o[t](n,e)};n.exports=Function.bind||function(n){var t=r(this),e=i.call(arguments,1),o=function(){var r=e.concat(i.call(arguments));return this instanceof o?s(t,r.length,r):t.apply(n,r)};return a(t.prototype)&&(o.prototype=t.prototype),o}},function(n,t,e){"use strict";e(164)},function(n,t,e){"use strict";e(165)},function(n,t,e){"use strict";e.r(t);e(104),e(196),e(203),e(204);var r=e(60),a=(e(102),e(51),e(9),e(11),e(16),e(46),e(29),Object.freeze({}));function i(n){return null==n}function o(n){return null!=n}function s(n){return!0===n}function c(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function u(n){return null!==n&&"object"==typeof n}var l=Object.prototype.toString;function p(n){return"[object Object]"===l.call(n)}function d(n){return"[object RegExp]"===l.call(n)}function f(n){var t=parseFloat(String(n));return t>=0&&Math.floor(t)===t&&isFinite(n)}function m(n){return o(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function h(n){return null==n?"":Array.isArray(n)||p(n)&&n.toString===l?JSON.stringify(n,null,2):String(n)}function g(n){var t=parseFloat(n);return isNaN(t)?n:t}function v(n,t){for(var e=Object.create(null),r=n.split(","),a=0;a<r.length;a++)e[r[a]]=!0;return t?function(n){return e[n.toLowerCase()]}:function(n){return e[n]}}v("slot,component",!0);var y=v("key,ref,slot,slot-scope,is");function b(n,t){if(n.length){var e=n.indexOf(t);if(e>-1)return n.splice(e,1)}}var x=Object.prototype.hasOwnProperty;function w(n,t){return x.call(n,t)}function S(n){var t=Object.create(null);return function(e){return t[e]||(t[e]=n(e))}}var k=/-(\w)/g,j=S((function(n){return n.replace(k,(function(n,t){return t?t.toUpperCase():""}))})),T=S((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),_=/\B([A-Z])/g,E=S((function(n){return n.replace(_,"-$1").toLowerCase()}));var O=Function.prototype.bind?function(n,t){return n.bind(t)}:function(n,t){function e(e){var r=arguments.length;return r?r>1?n.apply(t,arguments):n.call(t,e):n.call(t)}return e._length=n.length,e};function C(n,t){t=t||0;for(var e=n.length-t,r=new Array(e);e--;)r[e]=n[e+t];return r}function A(n,t){for(var e in t)n[e]=t[e];return n}function D(n){for(var t={},e=0;e<n.length;e++)n[e]&&A(t,n[e]);return t}function I(n,t,e){}var P=function(n,t,e){return!1},$=function(n){return n};function L(n,t){if(n===t)return!0;var e=u(n),r=u(t);if(!e||!r)return!e&&!r&&String(n)===String(t);try{var a=Array.isArray(n),i=Array.isArray(t);if(a&&i)return n.length===t.length&&n.every((function(n,e){return L(n,t[e])}));if(n instanceof Date&&t instanceof Date)return n.getTime()===t.getTime();if(a||i)return!1;var o=Object.keys(n),s=Object.keys(t);return o.length===s.length&&o.every((function(e){return L(n[e],t[e])}))}catch(n){return!1}}function B(n,t){for(var e=0;e<n.length;e++)if(L(n[e],t))return e;return-1}function N(n){var t=!1;return function(){t||(t=!0,n.apply(this,arguments))}}var M=["component","directive","filter"],R=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],F={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:P,isReservedAttr:P,isUnknownElement:P,getTagNamespace:I,parsePlatformTagName:$,mustUseProp:P,async:!0,_lifecycleHooks:R},z=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function J(n,t,e,r){Object.defineProperty(n,t,{value:e,enumerable:!!r,writable:!0,configurable:!0})}var U=new RegExp("[^"+z.source+".$_\\d]");var q,G="__proto__"in{},W="undefined"!=typeof window,V="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,H=V&&WXEnvironment.platform.toLowerCase(),K=W&&window.navigator.userAgent.toLowerCase(),X=K&&/msie|trident/.test(K),Y=K&&K.indexOf("msie 9.0")>0,Z=K&&K.indexOf("edge/")>0,Q=(K&&K.indexOf("android"),K&&/iphone|ipad|ipod|ios/.test(K)||"ios"===H),nn=(K&&/chrome\/\d+/.test(K),K&&/phantomjs/.test(K),K&&K.match(/firefox\/(\d+)/)),tn={}.watch,en=!1;if(W)try{var rn={};Object.defineProperty(rn,"passive",{get:function(){en=!0}}),window.addEventListener("test-passive",null,rn)}catch(n){}var an=function(){return void 0===q&&(q=!W&&!V&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),q},on=W&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function sn(n){return"function"==typeof n&&/native code/.test(n.toString())}var cn,un="undefined"!=typeof Symbol&&sn(Symbol)&&"undefined"!=typeof Reflect&&sn(Reflect.ownKeys);cn="undefined"!=typeof Set&&sn(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var ln=I,pn=0,dn=function(){this.id=pn++,this.subs=[]};dn.prototype.addSub=function(n){this.subs.push(n)},dn.prototype.removeSub=function(n){b(this.subs,n)},dn.prototype.depend=function(){dn.target&&dn.target.addDep(this)},dn.prototype.notify=function(){var n=this.subs.slice();for(var t=0,e=n.length;t<e;t++)n[t].update()},dn.target=null;var fn=[];function mn(n){fn.push(n),dn.target=n}function hn(){fn.pop(),dn.target=fn[fn.length-1]}var gn=function(n,t,e,r,a,i,o,s){this.tag=n,this.data=t,this.children=e,this.text=r,this.elm=a,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},vn={child:{configurable:!0}};vn.child.get=function(){return this.componentInstance},Object.defineProperties(gn.prototype,vn);var yn=function(n){void 0===n&&(n="");var t=new gn;return t.text=n,t.isComment=!0,t};function bn(n){return new gn(void 0,void 0,void 0,String(n))}function xn(n){var t=new gn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return t.ns=n.ns,t.isStatic=n.isStatic,t.key=n.key,t.isComment=n.isComment,t.fnContext=n.fnContext,t.fnOptions=n.fnOptions,t.fnScopeId=n.fnScopeId,t.asyncMeta=n.asyncMeta,t.isCloned=!0,t}var wn=Array.prototype,Sn=Object.create(wn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var t=wn[n];J(Sn,n,(function(){for(var e=[],r=arguments.length;r--;)e[r]=arguments[r];var a,i=t.apply(this,e),o=this.__ob__;switch(n){case"push":case"unshift":a=e;break;case"splice":a=e.slice(2)}return a&&o.observeArray(a),o.dep.notify(),i}))}));var kn=Object.getOwnPropertyNames(Sn),jn=!0;function Tn(n){jn=n}var _n=function(n){this.value=n,this.dep=new dn,this.vmCount=0,J(n,"__ob__",this),Array.isArray(n)?(G?function(n,t){n.__proto__=t}(n,Sn):function(n,t,e){for(var r=0,a=e.length;r<a;r++){var i=e[r];J(n,i,t[i])}}(n,Sn,kn),this.observeArray(n)):this.walk(n)};function En(n,t){var e;if(u(n)&&!(n instanceof gn))return w(n,"__ob__")&&n.__ob__ instanceof _n?e=n.__ob__:jn&&!an()&&(Array.isArray(n)||p(n))&&Object.isExtensible(n)&&!n._isVue&&(e=new _n(n)),t&&e&&e.vmCount++,e}function On(n,t,e,r,a){var i=new dn,o=Object.getOwnPropertyDescriptor(n,t);if(!o||!1!==o.configurable){var s=o&&o.get,c=o&&o.set;s&&!c||2!==arguments.length||(e=n[t]);var u=!a&&En(e);Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(n):e;return dn.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(t)&&Dn(t))),t},set:function(t){var r=s?s.call(n):e;t===r||t!=t&&r!=r||s&&!c||(c?c.call(n,t):e=t,u=!a&&En(t),i.notify())}})}}function Cn(n,t,e){if(Array.isArray(n)&&f(t))return n.length=Math.max(n.length,t),n.splice(t,1,e),e;if(t in n&&!(t in Object.prototype))return n[t]=e,e;var r=n.__ob__;return n._isVue||r&&r.vmCount?e:r?(On(r.value,t,e),r.dep.notify(),e):(n[t]=e,e)}function An(n,t){if(Array.isArray(n)&&f(t))n.splice(t,1);else{var e=n.__ob__;n._isVue||e&&e.vmCount||w(n,t)&&(delete n[t],e&&e.dep.notify())}}function Dn(n){for(var t=void 0,e=0,r=n.length;e<r;e++)(t=n[e])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&Dn(t)}_n.prototype.walk=function(n){for(var t=Object.keys(n),e=0;e<t.length;e++)On(n,t[e])},_n.prototype.observeArray=function(n){for(var t=0,e=n.length;t<e;t++)En(n[t])};var In=F.optionMergeStrategies;function Pn(n,t){if(!t)return n;for(var e,r,a,i=un?Reflect.ownKeys(t):Object.keys(t),o=0;o<i.length;o++)"__ob__"!==(e=i[o])&&(r=n[e],a=t[e],w(n,e)?r!==a&&p(r)&&p(a)&&Pn(r,a):Cn(n,e,a));return n}function $n(n,t,e){return e?function(){var r="function"==typeof t?t.call(e,e):t,a="function"==typeof n?n.call(e,e):n;return r?Pn(r,a):a}:t?n?function(){return Pn("function"==typeof t?t.call(this,this):t,"function"==typeof n?n.call(this,this):n)}:t:n}function Ln(n,t){var e=t?n?n.concat(t):Array.isArray(t)?t:[t]:n;return e?function(n){for(var t=[],e=0;e<n.length;e++)-1===t.indexOf(n[e])&&t.push(n[e]);return t}(e):e}function Bn(n,t,e,r){var a=Object.create(n||null);return t?A(a,t):a}In.data=function(n,t,e){return e?$n(n,t,e):t&&"function"!=typeof t?n:$n(n,t)},R.forEach((function(n){In[n]=Ln})),M.forEach((function(n){In[n+"s"]=Bn})),In.watch=function(n,t,e,r){if(n===tn&&(n=void 0),t===tn&&(t=void 0),!t)return Object.create(n||null);if(!n)return t;var a={};for(var i in A(a,n),t){var o=a[i],s=t[i];o&&!Array.isArray(o)&&(o=[o]),a[i]=o?o.concat(s):Array.isArray(s)?s:[s]}return a},In.props=In.methods=In.inject=In.computed=function(n,t,e,r){if(!n)return t;var a=Object.create(null);return A(a,n),t&&A(a,t),a},In.provide=$n;var Nn=function(n,t){return void 0===t?n:t};function Mn(n,t,e){if("function"==typeof t&&(t=t.options),function(n,t){var e=n.props;if(e){var r,a,i={};if(Array.isArray(e))for(r=e.length;r--;)"string"==typeof(a=e[r])&&(i[j(a)]={type:null});else if(p(e))for(var o in e)a=e[o],i[j(o)]=p(a)?a:{type:a};else 0;n.props=i}}(t),function(n,t){var e=n.inject;if(e){var r=n.inject={};if(Array.isArray(e))for(var a=0;a<e.length;a++)r[e[a]]={from:e[a]};else if(p(e))for(var i in e){var o=e[i];r[i]=p(o)?A({from:i},o):{from:o}}else 0}}(t),function(n){var t=n.directives;if(t)for(var e in t){var r=t[e];"function"==typeof r&&(t[e]={bind:r,update:r})}}(t),!t._base&&(t.extends&&(n=Mn(n,t.extends,e)),t.mixins))for(var r=0,a=t.mixins.length;r<a;r++)n=Mn(n,t.mixins[r],e);var i,o={};for(i in n)s(i);for(i in t)w(n,i)||s(i);function s(r){var a=In[r]||Nn;o[r]=a(n[r],t[r],e,r)}return o}function Rn(n,t,e,r){if("string"==typeof e){var a=n[t];if(w(a,e))return a[e];var i=j(e);if(w(a,i))return a[i];var o=T(i);return w(a,o)?a[o]:a[e]||a[i]||a[o]}}function Fn(n,t,e,r){var a=t[n],i=!w(e,n),o=e[n],s=Un(Boolean,a.type);if(s>-1)if(i&&!w(a,"default"))o=!1;else if(""===o||o===E(n)){var c=Un(String,a.type);(c<0||s<c)&&(o=!0)}if(void 0===o){o=function(n,t,e){if(!w(t,"default"))return;var r=t.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[e]&&void 0!==n._props[e])return n._props[e];return"function"==typeof r&&"Function"!==zn(t.type)?r.call(n):r}(r,a,n);var u=jn;Tn(!0),En(o),Tn(u)}return o}function zn(n){var t=n&&n.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function Jn(n,t){return zn(n)===zn(t)}function Un(n,t){if(!Array.isArray(t))return Jn(t,n)?0:-1;for(var e=0,r=t.length;e<r;e++)if(Jn(t[e],n))return e;return-1}function qn(n,t,e){mn();try{if(t)for(var r=t;r=r.$parent;){var a=r.$options.errorCaptured;if(a)for(var i=0;i<a.length;i++)try{if(!1===a[i].call(r,n,t,e))return}catch(n){Wn(n,r,"errorCaptured hook")}}Wn(n,t,e)}finally{hn()}}function Gn(n,t,e,r,a){var i;try{(i=e?n.apply(t,e):n.call(t))&&!i._isVue&&m(i)&&!i._handled&&(i.catch((function(n){return qn(n,r,a+" (Promise/async)")})),i._handled=!0)}catch(n){qn(n,r,a)}return i}function Wn(n,t,e){if(F.errorHandler)try{return F.errorHandler.call(null,n,t,e)}catch(t){t!==n&&Vn(t,null,"config.errorHandler")}Vn(n,t,e)}function Vn(n,t,e){if(!W&&!V||"undefined"==typeof console)throw n;console.error(n)}var Hn,Kn=!1,Xn=[],Yn=!1;function Zn(){Yn=!1;var n=Xn.slice(0);Xn.length=0;for(var t=0;t<n.length;t++)n[t]()}if("undefined"!=typeof Promise&&sn(Promise)){var Qn=Promise.resolve();Hn=function(){Qn.then(Zn),Q&&setTimeout(I)},Kn=!0}else if(X||"undefined"==typeof MutationObserver||!sn(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Hn="undefined"!=typeof setImmediate&&sn(setImmediate)?function(){setImmediate(Zn)}:function(){setTimeout(Zn,0)};else{var nt=1,tt=new MutationObserver(Zn),et=document.createTextNode(String(nt));tt.observe(et,{characterData:!0}),Hn=function(){nt=(nt+1)%2,et.data=String(nt)},Kn=!0}function rt(n,t){var e;if(Xn.push((function(){if(n)try{n.call(t)}catch(n){qn(n,t,"nextTick")}else e&&e(t)})),Yn||(Yn=!0,Hn()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){e=n}))}var at=new cn;function it(n){!function n(t,e){var r,a,i=Array.isArray(t);if(!i&&!u(t)||Object.isFrozen(t)||t instanceof gn)return;if(t.__ob__){var o=t.__ob__.dep.id;if(e.has(o))return;e.add(o)}if(i)for(r=t.length;r--;)n(t[r],e);else for(a=Object.keys(t),r=a.length;r--;)n(t[a[r]],e)}(n,at),at.clear()}var ot=S((function(n){var t="&"===n.charAt(0),e="~"===(n=t?n.slice(1):n).charAt(0),r="!"===(n=e?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:e,capture:r,passive:t}}));function st(n,t){function e(){var n=arguments,r=e.fns;if(!Array.isArray(r))return Gn(r,null,arguments,t,"v-on handler");for(var a=r.slice(),i=0;i<a.length;i++)Gn(a[i],null,n,t,"v-on handler")}return e.fns=n,e}function ct(n,t,e,r,a,o){var c,u,l,p;for(c in n)u=n[c],l=t[c],p=ot(c),i(u)||(i(l)?(i(u.fns)&&(u=n[c]=st(u,o)),s(p.once)&&(u=n[c]=a(p.name,u,p.capture)),e(p.name,u,p.capture,p.passive,p.params)):u!==l&&(l.fns=u,n[c]=l));for(c in t)i(n[c])&&r((p=ot(c)).name,t[c],p.capture)}function ut(n,t,e){var r;n instanceof gn&&(n=n.data.hook||(n.data.hook={}));var a=n[t];function c(){e.apply(this,arguments),b(r.fns,c)}i(a)?r=st([c]):o(a.fns)&&s(a.merged)?(r=a).fns.push(c):r=st([a,c]),r.merged=!0,n[t]=r}function lt(n,t,e,r,a){if(o(t)){if(w(t,e))return n[e]=t[e],a||delete t[e],!0;if(w(t,r))return n[e]=t[r],a||delete t[r],!0}return!1}function pt(n){return c(n)?[bn(n)]:Array.isArray(n)?function n(t,e){var r,a,u,l,p=[];for(r=0;r<t.length;r++)i(a=t[r])||"boolean"==typeof a||(u=p.length-1,l=p[u],Array.isArray(a)?a.length>0&&(dt((a=n(a,(e||"")+"_"+r))[0])&&dt(l)&&(p[u]=bn(l.text+a[0].text),a.shift()),p.push.apply(p,a)):c(a)?dt(l)?p[u]=bn(l.text+a):""!==a&&p.push(bn(a)):dt(a)&&dt(l)?p[u]=bn(l.text+a.text):(s(t._isVList)&&o(a.tag)&&i(a.key)&&o(e)&&(a.key="__vlist"+e+"_"+r+"__"),p.push(a)));return p}(n):void 0}function dt(n){return o(n)&&o(n.text)&&!1===n.isComment}function ft(n,t){if(n){for(var e=Object.create(null),r=un?Reflect.ownKeys(n):Object.keys(n),a=0;a<r.length;a++){var i=r[a];if("__ob__"!==i){for(var o=n[i].from,s=t;s;){if(s._provided&&w(s._provided,o)){e[i]=s._provided[o];break}s=s.$parent}if(!s)if("default"in n[i]){var c=n[i].default;e[i]="function"==typeof c?c.call(t):c}else 0}}return e}}function mt(n,t){if(!n||!n.length)return{};for(var e={},r=0,a=n.length;r<a;r++){var i=n[r],o=i.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,i.context!==t&&i.fnContext!==t||!o||null==o.slot)(e.default||(e.default=[])).push(i);else{var s=o.slot,c=e[s]||(e[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in e)e[u].every(ht)&&delete e[u];return e}function ht(n){return n.isComment&&!n.asyncFactory||" "===n.text}function gt(n,t,e){var r,i=Object.keys(t).length>0,o=n?!!n.$stable:!i,s=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(o&&e&&e!==a&&s===e.$key&&!i&&!e.$hasNormal)return e;for(var c in r={},n)n[c]&&"$"!==c[0]&&(r[c]=vt(t,c,n[c]))}else r={};for(var u in t)u in r||(r[u]=yt(t,u));return n&&Object.isExtensible(n)&&(n._normalized=r),J(r,"$stable",o),J(r,"$key",s),J(r,"$hasNormal",i),r}function vt(n,t,e){var r=function(){var n=arguments.length?e.apply(null,arguments):e({});return(n=n&&"object"==typeof n&&!Array.isArray(n)?[n]:pt(n))&&(0===n.length||1===n.length&&n[0].isComment)?void 0:n};return e.proxy&&Object.defineProperty(n,t,{get:r,enumerable:!0,configurable:!0}),r}function yt(n,t){return function(){return n[t]}}function bt(n,t){var e,r,a,i,s;if(Array.isArray(n)||"string"==typeof n)for(e=new Array(n.length),r=0,a=n.length;r<a;r++)e[r]=t(n[r],r);else if("number"==typeof n)for(e=new Array(n),r=0;r<n;r++)e[r]=t(r+1,r);else if(u(n))if(un&&n[Symbol.iterator]){e=[];for(var c=n[Symbol.iterator](),l=c.next();!l.done;)e.push(t(l.value,e.length)),l=c.next()}else for(i=Object.keys(n),e=new Array(i.length),r=0,a=i.length;r<a;r++)s=i[r],e[r]=t(n[s],s,r);return o(e)||(e=[]),e._isVList=!0,e}function xt(n,t,e,r){var a,i=this.$scopedSlots[n];i?(e=e||{},r&&(e=A(A({},r),e)),a=i(e)||t):a=this.$slots[n]||t;var o=e&&e.slot;return o?this.$createElement("template",{slot:o},a):a}function wt(n){return Rn(this.$options,"filters",n)||$}function St(n,t){return Array.isArray(n)?-1===n.indexOf(t):n!==t}function kt(n,t,e,r,a){var i=F.keyCodes[t]||e;return a&&r&&!F.keyCodes[t]?St(a,r):i?St(i,n):r?E(r)!==t:void 0}function jt(n,t,e,r,a){if(e)if(u(e)){var i;Array.isArray(e)&&(e=D(e));var o=function(o){if("class"===o||"style"===o||y(o))i=n;else{var s=n.attrs&&n.attrs.type;i=r||F.mustUseProp(t,s,o)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var c=j(o),u=E(o);c in i||u in i||(i[o]=e[o],a&&((n.on||(n.on={}))["update:"+o]=function(n){e[o]=n}))};for(var s in e)o(s)}else;return n}function Tt(n,t){var e=this._staticTrees||(this._staticTrees=[]),r=e[n];return r&&!t||Et(r=e[n]=this.$options.staticRenderFns[n].call(this._renderProxy,null,this),"__static__"+n,!1),r}function _t(n,t,e){return Et(n,"__once__"+t+(e?"_"+e:""),!0),n}function Et(n,t,e){if(Array.isArray(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&Ot(n[r],t+"_"+r,e);else Ot(n,t,e)}function Ot(n,t,e){n.isStatic=!0,n.key=t,n.isOnce=e}function Ct(n,t){if(t)if(p(t)){var e=n.on=n.on?A({},n.on):{};for(var r in t){var a=e[r],i=t[r];e[r]=a?[].concat(a,i):i}}else;return n}function At(n,t,e,r){t=t||{$stable:!e};for(var a=0;a<n.length;a++){var i=n[a];Array.isArray(i)?At(i,t,e):i&&(i.proxy&&(i.fn.proxy=!0),t[i.key]=i.fn)}return r&&(t.$key=r),t}function Dt(n,t){for(var e=0;e<t.length;e+=2){var r=t[e];"string"==typeof r&&r&&(n[t[e]]=t[e+1])}return n}function It(n,t){return"string"==typeof n?t+n:n}function Pt(n){n._o=_t,n._n=g,n._s=h,n._l=bt,n._t=xt,n._q=L,n._i=B,n._m=Tt,n._f=wt,n._k=kt,n._b=jt,n._v=bn,n._e=yn,n._u=At,n._g=Ct,n._d=Dt,n._p=It}function $t(n,t,e,r,i){var o,c=this,u=i.options;w(r,"_uid")?(o=Object.create(r))._original=r:(o=r,r=r._original);var l=s(u._compiled),p=!l;this.data=n,this.props=t,this.children=e,this.parent=r,this.listeners=n.on||a,this.injections=ft(u.inject,r),this.slots=function(){return c.$slots||gt(n.scopedSlots,c.$slots=mt(e,r)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return gt(n.scopedSlots,this.slots())}}),l&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=gt(n.scopedSlots,this.$slots)),u._scopeId?this._c=function(n,t,e,a){var i=zt(o,n,t,e,a,p);return i&&!Array.isArray(i)&&(i.fnScopeId=u._scopeId,i.fnContext=r),i}:this._c=function(n,t,e,r){return zt(o,n,t,e,r,p)}}function Lt(n,t,e,r,a){var i=xn(n);return i.fnContext=e,i.fnOptions=r,t.slot&&((i.data||(i.data={})).slot=t.slot),i}function Bt(n,t){for(var e in t)n[j(e)]=t[e]}Pt($t.prototype);var Nt={init:function(n,t){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var e=n;Nt.prepatch(e,e)}else{(n.componentInstance=function(n,t){var e={_isComponent:!0,_parentVnode:n,parent:t},r=n.data.inlineTemplate;o(r)&&(e.render=r.render,e.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(e)}(n,Yt)).$mount(t?n.elm:void 0,t)}},prepatch:function(n,t){var e=t.componentOptions;!function(n,t,e,r,i){0;var o=r.data.scopedSlots,s=n.$scopedSlots,c=!!(o&&!o.$stable||s!==a&&!s.$stable||o&&n.$scopedSlots.$key!==o.$key),u=!!(i||n.$options._renderChildren||c);n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r);if(n.$options._renderChildren=i,n.$attrs=r.data.attrs||a,n.$listeners=e||a,t&&n.$options.props){Tn(!1);for(var l=n._props,p=n.$options._propKeys||[],d=0;d<p.length;d++){var f=p[d],m=n.$options.props;l[f]=Fn(f,m,t,n)}Tn(!0),n.$options.propsData=t}e=e||a;var h=n.$options._parentListeners;n.$options._parentListeners=e,Xt(n,e,h),u&&(n.$slots=mt(i,r.context),n.$forceUpdate());0}(t.componentInstance=n.componentInstance,e.propsData,e.listeners,t,e.children)},insert:function(n){var t,e=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,te(r,"mounted")),n.data.keepAlive&&(e._isMounted?((t=r)._inactive=!1,re.push(t)):ne(r,!0))},destroy:function(n){var t=n.componentInstance;t._isDestroyed||(n.data.keepAlive?function n(t,e){if(e&&(t._directInactive=!0,Qt(t)))return;if(!t._inactive){t._inactive=!0;for(var r=0;r<t.$children.length;r++)n(t.$children[r]);te(t,"deactivated")}}(t,!0):t.$destroy())}},Mt=Object.keys(Nt);function Rt(n,t,e,r,c){if(!i(n)){var l=e.$options._base;if(u(n)&&(n=l.extend(n)),"function"==typeof n){var p;if(i(n.cid)&&void 0===(n=function(n,t){if(s(n.error)&&o(n.errorComp))return n.errorComp;if(o(n.resolved))return n.resolved;var e=Ut;e&&o(n.owners)&&-1===n.owners.indexOf(e)&&n.owners.push(e);if(s(n.loading)&&o(n.loadingComp))return n.loadingComp;if(e&&!o(n.owners)){var r=n.owners=[e],a=!0,c=null,l=null;e.$on("hook:destroyed",(function(){return b(r,e)}));var p=function(n){for(var t=0,e=r.length;t<e;t++)r[t].$forceUpdate();n&&(r.length=0,null!==c&&(clearTimeout(c),c=null),null!==l&&(clearTimeout(l),l=null))},d=N((function(e){n.resolved=qt(e,t),a?r.length=0:p(!0)})),f=N((function(t){o(n.errorComp)&&(n.error=!0,p(!0))})),h=n(d,f);return u(h)&&(m(h)?i(n.resolved)&&h.then(d,f):m(h.component)&&(h.component.then(d,f),o(h.error)&&(n.errorComp=qt(h.error,t)),o(h.loading)&&(n.loadingComp=qt(h.loading,t),0===h.delay?n.loading=!0:c=setTimeout((function(){c=null,i(n.resolved)&&i(n.error)&&(n.loading=!0,p(!1))}),h.delay||200)),o(h.timeout)&&(l=setTimeout((function(){l=null,i(n.resolved)&&f(null)}),h.timeout)))),a=!1,n.loading?n.loadingComp:n.resolved}}(p=n,l)))return function(n,t,e,r,a){var i=yn();return i.asyncFactory=n,i.asyncMeta={data:t,context:e,children:r,tag:a},i}(p,t,e,r,c);t=t||{},ke(n),o(t.model)&&function(n,t){var e=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(t.attrs||(t.attrs={}))[e]=t.model.value;var a=t.on||(t.on={}),i=a[r],s=t.model.callback;o(i)?(Array.isArray(i)?-1===i.indexOf(s):i!==s)&&(a[r]=[s].concat(i)):a[r]=s}(n.options,t);var d=function(n,t,e){var r=t.options.props;if(!i(r)){var a={},s=n.attrs,c=n.props;if(o(s)||o(c))for(var u in r){var l=E(u);lt(a,c,u,l,!0)||lt(a,s,u,l,!1)}return a}}(t,n);if(s(n.options.functional))return function(n,t,e,r,i){var s=n.options,c={},u=s.props;if(o(u))for(var l in u)c[l]=Fn(l,u,t||a);else o(e.attrs)&&Bt(c,e.attrs),o(e.props)&&Bt(c,e.props);var p=new $t(e,c,i,r,n),d=s.render.call(null,p._c,p);if(d instanceof gn)return Lt(d,e,p.parent,s,p);if(Array.isArray(d)){for(var f=pt(d)||[],m=new Array(f.length),h=0;h<f.length;h++)m[h]=Lt(f[h],e,p.parent,s,p);return m}}(n,d,t,e,r);var f=t.on;if(t.on=t.nativeOn,s(n.options.abstract)){var h=t.slot;t={},h&&(t.slot=h)}!function(n){for(var t=n.hook||(n.hook={}),e=0;e<Mt.length;e++){var r=Mt[e],a=t[r],i=Nt[r];a===i||a&&a._merged||(t[r]=a?Ft(i,a):i)}}(t);var g=n.options.name||c;return new gn("vue-component-"+n.cid+(g?"-"+g:""),t,void 0,void 0,void 0,e,{Ctor:n,propsData:d,listeners:f,tag:c,children:r},p)}}}function Ft(n,t){var e=function(e,r){n(e,r),t(e,r)};return e._merged=!0,e}function zt(n,t,e,r,a,l){return(Array.isArray(e)||c(e))&&(a=r,r=e,e=void 0),s(l)&&(a=2),function(n,t,e,r,a){if(o(e)&&o(e.__ob__))return yn();o(e)&&o(e.is)&&(t=e.is);if(!t)return yn();0;Array.isArray(r)&&"function"==typeof r[0]&&((e=e||{}).scopedSlots={default:r[0]},r.length=0);2===a?r=pt(r):1===a&&(r=function(n){for(var t=0;t<n.length;t++)if(Array.isArray(n[t]))return Array.prototype.concat.apply([],n);return n}(r));var c,l;if("string"==typeof t){var p;l=n.$vnode&&n.$vnode.ns||F.getTagNamespace(t),c=F.isReservedTag(t)?new gn(F.parsePlatformTagName(t),e,r,void 0,void 0,n):e&&e.pre||!o(p=Rn(n.$options,"components",t))?new gn(t,e,r,void 0,void 0,n):Rt(p,e,n,r,t)}else c=Rt(t,e,n,r);return Array.isArray(c)?c:o(c)?(o(l)&&function n(t,e,r){t.ns=e,"foreignObject"===t.tag&&(e=void 0,r=!0);if(o(t.children))for(var a=0,c=t.children.length;a<c;a++){var u=t.children[a];o(u.tag)&&(i(u.ns)||s(r)&&"svg"!==u.tag)&&n(u,e,r)}}(c,l),o(e)&&function(n){u(n.style)&&it(n.style);u(n.class)&&it(n.class)}(e),c):yn()}(n,t,e,r,a)}var Jt,Ut=null;function qt(n,t){return(n.__esModule||un&&"Module"===n[Symbol.toStringTag])&&(n=n.default),u(n)?t.extend(n):n}function Gt(n){return n.isComment&&n.asyncFactory}function Wt(n){if(Array.isArray(n))for(var t=0;t<n.length;t++){var e=n[t];if(o(e)&&(o(e.componentOptions)||Gt(e)))return e}}function Vt(n,t){Jt.$on(n,t)}function Ht(n,t){Jt.$off(n,t)}function Kt(n,t){var e=Jt;return function r(){var a=t.apply(null,arguments);null!==a&&e.$off(n,r)}}function Xt(n,t,e){Jt=n,ct(t,e||{},Vt,Ht,Kt,n),Jt=void 0}var Yt=null;function Zt(n){var t=Yt;return Yt=n,function(){Yt=t}}function Qt(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function ne(n,t){if(t){if(n._directInactive=!1,Qt(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var e=0;e<n.$children.length;e++)ne(n.$children[e]);te(n,"activated")}}function te(n,t){mn();var e=n.$options[t],r=t+" hook";if(e)for(var a=0,i=e.length;a<i;a++)Gn(e[a],n,null,n,r);n._hasHookEvent&&n.$emit("hook:"+t),hn()}var ee=[],re=[],ae={},ie=!1,oe=!1,se=0;var ce=0,ue=Date.now;if(W&&!X){var le=window.performance;le&&"function"==typeof le.now&&ue()>document.createEvent("Event").timeStamp&&(ue=function(){return le.now()})}function pe(){var n,t;for(ce=ue(),oe=!0,ee.sort((function(n,t){return n.id-t.id})),se=0;se<ee.length;se++)(n=ee[se]).before&&n.before(),t=n.id,ae[t]=null,n.run();var e=re.slice(),r=ee.slice();se=ee.length=re.length=0,ae={},ie=oe=!1,function(n){for(var t=0;t<n.length;t++)n[t]._inactive=!0,ne(n[t],!0)}(e),function(n){var t=n.length;for(;t--;){var e=n[t],r=e.vm;r._watcher===e&&r._isMounted&&!r._isDestroyed&&te(r,"updated")}}(r),on&&F.devtools&&on.emit("flush")}var de=0,fe=function(n,t,e,r,a){this.vm=n,a&&(n._watcher=this),n._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=e,this.id=++de,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new cn,this.newDepIds=new cn,this.expression="","function"==typeof t?this.getter=t:(this.getter=function(n){if(!U.test(n)){var t=n.split(".");return function(n){for(var e=0;e<t.length;e++){if(!n)return;n=n[t[e]]}return n}}}(t),this.getter||(this.getter=I)),this.value=this.lazy?void 0:this.get()};fe.prototype.get=function(){var n;mn(this);var t=this.vm;try{n=this.getter.call(t,t)}catch(n){if(!this.user)throw n;qn(n,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&it(n),hn(),this.cleanupDeps()}return n},fe.prototype.addDep=function(n){var t=n.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(n),this.depIds.has(t)||n.addSub(this))},fe.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var t=this.deps[n];this.newDepIds.has(t.id)||t.removeSub(this)}var e=this.depIds;this.depIds=this.newDepIds,this.newDepIds=e,this.newDepIds.clear(),e=this.deps,this.deps=this.newDeps,this.newDeps=e,this.newDeps.length=0},fe.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(n){var t=n.id;if(null==ae[t]){if(ae[t]=!0,oe){for(var e=ee.length-1;e>se&&ee[e].id>n.id;)e--;ee.splice(e+1,0,n)}else ee.push(n);ie||(ie=!0,rt(pe))}}(this)},fe.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||u(n)||this.deep){var t=this.value;if(this.value=n,this.user)try{this.cb.call(this.vm,n,t)}catch(n){qn(n,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,n,t)}}},fe.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},fe.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},fe.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||b(this.vm._watchers,this);for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1}};var me={enumerable:!0,configurable:!0,get:I,set:I};function he(n,t,e){me.get=function(){return this[t][e]},me.set=function(n){this[t][e]=n},Object.defineProperty(n,e,me)}function ge(n){n._watchers=[];var t=n.$options;t.props&&function(n,t){var e=n.$options.propsData||{},r=n._props={},a=n.$options._propKeys=[];n.$parent&&Tn(!1);var i=function(i){a.push(i);var o=Fn(i,t,e,n);On(r,i,o),i in n||he(n,"_props",i)};for(var o in t)i(o);Tn(!0)}(n,t.props),t.methods&&function(n,t){n.$options.props;for(var e in t)n[e]="function"!=typeof t[e]?I:O(t[e],n)}(n,t.methods),t.data?function(n){var t=n.$options.data;p(t=n._data="function"==typeof t?function(n,t){mn();try{return n.call(t,t)}catch(n){return qn(n,t,"data()"),{}}finally{hn()}}(t,n):t||{})||(t={});var e=Object.keys(t),r=n.$options.props,a=(n.$options.methods,e.length);for(;a--;){var i=e[a];0,r&&w(r,i)||(o=void 0,36!==(o=(i+"").charCodeAt(0))&&95!==o&&he(n,"_data",i))}var o;En(t,!0)}(n):En(n._data={},!0),t.computed&&function(n,t){var e=n._computedWatchers=Object.create(null),r=an();for(var a in t){var i=t[a],o="function"==typeof i?i:i.get;0,r||(e[a]=new fe(n,o||I,I,ve)),a in n||ye(n,a,i)}}(n,t.computed),t.watch&&t.watch!==tn&&function(n,t){for(var e in t){var r=t[e];if(Array.isArray(r))for(var a=0;a<r.length;a++)we(n,e,r[a]);else we(n,e,r)}}(n,t.watch)}var ve={lazy:!0};function ye(n,t,e){var r=!an();"function"==typeof e?(me.get=r?be(t):xe(e),me.set=I):(me.get=e.get?r&&!1!==e.cache?be(t):xe(e.get):I,me.set=e.set||I),Object.defineProperty(n,t,me)}function be(n){return function(){var t=this._computedWatchers&&this._computedWatchers[n];if(t)return t.dirty&&t.evaluate(),dn.target&&t.depend(),t.value}}function xe(n){return function(){return n.call(this,this)}}function we(n,t,e,r){return p(e)&&(r=e,e=e.handler),"string"==typeof e&&(e=n[e]),n.$watch(t,e,r)}var Se=0;function ke(n){var t=n.options;if(n.super){var e=ke(n.super);if(e!==n.superOptions){n.superOptions=e;var r=function(n){var t,e=n.options,r=n.sealedOptions;for(var a in e)e[a]!==r[a]&&(t||(t={}),t[a]=e[a]);return t}(n);r&&A(n.extendOptions,r),(t=n.options=Mn(e,n.extendOptions)).name&&(t.components[t.name]=n)}}return t}function je(n){this._init(n)}function Te(n){n.cid=0;var t=1;n.extend=function(n){n=n||{};var e=this,r=e.cid,a=n._Ctor||(n._Ctor={});if(a[r])return a[r];var i=n.name||e.options.name;var o=function(n){this._init(n)};return(o.prototype=Object.create(e.prototype)).constructor=o,o.cid=t++,o.options=Mn(e.options,n),o.super=e,o.options.props&&function(n){var t=n.options.props;for(var e in t)he(n.prototype,"_props",e)}(o),o.options.computed&&function(n){var t=n.options.computed;for(var e in t)ye(n.prototype,e,t[e])}(o),o.extend=e.extend,o.mixin=e.mixin,o.use=e.use,M.forEach((function(n){o[n]=e[n]})),i&&(o.options.components[i]=o),o.superOptions=e.options,o.extendOptions=n,o.sealedOptions=A({},o.options),a[r]=o,o}}function _e(n){return n&&(n.Ctor.options.name||n.tag)}function Ee(n,t){return Array.isArray(n)?n.indexOf(t)>-1:"string"==typeof n?n.split(",").indexOf(t)>-1:!!d(n)&&n.test(t)}function Oe(n,t){var e=n.cache,r=n.keys,a=n._vnode;for(var i in e){var o=e[i];if(o){var s=_e(o.componentOptions);s&&!t(s)&&Ce(e,i,r,a)}}}function Ce(n,t,e,r){var a=n[t];!a||r&&a.tag===r.tag||a.componentInstance.$destroy(),n[t]=null,b(e,t)}je.prototype._init=function(n){var t=this;t._uid=Se++,t._isVue=!0,n&&n._isComponent?function(n,t){var e=n.$options=Object.create(n.constructor.options),r=t._parentVnode;e.parent=t.parent,e._parentVnode=r;var a=r.componentOptions;e.propsData=a.propsData,e._parentListeners=a.listeners,e._renderChildren=a.children,e._componentTag=a.tag,t.render&&(e.render=t.render,e.staticRenderFns=t.staticRenderFns)}(t,n):t.$options=Mn(ke(t.constructor),n||{},t),t._renderProxy=t,t._self=t,function(n){var t=n.$options,e=t.parent;if(e&&!t.abstract){for(;e.$options.abstract&&e.$parent;)e=e.$parent;e.$children.push(n)}n.$parent=e,n.$root=e?e.$root:n,n.$children=[],n.$refs={},n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(t),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var t=n.$options._parentListeners;t&&Xt(n,t)}(t),function(n){n._vnode=null,n._staticTrees=null;var t=n.$options,e=n.$vnode=t._parentVnode,r=e&&e.context;n.$slots=mt(t._renderChildren,r),n.$scopedSlots=a,n._c=function(t,e,r,a){return zt(n,t,e,r,a,!1)},n.$createElement=function(t,e,r,a){return zt(n,t,e,r,a,!0)};var i=e&&e.data;On(n,"$attrs",i&&i.attrs||a,null,!0),On(n,"$listeners",t._parentListeners||a,null,!0)}(t),te(t,"beforeCreate"),function(n){var t=ft(n.$options.inject,n);t&&(Tn(!1),Object.keys(t).forEach((function(e){On(n,e,t[e])})),Tn(!0))}(t),ge(t),function(n){var t=n.$options.provide;t&&(n._provided="function"==typeof t?t.call(n):t)}(t),te(t,"created"),t.$options.el&&t.$mount(t.$options.el)},function(n){var t={get:function(){return this._data}},e={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",t),Object.defineProperty(n.prototype,"$props",e),n.prototype.$set=Cn,n.prototype.$delete=An,n.prototype.$watch=function(n,t,e){if(p(t))return we(this,n,t,e);(e=e||{}).user=!0;var r=new fe(this,n,t,e);if(e.immediate)try{t.call(this,r.value)}catch(n){qn(n,this,'callback for immediate watcher "'+r.expression+'"')}return function(){r.teardown()}}}(je),function(n){var t=/^hook:/;n.prototype.$on=function(n,e){var r=this;if(Array.isArray(n))for(var a=0,i=n.length;a<i;a++)r.$on(n[a],e);else(r._events[n]||(r._events[n]=[])).push(e),t.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,t){var e=this;function r(){e.$off(n,r),t.apply(e,arguments)}return r.fn=t,e.$on(n,r),e},n.prototype.$off=function(n,t){var e=this;if(!arguments.length)return e._events=Object.create(null),e;if(Array.isArray(n)){for(var r=0,a=n.length;r<a;r++)e.$off(n[r],t);return e}var i,o=e._events[n];if(!o)return e;if(!t)return e._events[n]=null,e;for(var s=o.length;s--;)if((i=o[s])===t||i.fn===t){o.splice(s,1);break}return e},n.prototype.$emit=function(n){var t=this,e=t._events[n];if(e){e=e.length>1?C(e):e;for(var r=C(arguments,1),a='event handler for "'+n+'"',i=0,o=e.length;i<o;i++)Gn(e[i],t,r,t,a)}return t}}(je),function(n){n.prototype._update=function(n,t){var e=this,r=e.$el,a=e._vnode,i=Zt(e);e._vnode=n,e.$el=a?e.__patch__(a,n):e.__patch__(e.$el,n,t,!1),i(),r&&(r.__vue__=null),e.$el&&(e.$el.__vue__=e),e.$vnode&&e.$parent&&e.$vnode===e.$parent._vnode&&(e.$parent.$el=e.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){te(n,"beforeDestroy"),n._isBeingDestroyed=!0;var t=n.$parent;!t||t._isBeingDestroyed||n.$options.abstract||b(t.$children,n),n._watcher&&n._watcher.teardown();for(var e=n._watchers.length;e--;)n._watchers[e].teardown();n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),te(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(je),function(n){Pt(n.prototype),n.prototype.$nextTick=function(n){return rt(n,this)},n.prototype._render=function(){var n,t=this,e=t.$options,r=e.render,a=e._parentVnode;a&&(t.$scopedSlots=gt(a.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=a;try{Ut=t,n=r.call(t._renderProxy,t.$createElement)}catch(e){qn(e,t,"render"),n=t._vnode}finally{Ut=null}return Array.isArray(n)&&1===n.length&&(n=n[0]),n instanceof gn||(n=yn()),n.parent=a,n}}(je);var Ae=[String,RegExp,Array],De={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Ae,exclude:Ae,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Ce(this.cache,n,this.keys)},mounted:function(){var n=this;this.$watch("include",(function(t){Oe(n,(function(n){return Ee(t,n)}))})),this.$watch("exclude",(function(t){Oe(n,(function(n){return!Ee(t,n)}))}))},render:function(){var n=this.$slots.default,t=Wt(n),e=t&&t.componentOptions;if(e){var r=_e(e),a=this.include,i=this.exclude;if(a&&(!r||!Ee(a,r))||i&&r&&Ee(i,r))return t;var o=this.cache,s=this.keys,c=null==t.key?e.Ctor.cid+(e.tag?"::"+e.tag:""):t.key;o[c]?(t.componentInstance=o[c].componentInstance,b(s,c),s.push(c)):(o[c]=t,s.push(c),this.max&&s.length>parseInt(this.max)&&Ce(o,s[0],s,this._vnode)),t.data.keepAlive=!0}return t||n&&n[0]}}};!function(n){var t={get:function(){return F}};Object.defineProperty(n,"config",t),n.util={warn:ln,extend:A,mergeOptions:Mn,defineReactive:On},n.set=Cn,n.delete=An,n.nextTick=rt,n.observable=function(n){return En(n),n},n.options=Object.create(null),M.forEach((function(t){n.options[t+"s"]=Object.create(null)})),n.options._base=n,A(n.options.components,De),function(n){n.use=function(n){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(n)>-1)return this;var e=C(arguments,1);return e.unshift(this),"function"==typeof n.install?n.install.apply(n,e):"function"==typeof n&&n.apply(null,e),t.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Mn(this.options,n),this}}(n),Te(n),function(n){M.forEach((function(t){n[t]=function(n,e){return e?("component"===t&&p(e)&&(e.name=e.name||n,e=this.options._base.extend(e)),"directive"===t&&"function"==typeof e&&(e={bind:e,update:e}),this.options[t+"s"][n]=e,e):this.options[t+"s"][n]}}))}(n)}(je),Object.defineProperty(je.prototype,"$isServer",{get:an}),Object.defineProperty(je.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(je,"FunctionalRenderContext",{value:$t}),je.version="2.6.12";var Ie=v("style,class"),Pe=v("input,textarea,option,select,progress"),$e=v("contenteditable,draggable,spellcheck"),Le=v("events,caret,typing,plaintext-only"),Be=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Ne="http://www.w3.org/1999/xlink",Me=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},Re=function(n){return Me(n)?n.slice(6,n.length):""},Fe=function(n){return null==n||!1===n};function ze(n){for(var t=n.data,e=n,r=n;o(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(t=Je(r.data,t));for(;o(e=e.parent);)e&&e.data&&(t=Je(t,e.data));return function(n,t){if(o(n)||o(t))return Ue(n,qe(t));return""}(t.staticClass,t.class)}function Je(n,t){return{staticClass:Ue(n.staticClass,t.staticClass),class:o(n.class)?[n.class,t.class]:t.class}}function Ue(n,t){return n?t?n+" "+t:n:t||""}function qe(n){return Array.isArray(n)?function(n){for(var t,e="",r=0,a=n.length;r<a;r++)o(t=qe(n[r]))&&""!==t&&(e&&(e+=" "),e+=t);return e}(n):u(n)?function(n){var t="";for(var e in n)n[e]&&(t&&(t+=" "),t+=e);return t}(n):"string"==typeof n?n:""}var Ge={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},We=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Ve=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),He=function(n){return We(n)||Ve(n)};var Ke=Object.create(null);var Xe=v("text,number,password,search,email,tel,url");var Ye=Object.freeze({createElement:function(n,t){var e=document.createElement(n);return"select"!==n||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&e.setAttribute("multiple","multiple"),e},createElementNS:function(n,t){return document.createElementNS(Ge[n],t)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,t,e){n.insertBefore(t,e)},removeChild:function(n,t){n.removeChild(t)},appendChild:function(n,t){n.appendChild(t)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,t){n.textContent=t},setStyleScope:function(n,t){n.setAttribute(t,"")}}),Ze={create:function(n,t){Qe(t)},update:function(n,t){n.data.ref!==t.data.ref&&(Qe(n,!0),Qe(t))},destroy:function(n){Qe(n,!0)}};function Qe(n,t){var e=n.data.ref;if(o(e)){var r=n.context,a=n.componentInstance||n.elm,i=r.$refs;t?Array.isArray(i[e])?b(i[e],a):i[e]===a&&(i[e]=void 0):n.data.refInFor?Array.isArray(i[e])?i[e].indexOf(a)<0&&i[e].push(a):i[e]=[a]:i[e]=a}}var nr=new gn("",{},[]),tr=["create","activate","update","remove","destroy"];function er(n,t){return n.key===t.key&&(n.tag===t.tag&&n.isComment===t.isComment&&o(n.data)===o(t.data)&&function(n,t){if("input"!==n.tag)return!0;var e,r=o(e=n.data)&&o(e=e.attrs)&&e.type,a=o(e=t.data)&&o(e=e.attrs)&&e.type;return r===a||Xe(r)&&Xe(a)}(n,t)||s(n.isAsyncPlaceholder)&&n.asyncFactory===t.asyncFactory&&i(t.asyncFactory.error))}function rr(n,t,e){var r,a,i={};for(r=t;r<=e;++r)o(a=n[r].key)&&(i[a]=r);return i}var ar={create:ir,update:ir,destroy:function(n){ir(n,nr)}};function ir(n,t){(n.data.directives||t.data.directives)&&function(n,t){var e,r,a,i=n===nr,o=t===nr,s=sr(n.data.directives,n.context),c=sr(t.data.directives,t.context),u=[],l=[];for(e in c)r=s[e],a=c[e],r?(a.oldValue=r.value,a.oldArg=r.arg,ur(a,"update",t,n),a.def&&a.def.componentUpdated&&l.push(a)):(ur(a,"bind",t,n),a.def&&a.def.inserted&&u.push(a));if(u.length){var p=function(){for(var e=0;e<u.length;e++)ur(u[e],"inserted",t,n)};i?ut(t,"insert",p):p()}l.length&&ut(t,"postpatch",(function(){for(var e=0;e<l.length;e++)ur(l[e],"componentUpdated",t,n)}));if(!i)for(e in s)c[e]||ur(s[e],"unbind",n,n,o)}(n,t)}var or=Object.create(null);function sr(n,t){var e,r,a=Object.create(null);if(!n)return a;for(e=0;e<n.length;e++)(r=n[e]).modifiers||(r.modifiers=or),a[cr(r)]=r,r.def=Rn(t.$options,"directives",r.name);return a}function cr(n){return n.rawName||n.name+"."+Object.keys(n.modifiers||{}).join(".")}function ur(n,t,e,r,a){var i=n.def&&n.def[t];if(i)try{i(e.elm,n,e,r,a)}catch(r){qn(r,e.context,"directive "+n.name+" "+t+" hook")}}var lr=[Ze,ar];function pr(n,t){var e=t.componentOptions;if(!(o(e)&&!1===e.Ctor.options.inheritAttrs||i(n.data.attrs)&&i(t.data.attrs))){var r,a,s=t.elm,c=n.data.attrs||{},u=t.data.attrs||{};for(r in o(u.__ob__)&&(u=t.data.attrs=A({},u)),u)a=u[r],c[r]!==a&&dr(s,r,a);for(r in(X||Z)&&u.value!==c.value&&dr(s,"value",u.value),c)i(u[r])&&(Me(r)?s.removeAttributeNS(Ne,Re(r)):$e(r)||s.removeAttribute(r))}}function dr(n,t,e){n.tagName.indexOf("-")>-1?fr(n,t,e):Be(t)?Fe(e)?n.removeAttribute(t):(e="allowfullscreen"===t&&"EMBED"===n.tagName?"true":t,n.setAttribute(t,e)):$e(t)?n.setAttribute(t,function(n,t){return Fe(t)||"false"===t?"false":"contenteditable"===n&&Le(t)?t:"true"}(t,e)):Me(t)?Fe(e)?n.removeAttributeNS(Ne,Re(t)):n.setAttributeNS(Ne,t,e):fr(n,t,e)}function fr(n,t,e){if(Fe(e))n.removeAttribute(t);else{if(X&&!Y&&"TEXTAREA"===n.tagName&&"placeholder"===t&&""!==e&&!n.__ieph){var r=function(t){t.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(t,e)}}var mr={create:pr,update:pr};function hr(n,t){var e=t.elm,r=t.data,a=n.data;if(!(i(r.staticClass)&&i(r.class)&&(i(a)||i(a.staticClass)&&i(a.class)))){var s=ze(t),c=e._transitionClasses;o(c)&&(s=Ue(s,qe(c))),s!==e._prevClass&&(e.setAttribute("class",s),e._prevClass=s)}}var gr,vr={create:hr,update:hr};function yr(n,t,e){var r=gr;return function a(){var i=t.apply(null,arguments);null!==i&&wr(n,a,e,r)}}var br=Kn&&!(nn&&Number(nn[1])<=53);function xr(n,t,e,r){if(br){var a=ce,i=t;t=i._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=a||n.timeStamp<=0||n.target.ownerDocument!==document)return i.apply(this,arguments)}}gr.addEventListener(n,t,en?{capture:e,passive:r}:e)}function wr(n,t,e,r){(r||gr).removeEventListener(n,t._wrapper||t,e)}function Sr(n,t){if(!i(n.data.on)||!i(t.data.on)){var e=t.data.on||{},r=n.data.on||{};gr=t.elm,function(n){if(o(n.__r)){var t=X?"change":"input";n[t]=[].concat(n.__r,n[t]||[]),delete n.__r}o(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(e),ct(e,r,xr,wr,yr,t.context),gr=void 0}}var kr,jr={create:Sr,update:Sr};function Tr(n,t){if(!i(n.data.domProps)||!i(t.data.domProps)){var e,r,a=t.elm,s=n.data.domProps||{},c=t.data.domProps||{};for(e in o(c.__ob__)&&(c=t.data.domProps=A({},c)),s)e in c||(a[e]="");for(e in c){if(r=c[e],"textContent"===e||"innerHTML"===e){if(t.children&&(t.children.length=0),r===s[e])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===e&&"PROGRESS"!==a.tagName){a._value=r;var u=i(r)?"":String(r);_r(a,u)&&(a.value=u)}else if("innerHTML"===e&&Ve(a.tagName)&&i(a.innerHTML)){(kr=kr||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var l=kr.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;l.firstChild;)a.appendChild(l.firstChild)}else if(r!==s[e])try{a[e]=r}catch(n){}}}}function _r(n,t){return!n.composing&&("OPTION"===n.tagName||function(n,t){var e=!0;try{e=document.activeElement!==n}catch(n){}return e&&n.value!==t}(n,t)||function(n,t){var e=n.value,r=n._vModifiers;if(o(r)){if(r.number)return g(e)!==g(t);if(r.trim)return e.trim()!==t.trim()}return e!==t}(n,t))}var Er={create:Tr,update:Tr},Or=S((function(n){var t={},e=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(e);r.length>1&&(t[r[0].trim()]=r[1].trim())}})),t}));function Cr(n){var t=Ar(n.style);return n.staticStyle?A(n.staticStyle,t):t}function Ar(n){return Array.isArray(n)?D(n):"string"==typeof n?Or(n):n}var Dr,Ir=/^--/,Pr=/\s*!important$/,$r=function(n,t,e){if(Ir.test(t))n.style.setProperty(t,e);else if(Pr.test(e))n.style.setProperty(E(t),e.replace(Pr,""),"important");else{var r=Br(t);if(Array.isArray(e))for(var a=0,i=e.length;a<i;a++)n.style[r]=e[a];else n.style[r]=e}},Lr=["Webkit","Moz","ms"],Br=S((function(n){if(Dr=Dr||document.createElement("div").style,"filter"!==(n=j(n))&&n in Dr)return n;for(var t=n.charAt(0).toUpperCase()+n.slice(1),e=0;e<Lr.length;e++){var r=Lr[e]+t;if(r in Dr)return r}}));function Nr(n,t){var e=t.data,r=n.data;if(!(i(e.staticStyle)&&i(e.style)&&i(r.staticStyle)&&i(r.style))){var a,s,c=t.elm,u=r.staticStyle,l=r.normalizedStyle||r.style||{},p=u||l,d=Ar(t.data.style)||{};t.data.normalizedStyle=o(d.__ob__)?A({},d):d;var f=function(n,t){var e,r={};if(t)for(var a=n;a.componentInstance;)(a=a.componentInstance._vnode)&&a.data&&(e=Cr(a.data))&&A(r,e);(e=Cr(n.data))&&A(r,e);for(var i=n;i=i.parent;)i.data&&(e=Cr(i.data))&&A(r,e);return r}(t,!0);for(s in p)i(f[s])&&$r(c,s,"");for(s in f)(a=f[s])!==p[s]&&$r(c,s,null==a?"":a)}}var Mr={create:Nr,update:Nr},Rr=/\s+/;function Fr(n,t){if(t&&(t=t.trim()))if(n.classList)t.indexOf(" ")>-1?t.split(Rr).forEach((function(t){return n.classList.add(t)})):n.classList.add(t);else{var e=" "+(n.getAttribute("class")||"")+" ";e.indexOf(" "+t+" ")<0&&n.setAttribute("class",(e+t).trim())}}function zr(n,t){if(t&&(t=t.trim()))if(n.classList)t.indexOf(" ")>-1?t.split(Rr).forEach((function(t){return n.classList.remove(t)})):n.classList.remove(t),n.classList.length||n.removeAttribute("class");else{for(var e=" "+(n.getAttribute("class")||"")+" ",r=" "+t+" ";e.indexOf(r)>=0;)e=e.replace(r," ");(e=e.trim())?n.setAttribute("class",e):n.removeAttribute("class")}}function Jr(n){if(n){if("object"==typeof n){var t={};return!1!==n.css&&A(t,Ur(n.name||"v")),A(t,n),t}return"string"==typeof n?Ur(n):void 0}}var Ur=S((function(n){return{enterClass:n+"-enter",enterToClass:n+"-enter-to",enterActiveClass:n+"-enter-active",leaveClass:n+"-leave",leaveToClass:n+"-leave-to",leaveActiveClass:n+"-leave-active"}})),qr=W&&!Y,Gr="transition",Wr="transitionend",Vr="animation",Hr="animationend";qr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Gr="WebkitTransition",Wr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Vr="WebkitAnimation",Hr="webkitAnimationEnd"));var Kr=W?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function Xr(n){Kr((function(){Kr(n)}))}function Yr(n,t){var e=n._transitionClasses||(n._transitionClasses=[]);e.indexOf(t)<0&&(e.push(t),Fr(n,t))}function Zr(n,t){n._transitionClasses&&b(n._transitionClasses,t),zr(n,t)}function Qr(n,t,e){var r=ta(n,t),a=r.type,i=r.timeout,o=r.propCount;if(!a)return e();var s="transition"===a?Wr:Hr,c=0,u=function(){n.removeEventListener(s,l),e()},l=function(t){t.target===n&&++c>=o&&u()};setTimeout((function(){c<o&&u()}),i+1),n.addEventListener(s,l)}var na=/\b(transform|all)(,|$)/;function ta(n,t){var e,r=window.getComputedStyle(n),a=(r[Gr+"Delay"]||"").split(", "),i=(r[Gr+"Duration"]||"").split(", "),o=ea(a,i),s=(r[Vr+"Delay"]||"").split(", "),c=(r[Vr+"Duration"]||"").split(", "),u=ea(s,c),l=0,p=0;return"transition"===t?o>0&&(e="transition",l=o,p=i.length):"animation"===t?u>0&&(e="animation",l=u,p=c.length):p=(e=(l=Math.max(o,u))>0?o>u?"transition":"animation":null)?"transition"===e?i.length:c.length:0,{type:e,timeout:l,propCount:p,hasTransform:"transition"===e&&na.test(r[Gr+"Property"])}}function ea(n,t){for(;n.length<t.length;)n=n.concat(n);return Math.max.apply(null,t.map((function(t,e){return ra(t)+ra(n[e])})))}function ra(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function aa(n,t){var e=n.elm;o(e._leaveCb)&&(e._leaveCb.cancelled=!0,e._leaveCb());var r=Jr(n.data.transition);if(!i(r)&&!o(e._enterCb)&&1===e.nodeType){for(var a=r.css,s=r.type,c=r.enterClass,l=r.enterToClass,p=r.enterActiveClass,d=r.appearClass,f=r.appearToClass,m=r.appearActiveClass,h=r.beforeEnter,v=r.enter,y=r.afterEnter,b=r.enterCancelled,x=r.beforeAppear,w=r.appear,S=r.afterAppear,k=r.appearCancelled,j=r.duration,T=Yt,_=Yt.$vnode;_&&_.parent;)T=_.context,_=_.parent;var E=!T._isMounted||!n.isRootInsert;if(!E||w||""===w){var O=E&&d?d:c,C=E&&m?m:p,A=E&&f?f:l,D=E&&x||h,I=E&&"function"==typeof w?w:v,P=E&&S||y,$=E&&k||b,L=g(u(j)?j.enter:j);0;var B=!1!==a&&!Y,M=sa(I),R=e._enterCb=N((function(){B&&(Zr(e,A),Zr(e,C)),R.cancelled?(B&&Zr(e,O),$&&$(e)):P&&P(e),e._enterCb=null}));n.data.show||ut(n,"insert",(function(){var t=e.parentNode,r=t&&t._pending&&t._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),I&&I(e,R)})),D&&D(e),B&&(Yr(e,O),Yr(e,C),Xr((function(){Zr(e,O),R.cancelled||(Yr(e,A),M||(oa(L)?setTimeout(R,L):Qr(e,s,R)))}))),n.data.show&&(t&&t(),I&&I(e,R)),B||M||R()}}}function ia(n,t){var e=n.elm;o(e._enterCb)&&(e._enterCb.cancelled=!0,e._enterCb());var r=Jr(n.data.transition);if(i(r)||1!==e.nodeType)return t();if(!o(e._leaveCb)){var a=r.css,s=r.type,c=r.leaveClass,l=r.leaveToClass,p=r.leaveActiveClass,d=r.beforeLeave,f=r.leave,m=r.afterLeave,h=r.leaveCancelled,v=r.delayLeave,y=r.duration,b=!1!==a&&!Y,x=sa(f),w=g(u(y)?y.leave:y);0;var S=e._leaveCb=N((function(){e.parentNode&&e.parentNode._pending&&(e.parentNode._pending[n.key]=null),b&&(Zr(e,l),Zr(e,p)),S.cancelled?(b&&Zr(e,c),h&&h(e)):(t(),m&&m(e)),e._leaveCb=null}));v?v(k):k()}function k(){S.cancelled||(!n.data.show&&e.parentNode&&((e.parentNode._pending||(e.parentNode._pending={}))[n.key]=n),d&&d(e),b&&(Yr(e,c),Yr(e,p),Xr((function(){Zr(e,c),S.cancelled||(Yr(e,l),x||(oa(w)?setTimeout(S,w):Qr(e,s,S)))}))),f&&f(e,S),b||x||S())}}function oa(n){return"number"==typeof n&&!isNaN(n)}function sa(n){if(i(n))return!1;var t=n.fns;return o(t)?sa(Array.isArray(t)?t[0]:t):(n._length||n.length)>1}function ca(n,t){!0!==t.data.show&&aa(t)}var ua=function(n){var t,e,r={},a=n.modules,u=n.nodeOps;for(t=0;t<tr.length;++t)for(r[tr[t]]=[],e=0;e<a.length;++e)o(a[e][tr[t]])&&r[tr[t]].push(a[e][tr[t]]);function l(n){var t=u.parentNode(n);o(t)&&u.removeChild(t,n)}function p(n,t,e,a,i,c,l){if(o(n.elm)&&o(c)&&(n=c[l]=xn(n)),n.isRootInsert=!i,!function(n,t,e,a){var i=n.data;if(o(i)){var c=o(n.componentInstance)&&i.keepAlive;if(o(i=i.hook)&&o(i=i.init)&&i(n,!1),o(n.componentInstance))return d(n,t),f(e,n.elm,a),s(c)&&function(n,t,e,a){var i,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,o(i=s.data)&&o(i=i.transition)){for(i=0;i<r.activate.length;++i)r.activate[i](nr,s);t.push(s);break}f(e,n.elm,a)}(n,t,e,a),!0}}(n,t,e,a)){var p=n.data,h=n.children,v=n.tag;o(v)?(n.elm=n.ns?u.createElementNS(n.ns,v):u.createElement(v,n),y(n),m(n,h,t),o(p)&&g(n,t),f(e,n.elm,a)):s(n.isComment)?(n.elm=u.createComment(n.text),f(e,n.elm,a)):(n.elm=u.createTextNode(n.text),f(e,n.elm,a))}}function d(n,t){o(n.data.pendingInsert)&&(t.push.apply(t,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,h(n)?(g(n,t),y(n)):(Qe(n),t.push(n))}function f(n,t,e){o(n)&&(o(e)?u.parentNode(e)===n&&u.insertBefore(n,t,e):u.appendChild(n,t))}function m(n,t,e){if(Array.isArray(t)){0;for(var r=0;r<t.length;++r)p(t[r],e,n.elm,null,!0,t,r)}else c(n.text)&&u.appendChild(n.elm,u.createTextNode(String(n.text)))}function h(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return o(n.tag)}function g(n,e){for(var a=0;a<r.create.length;++a)r.create[a](nr,n);o(t=n.data.hook)&&(o(t.create)&&t.create(nr,n),o(t.insert)&&e.push(n))}function y(n){var t;if(o(t=n.fnScopeId))u.setStyleScope(n.elm,t);else for(var e=n;e;)o(t=e.context)&&o(t=t.$options._scopeId)&&u.setStyleScope(n.elm,t),e=e.parent;o(t=Yt)&&t!==n.context&&t!==n.fnContext&&o(t=t.$options._scopeId)&&u.setStyleScope(n.elm,t)}function b(n,t,e,r,a,i){for(;r<=a;++r)p(e[r],i,n,t,!1,e,r)}function x(n){var t,e,a=n.data;if(o(a))for(o(t=a.hook)&&o(t=t.destroy)&&t(n),t=0;t<r.destroy.length;++t)r.destroy[t](n);if(o(t=n.children))for(e=0;e<n.children.length;++e)x(n.children[e])}function w(n,t,e){for(;t<=e;++t){var r=n[t];o(r)&&(o(r.tag)?(S(r),x(r)):l(r.elm))}}function S(n,t){if(o(t)||o(n.data)){var e,a=r.remove.length+1;for(o(t)?t.listeners+=a:t=function(n,t){function e(){0==--e.listeners&&l(n)}return e.listeners=t,e}(n.elm,a),o(e=n.componentInstance)&&o(e=e._vnode)&&o(e.data)&&S(e,t),e=0;e<r.remove.length;++e)r.remove[e](n,t);o(e=n.data.hook)&&o(e=e.remove)?e(n,t):t()}else l(n.elm)}function k(n,t,e,r){for(var a=e;a<r;a++){var i=t[a];if(o(i)&&er(n,i))return a}}function j(n,t,e,a,c,l){if(n!==t){o(t.elm)&&o(a)&&(t=a[c]=xn(t));var d=t.elm=n.elm;if(s(n.isAsyncPlaceholder))o(t.asyncFactory.resolved)?E(n.elm,t,e):t.isAsyncPlaceholder=!0;else if(s(t.isStatic)&&s(n.isStatic)&&t.key===n.key&&(s(t.isCloned)||s(t.isOnce)))t.componentInstance=n.componentInstance;else{var f,m=t.data;o(m)&&o(f=m.hook)&&o(f=f.prepatch)&&f(n,t);var g=n.children,v=t.children;if(o(m)&&h(t)){for(f=0;f<r.update.length;++f)r.update[f](n,t);o(f=m.hook)&&o(f=f.update)&&f(n,t)}i(t.text)?o(g)&&o(v)?g!==v&&function(n,t,e,r,a){var s,c,l,d=0,f=0,m=t.length-1,h=t[0],g=t[m],v=e.length-1,y=e[0],x=e[v],S=!a;for(0;d<=m&&f<=v;)i(h)?h=t[++d]:i(g)?g=t[--m]:er(h,y)?(j(h,y,r,e,f),h=t[++d],y=e[++f]):er(g,x)?(j(g,x,r,e,v),g=t[--m],x=e[--v]):er(h,x)?(j(h,x,r,e,v),S&&u.insertBefore(n,h.elm,u.nextSibling(g.elm)),h=t[++d],x=e[--v]):er(g,y)?(j(g,y,r,e,f),S&&u.insertBefore(n,g.elm,h.elm),g=t[--m],y=e[++f]):(i(s)&&(s=rr(t,d,m)),i(c=o(y.key)?s[y.key]:k(y,t,d,m))?p(y,r,n,h.elm,!1,e,f):er(l=t[c],y)?(j(l,y,r,e,f),t[c]=void 0,S&&u.insertBefore(n,l.elm,h.elm)):p(y,r,n,h.elm,!1,e,f),y=e[++f]);d>m?b(n,i(e[v+1])?null:e[v+1].elm,e,f,v,r):f>v&&w(t,d,m)}(d,g,v,e,l):o(v)?(o(n.text)&&u.setTextContent(d,""),b(d,null,v,0,v.length-1,e)):o(g)?w(g,0,g.length-1):o(n.text)&&u.setTextContent(d,""):n.text!==t.text&&u.setTextContent(d,t.text),o(m)&&o(f=m.hook)&&o(f=f.postpatch)&&f(n,t)}}}function T(n,t,e){if(s(e)&&o(n.parent))n.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}var _=v("attrs,class,staticClass,staticStyle,key");function E(n,t,e,r){var a,i=t.tag,c=t.data,u=t.children;if(r=r||c&&c.pre,t.elm=n,s(t.isComment)&&o(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(o(c)&&(o(a=c.hook)&&o(a=a.init)&&a(t,!0),o(a=t.componentInstance)))return d(t,e),!0;if(o(i)){if(o(u))if(n.hasChildNodes())if(o(a=c)&&o(a=a.domProps)&&o(a=a.innerHTML)){if(a!==n.innerHTML)return!1}else{for(var l=!0,p=n.firstChild,f=0;f<u.length;f++){if(!p||!E(p,u[f],e,r)){l=!1;break}p=p.nextSibling}if(!l||p)return!1}else m(t,u,e);if(o(c)){var h=!1;for(var v in c)if(!_(v)){h=!0,g(t,e);break}!h&&c.class&&it(c.class)}}else n.data!==t.text&&(n.data=t.text);return!0}return function(n,t,e,a){if(!i(t)){var c,l=!1,d=[];if(i(n))l=!0,p(t,d);else{var f=o(n.nodeType);if(!f&&er(n,t))j(n,t,d,null,null,a);else{if(f){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),e=!0),s(e)&&E(n,t,d))return T(t,d,!0),n;c=n,n=new gn(u.tagName(c).toLowerCase(),{},[],void 0,c)}var m=n.elm,g=u.parentNode(m);if(p(t,d,m._leaveCb?null:g,u.nextSibling(m)),o(t.parent))for(var v=t.parent,y=h(t);v;){for(var b=0;b<r.destroy.length;++b)r.destroy[b](v);if(v.elm=t.elm,y){for(var S=0;S<r.create.length;++S)r.create[S](nr,v);var k=v.data.hook.insert;if(k.merged)for(var _=1;_<k.fns.length;_++)k.fns[_]()}else Qe(v);v=v.parent}o(g)?w([n],0,0):o(n.tag)&&x(n)}}return T(t,d,l),t.elm}o(n)&&x(n)}}({nodeOps:Ye,modules:[mr,vr,jr,Er,Mr,W?{create:ca,activate:ca,remove:function(n,t){!0!==n.data.show?ia(n,t):t()}}:{}].concat(lr)});Y&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&va(n,"input")}));var la={inserted:function(n,t,e,r){"select"===e.tag?(r.elm&&!r.elm._vOptions?ut(e,"postpatch",(function(){la.componentUpdated(n,t,e)})):pa(n,t,e.context),n._vOptions=[].map.call(n.options,ma)):("textarea"===e.tag||Xe(n.type))&&(n._vModifiers=t.modifiers,t.modifiers.lazy||(n.addEventListener("compositionstart",ha),n.addEventListener("compositionend",ga),n.addEventListener("change",ga),Y&&(n.vmodel=!0)))},componentUpdated:function(n,t,e){if("select"===e.tag){pa(n,t,e.context);var r=n._vOptions,a=n._vOptions=[].map.call(n.options,ma);if(a.some((function(n,t){return!L(n,r[t])})))(n.multiple?t.value.some((function(n){return fa(n,a)})):t.value!==t.oldValue&&fa(t.value,a))&&va(n,"change")}}};function pa(n,t,e){da(n,t,e),(X||Z)&&setTimeout((function(){da(n,t,e)}),0)}function da(n,t,e){var r=t.value,a=n.multiple;if(!a||Array.isArray(r)){for(var i,o,s=0,c=n.options.length;s<c;s++)if(o=n.options[s],a)i=B(r,ma(o))>-1,o.selected!==i&&(o.selected=i);else if(L(ma(o),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));a||(n.selectedIndex=-1)}}function fa(n,t){return t.every((function(t){return!L(t,n)}))}function ma(n){return"_value"in n?n._value:n.value}function ha(n){n.target.composing=!0}function ga(n){n.target.composing&&(n.target.composing=!1,va(n.target,"input"))}function va(n,t){var e=document.createEvent("HTMLEvents");e.initEvent(t,!0,!0),n.dispatchEvent(e)}function ya(n){return!n.componentInstance||n.data&&n.data.transition?n:ya(n.componentInstance._vnode)}var ba={model:la,show:{bind:function(n,t,e){var r=t.value,a=(e=ya(e)).data&&e.data.transition,i=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&a?(e.data.show=!0,aa(e,(function(){n.style.display=i}))):n.style.display=r?i:"none"},update:function(n,t,e){var r=t.value;!r!=!t.oldValue&&((e=ya(e)).data&&e.data.transition?(e.data.show=!0,r?aa(e,(function(){n.style.display=n.__vOriginalDisplay})):ia(e,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,t,e,r,a){a||(n.style.display=n.__vOriginalDisplay)}}},xa={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function wa(n){var t=n&&n.componentOptions;return t&&t.Ctor.options.abstract?wa(Wt(t.children)):n}function Sa(n){var t={},e=n.$options;for(var r in e.propsData)t[r]=n[r];var a=e._parentListeners;for(var i in a)t[j(i)]=a[i];return t}function ka(n,t){if(/\d-keep-alive$/.test(t.tag))return n("keep-alive",{props:t.componentOptions.propsData})}var ja=function(n){return n.tag||Gt(n)},Ta=function(n){return"show"===n.name},_a={name:"transition",props:xa,abstract:!0,render:function(n){var t=this,e=this.$slots.default;if(e&&(e=e.filter(ja)).length){0;var r=this.mode;0;var a=e[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return a;var i=wa(a);if(!i)return a;if(this._leaving)return ka(n,a);var o="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?o+"comment":o+i.tag:c(i.key)?0===String(i.key).indexOf(o)?i.key:o+i.key:i.key;var s=(i.data||(i.data={})).transition=Sa(this),u=this._vnode,l=wa(u);if(i.data.directives&&i.data.directives.some(Ta)&&(i.data.show=!0),l&&l.data&&!function(n,t){return t.key===n.key&&t.tag===n.tag}(i,l)&&!Gt(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var p=l.data.transition=A({},s);if("out-in"===r)return this._leaving=!0,ut(p,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),ka(n,a);if("in-out"===r){if(Gt(i))return u;var d,f=function(){d()};ut(s,"afterEnter",f),ut(s,"enterCancelled",f),ut(p,"delayLeave",(function(n){d=n}))}}return a}}},Ea=A({tag:String,moveClass:String},xa);function Oa(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Ca(n){n.data.newPos=n.elm.getBoundingClientRect()}function Aa(n){var t=n.data.pos,e=n.data.newPos,r=t.left-e.left,a=t.top-e.top;if(r||a){n.data.moved=!0;var i=n.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+a+"px)",i.transitionDuration="0s"}}delete Ea.mode;var Da={Transition:_a,TransitionGroup:{props:Ea,beforeMount:function(){var n=this,t=this._update;this._update=function(e,r){var a=Zt(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,a(),t.call(n,e,r)}},render:function(n){for(var t=this.tag||this.$vnode.data.tag||"span",e=Object.create(null),r=this.prevChildren=this.children,a=this.$slots.default||[],i=this.children=[],o=Sa(this),s=0;s<a.length;s++){var c=a[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))i.push(c),e[c.key]=c,(c.data||(c.data={})).transition=o;else;}if(r){for(var u=[],l=[],p=0;p<r.length;p++){var d=r[p];d.data.transition=o,d.data.pos=d.elm.getBoundingClientRect(),e[d.key]?u.push(d):l.push(d)}this.kept=n(t,null,u),this.removed=l}return n(t,null,i)},updated:function(){var n=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,t)&&(n.forEach(Oa),n.forEach(Ca),n.forEach(Aa),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var e=n.elm,r=e.style;Yr(e,t),r.transform=r.WebkitTransform=r.transitionDuration="",e.addEventListener(Wr,e._moveCb=function n(r){r&&r.target!==e||r&&!/transform$/.test(r.propertyName)||(e.removeEventListener(Wr,n),e._moveCb=null,Zr(e,t))})}})))},methods:{hasMove:function(n,t){if(!qr)return!1;if(this._hasMove)return this._hasMove;var e=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){zr(e,n)})),Fr(e,t),e.style.display="none",this.$el.appendChild(e);var r=ta(e);return this.$el.removeChild(e),this._hasMove=r.hasTransform}}}};je.config.mustUseProp=function(n,t,e){return"value"===e&&Pe(n)&&"button"!==t||"selected"===e&&"option"===n||"checked"===e&&"input"===n||"muted"===e&&"video"===n},je.config.isReservedTag=He,je.config.isReservedAttr=Ie,je.config.getTagNamespace=function(n){return Ve(n)?"svg":"math"===n?"math":void 0},je.config.isUnknownElement=function(n){if(!W)return!0;if(He(n))return!1;if(n=n.toLowerCase(),null!=Ke[n])return Ke[n];var t=document.createElement(n);return n.indexOf("-")>-1?Ke[n]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Ke[n]=/HTMLUnknownElement/.test(t.toString())},A(je.options.directives,ba),A(je.options.components,Da),je.prototype.__patch__=W?ua:I,je.prototype.$mount=function(n,t){return function(n,t,e){var r;return n.$el=t,n.$options.render||(n.$options.render=yn),te(n,"beforeMount"),r=function(){n._update(n._render(),e)},new fe(n,r,I,{before:function(){n._isMounted&&!n._isDestroyed&&te(n,"beforeUpdate")}},!0),e=!1,null==n.$vnode&&(n._isMounted=!0,te(n,"mounted")),n}(this,n=n&&W?function(n){if("string"==typeof n){var t=document.querySelector(n);return t||document.createElement("div")}return n}(n):void 0,t)},W&&setTimeout((function(){F.devtools&&on&&on.emit("init",je)}),0);var Ia=je;
/*!
  * vue-router v3.5.1
  * (c) 2021 Evan You
  * @license MIT
  */function Pa(n,t){for(var e in t)n[e]=t[e];return n}var $a=/[!'()*]/g,La=function(n){return"%"+n.charCodeAt(0).toString(16)},Ba=/%2C/g,Na=function(n){return encodeURIComponent(n).replace($a,La).replace(Ba,",")};function Ma(n){try{return decodeURIComponent(n)}catch(n){0}return n}var Ra=function(n){return null==n||"object"==typeof n?n:String(n)};function Fa(n){var t={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var e=n.replace(/\+/g," ").split("="),r=Ma(e.shift()),a=e.length>0?Ma(e.join("=")):null;void 0===t[r]?t[r]=a:Array.isArray(t[r])?t[r].push(a):t[r]=[t[r],a]})),t):t}function za(n){var t=n?Object.keys(n).map((function(t){var e=n[t];if(void 0===e)return"";if(null===e)return Na(t);if(Array.isArray(e)){var r=[];return e.forEach((function(n){void 0!==n&&(null===n?r.push(Na(t)):r.push(Na(t)+"="+Na(n)))})),r.join("&")}return Na(t)+"="+Na(e)})).filter((function(n){return n.length>0})).join("&"):null;return t?"?"+t:""}var Ja=/\/?$/;function Ua(n,t,e,r){var a=r&&r.options.stringifyQuery,i=t.query||{};try{i=qa(i)}catch(n){}var o={name:t.name||n&&n.name,meta:n&&n.meta||{},path:t.path||"/",hash:t.hash||"",query:i,params:t.params||{},fullPath:Va(t,a),matched:n?Wa(n):[]};return e&&(o.redirectedFrom=Va(e,a)),Object.freeze(o)}function qa(n){if(Array.isArray(n))return n.map(qa);if(n&&"object"==typeof n){var t={};for(var e in n)t[e]=qa(n[e]);return t}return n}var Ga=Ua(null,{path:"/"});function Wa(n){for(var t=[];n;)t.unshift(n),n=n.parent;return t}function Va(n,t){var e=n.path,r=n.query;void 0===r&&(r={});var a=n.hash;return void 0===a&&(a=""),(e||"/")+(t||za)(r)+a}function Ha(n,t,e){return t===Ga?n===t:!!t&&(n.path&&t.path?n.path.replace(Ja,"")===t.path.replace(Ja,"")&&(e||n.hash===t.hash&&Ka(n.query,t.query)):!(!n.name||!t.name)&&(n.name===t.name&&(e||n.hash===t.hash&&Ka(n.query,t.query)&&Ka(n.params,t.params))))}function Ka(n,t){if(void 0===n&&(n={}),void 0===t&&(t={}),!n||!t)return n===t;var e=Object.keys(n).sort(),r=Object.keys(t).sort();return e.length===r.length&&e.every((function(e,a){var i=n[e];if(r[a]!==e)return!1;var o=t[e];return null==i||null==o?i===o:"object"==typeof i&&"object"==typeof o?Ka(i,o):String(i)===String(o)}))}function Xa(n){for(var t=0;t<n.matched.length;t++){var e=n.matched[t];for(var r in e.instances){var a=e.instances[r],i=e.enteredCbs[r];if(a&&i){delete e.enteredCbs[r];for(var o=0;o<i.length;o++)a._isBeingDestroyed||i[o](a)}}}}var Ya={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,t){var e=t.props,r=t.children,a=t.parent,i=t.data;i.routerView=!0;for(var o=a.$createElement,s=e.name,c=a.$route,u=a._routerViewCache||(a._routerViewCache={}),l=0,p=!1;a&&a._routerRoot!==a;){var d=a.$vnode?a.$vnode.data:{};d.routerView&&l++,d.keepAlive&&a._directInactive&&a._inactive&&(p=!0),a=a.$parent}if(i.routerViewDepth=l,p){var f=u[s],m=f&&f.component;return m?(f.configProps&&Za(m,i,f.route,f.configProps),o(m,i,r)):o()}var h=c.matched[l],g=h&&h.components[s];if(!h||!g)return u[s]=null,o();u[s]={component:g},i.registerRouteInstance=function(n,t){var e=h.instances[s];(t&&e!==n||!t&&e===n)&&(h.instances[s]=t)},(i.hook||(i.hook={})).prepatch=function(n,t){h.instances[s]=t.componentInstance},i.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==h.instances[s]&&(h.instances[s]=n.componentInstance),Xa(c)};var v=h.props&&h.props[s];return v&&(Pa(u[s],{route:c,configProps:v}),Za(g,i,c,v)),o(g,i,r)}};function Za(n,t,e,r){var a=t.props=function(n,t){switch(typeof t){case"undefined":return;case"object":return t;case"function":return t(n);case"boolean":return t?n.params:void 0;default:0}}(e,r);if(a){a=t.props=Pa({},a);var i=t.attrs=t.attrs||{};for(var o in a)n.props&&o in n.props||(i[o]=a[o],delete a[o])}}function Qa(n,t,e){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return t+n;var a=t.split("/");e&&a[a.length-1]||a.pop();for(var i=n.replace(/^\//,"").split("/"),o=0;o<i.length;o++){var s=i[o];".."===s?a.pop():"."!==s&&a.push(s)}return""!==a[0]&&a.unshift(""),a.join("/")}function ni(n){return n.replace(/\/\//g,"/")}var ti=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},ei=gi,ri=ci,ai=function(n,t){return li(ci(n,t),t)},ii=li,oi=hi,si=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function ci(n,t){for(var e,r=[],a=0,i=0,o="",s=t&&t.delimiter||"/";null!=(e=si.exec(n));){var c=e[0],u=e[1],l=e.index;if(o+=n.slice(i,l),i=l+c.length,u)o+=u[1];else{var p=n[i],d=e[2],f=e[3],m=e[4],h=e[5],g=e[6],v=e[7];o&&(r.push(o),o="");var y=null!=d&&null!=p&&p!==d,b="+"===g||"*"===g,x="?"===g||"*"===g,w=e[2]||s,S=m||h;r.push({name:f||a++,prefix:d||"",delimiter:w,optional:x,repeat:b,partial:y,asterisk:!!v,pattern:S?di(S):v?".*":"[^"+pi(w)+"]+?"})}}return i<n.length&&(o+=n.substr(i)),o&&r.push(o),r}function ui(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function li(n,t){for(var e=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(e[r]=new RegExp("^(?:"+n[r].pattern+")$",mi(t)));return function(t,r){for(var a="",i=t||{},o=(r||{}).pretty?ui:encodeURIComponent,s=0;s<n.length;s++){var c=n[s];if("string"!=typeof c){var u,l=i[c.name];if(null==l){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(ti(l)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(l)+"`");if(0===l.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<l.length;p++){if(u=o(l[p]),!e[s].test(u))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(u)+"`");a+=(0===p?c.prefix:c.delimiter)+u}}else{if(u=c.asterisk?encodeURI(l).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):o(l),!e[s].test(u))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+u+'"');a+=c.prefix+u}}else a+=c}return a}}function pi(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function di(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function fi(n,t){return n.keys=t,n}function mi(n){return n&&n.sensitive?"":"i"}function hi(n,t,e){ti(t)||(e=t||e,t=[]);for(var r=(e=e||{}).strict,a=!1!==e.end,i="",o=0;o<n.length;o++){var s=n[o];if("string"==typeof s)i+=pi(s);else{var c=pi(s.prefix),u="(?:"+s.pattern+")";t.push(s),s.repeat&&(u+="(?:"+c+u+")*"),i+=u=s.optional?s.partial?c+"("+u+")?":"(?:"+c+"("+u+"))?":c+"("+u+")"}}var l=pi(e.delimiter||"/"),p=i.slice(-l.length)===l;return r||(i=(p?i.slice(0,-l.length):i)+"(?:"+l+"(?=$))?"),i+=a?"$":r&&p?"":"(?="+l+"|$)",fi(new RegExp("^"+i,mi(e)),t)}function gi(n,t,e){return ti(t)||(e=t||e,t=[]),e=e||{},n instanceof RegExp?function(n,t){var e=n.source.match(/\((?!\?)/g);if(e)for(var r=0;r<e.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return fi(n,t)}(n,t):ti(n)?function(n,t,e){for(var r=[],a=0;a<n.length;a++)r.push(gi(n[a],t,e).source);return fi(new RegExp("(?:"+r.join("|")+")",mi(e)),t)}(n,t,e):function(n,t,e){return hi(ci(n,e),t,e)}(n,t,e)}ei.parse=ri,ei.compile=ai,ei.tokensToFunction=ii,ei.tokensToRegExp=oi;var vi=Object.create(null);function yi(n,t,e){t=t||{};try{var r=vi[n]||(vi[n]=ei.compile(n));return"string"==typeof t.pathMatch&&(t[0]=t.pathMatch),r(t,{pretty:!0})}catch(n){return""}finally{delete t[0]}}function bi(n,t,e,r){var a="string"==typeof n?{path:n}:n;if(a._normalized)return a;if(a.name){var i=(a=Pa({},n)).params;return i&&"object"==typeof i&&(a.params=Pa({},i)),a}if(!a.path&&a.params&&t){(a=Pa({},a))._normalized=!0;var o=Pa(Pa({},t.params),a.params);if(t.name)a.name=t.name,a.params=o;else if(t.matched.length){var s=t.matched[t.matched.length-1].path;a.path=yi(s,o,t.path)}else 0;return a}var c=function(n){var t="",e="",r=n.indexOf("#");r>=0&&(t=n.slice(r),n=n.slice(0,r));var a=n.indexOf("?");return a>=0&&(e=n.slice(a+1),n=n.slice(0,a)),{path:n,query:e,hash:t}}(a.path||""),u=t&&t.path||"/",l=c.path?Qa(c.path,u,e||a.append):u,p=function(n,t,e){void 0===t&&(t={});var r,a=e||Fa;try{r=a(n||"")}catch(n){r={}}for(var i in t){var o=t[i];r[i]=Array.isArray(o)?o.map(Ra):Ra(o)}return r}(c.query,a.query,r&&r.options.parseQuery),d=a.hash||c.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:l,query:p,hash:d}}var xi,wi=function(){},Si={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var t=this,e=this.$router,r=this.$route,a=e.resolve(this.to,r,this.append),i=a.location,o=a.route,s=a.href,c={},u=e.options.linkActiveClass,l=e.options.linkExactActiveClass,p=null==u?"router-link-active":u,d=null==l?"router-link-exact-active":l,f=null==this.activeClass?p:this.activeClass,m=null==this.exactActiveClass?d:this.exactActiveClass,h=o.redirectedFrom?Ua(null,bi(o.redirectedFrom),null,e):o;c[m]=Ha(r,h,this.exactPath),c[f]=this.exact||this.exactPath?c[m]:function(n,t){return 0===n.path.replace(Ja,"/").indexOf(t.path.replace(Ja,"/"))&&(!t.hash||n.hash===t.hash)&&function(n,t){for(var e in t)if(!(e in n))return!1;return!0}(n.query,t.query)}(r,h);var g=c[m]?this.ariaCurrentValue:null,v=function(n){ki(n)&&(t.replace?e.replace(i,wi):e.push(i,wi))},y={click:ki};Array.isArray(this.event)?this.event.forEach((function(n){y[n]=v})):y[this.event]=v;var b={class:c},x=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:o,navigate:v,isActive:c[f],isExactActive:c[m]});if(x){if(1===x.length)return x[0];if(x.length>1||!x.length)return 0===x.length?n():n("span",{},x)}if("a"===this.tag)b.on=y,b.attrs={href:s,"aria-current":g};else{var w=function n(t){var e;if(t)for(var r=0;r<t.length;r++){if("a"===(e=t[r]).tag)return e;if(e.children&&(e=n(e.children)))return e}}(this.$slots.default);if(w){w.isStatic=!1;var S=w.data=Pa({},w.data);for(var k in S.on=S.on||{},S.on){var j=S.on[k];k in y&&(S.on[k]=Array.isArray(j)?j:[j])}for(var T in y)T in S.on?S.on[T].push(y[T]):S.on[T]=v;var _=w.data.attrs=Pa({},w.data.attrs);_.href=s,_["aria-current"]=g}else b.on=y}return n(this.tag,b,this.$slots.default)}};function ki(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var t=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return n.preventDefault&&n.preventDefault(),!0}}var ji="undefined"!=typeof window;function Ti(n,t,e,r,a){var i=t||[],o=e||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(t,e,r,a,i,o){var s=a.path,c=a.name;0;var u=a.pathToRegexpOptions||{},l=function(n,t,e){e||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==t)return n;return ni(t.path+"/"+n)}(s,i,u.strict);"boolean"==typeof a.caseSensitive&&(u.sensitive=a.caseSensitive);var p={path:l,regex:_i(l,u),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:c,parent:i,matchAs:o,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};a.children&&a.children.forEach((function(a){var i=o?ni(o+"/"+a.path):void 0;n(t,e,r,a,p,i)}));e[p.path]||(t.push(p.path),e[p.path]=p);if(void 0!==a.alias)for(var d=Array.isArray(a.alias)?a.alias:[a.alias],f=0;f<d.length;++f){0;var m={path:d[f],children:a.children};n(t,e,r,m,i,p.path||"/")}c&&(r[c]||(r[c]=p))}(i,o,s,n,a)}));for(var c=0,u=i.length;c<u;c++)"*"===i[c]&&(i.push(i.splice(c,1)[0]),u--,c--);return{pathList:i,pathMap:o,nameMap:s}}function _i(n,t){return ei(n,[],t)}function Ei(n,t){var e=Ti(n),r=e.pathList,a=e.pathMap,i=e.nameMap;function o(n,e,o){var s=bi(n,e,!1,t),u=s.name;if(u){var l=i[u];if(!l)return c(null,s);var p=l.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),e&&"object"==typeof e.params)for(var d in e.params)!(d in s.params)&&p.indexOf(d)>-1&&(s.params[d]=e.params[d]);return s.path=yi(l.path,s.params),c(l,s,o)}if(s.path){s.params={};for(var f=0;f<r.length;f++){var m=r[f],h=a[m];if(Oi(h.regex,s.path,s.params))return c(h,s,o)}}return c(null,s)}function s(n,e){var r=n.redirect,a="function"==typeof r?r(Ua(n,e,null,t)):r;if("string"==typeof a&&(a={path:a}),!a||"object"!=typeof a)return c(null,e);var s=a,u=s.name,l=s.path,p=e.query,d=e.hash,f=e.params;if(p=s.hasOwnProperty("query")?s.query:p,d=s.hasOwnProperty("hash")?s.hash:d,f=s.hasOwnProperty("params")?s.params:f,u){i[u];return o({_normalized:!0,name:u,query:p,hash:d,params:f},void 0,e)}if(l){var m=function(n,t){return Qa(n,t.parent?t.parent.path:"/",!0)}(l,n);return o({_normalized:!0,path:yi(m,f),query:p,hash:d},void 0,e)}return c(null,e)}function c(n,e,r){return n&&n.redirect?s(n,r||e):n&&n.matchAs?function(n,t,e){var r=o({_normalized:!0,path:yi(e,t.params)});if(r){var a=r.matched,i=a[a.length-1];return t.params=r.params,c(i,t)}return c(null,t)}(0,e,n.matchAs):Ua(n,e,r,t)}return{match:o,addRoute:function(n,t){var e="object"!=typeof n?i[n]:void 0;Ti([t||n],r,a,i,e),e&&Ti(e.alias.map((function(n){return{path:n,children:[t]}})),r,a,i,e)},getRoutes:function(){return r.map((function(n){return a[n]}))},addRoutes:function(n){Ti(n,r,a,i)}}}function Oi(n,t,e){var r=t.match(n);if(!r)return!1;if(!e)return!0;for(var a=1,i=r.length;a<i;++a){var o=n.keys[a-1];o&&(e[o.name||"pathMatch"]="string"==typeof r[a]?Ma(r[a]):r[a])}return!0}var Ci=ji&&window.performance&&window.performance.now?window.performance:Date;function Ai(){return Ci.now().toFixed(3)}var Di=Ai();function Ii(){return Di}function Pi(n){return Di=n}var $i=Object.create(null);function Li(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,t=window.location.href.replace(n,""),e=Pa({},window.history.state);return e.key=Ii(),window.history.replaceState(e,"",t),window.addEventListener("popstate",Mi),function(){window.removeEventListener("popstate",Mi)}}function Bi(n,t,e,r){if(n.app){var a=n.options.scrollBehavior;a&&n.app.$nextTick((function(){var i=function(){var n=Ii();if(n)return $i[n]}(),o=a.call(n,t,e,r?i:null);o&&("function"==typeof o.then?o.then((function(n){Ui(n,i)})).catch((function(n){0})):Ui(o,i))}))}}function Ni(){var n=Ii();n&&($i[n]={x:window.pageXOffset,y:window.pageYOffset})}function Mi(n){Ni(),n.state&&n.state.key&&Pi(n.state.key)}function Ri(n){return zi(n.x)||zi(n.y)}function Fi(n){return{x:zi(n.x)?n.x:window.pageXOffset,y:zi(n.y)?n.y:window.pageYOffset}}function zi(n){return"number"==typeof n}var Ji=/^#\d/;function Ui(n,t){var e,r="object"==typeof n;if(r&&"string"==typeof n.selector){var a=Ji.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(a){var i=n.offset&&"object"==typeof n.offset?n.offset:{};t=function(n,t){var e=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-e.left-t.x,y:r.top-e.top-t.y}}(a,i={x:zi((e=i).x)?e.x:0,y:zi(e.y)?e.y:0})}else Ri(n)&&(t=Fi(n))}else r&&Ri(n)&&(t=Fi(n));t&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:t.x,top:t.y,behavior:n.behavior}):window.scrollTo(t.x,t.y))}var qi,Gi=ji&&((-1===(qi=window.navigator.userAgent).indexOf("Android 2.")&&-1===qi.indexOf("Android 4.0")||-1===qi.indexOf("Mobile Safari")||-1!==qi.indexOf("Chrome")||-1!==qi.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function Wi(n,t){Ni();var e=window.history;try{if(t){var r=Pa({},e.state);r.key=Ii(),e.replaceState(r,"",n)}else e.pushState({key:Pi(Ai())},"",n)}catch(e){window.location[t?"replace":"assign"](n)}}function Vi(n){Wi(n,!0)}function Hi(n,t,e){var r=function(a){a>=n.length?e():n[a]?t(n[a],(function(){r(a+1)})):r(a+1)};r(0)}var Ki={redirected:2,aborted:4,cancelled:8,duplicated:16};function Xi(n,t){return Zi(n,t,Ki.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var t={};return Qi.forEach((function(e){e in n&&(t[e]=n[e])})),JSON.stringify(t,null,2)}(t)+'" via a navigation guard.')}function Yi(n,t){return Zi(n,t,Ki.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+t.fullPath+'" with a new navigation.')}function Zi(n,t,e,r){var a=new Error(r);return a._isRouter=!0,a.from=n,a.to=t,a.type=e,a}var Qi=["params","query","hash"];function no(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function to(n,t){return no(n)&&n._isRouter&&(null==t||n.type===t)}function eo(n){return function(t,e,r){var a=!1,i=0,o=null;ro(n,(function(n,t,e,s){if("function"==typeof n&&void 0===n.cid){a=!0,i++;var c,u=oo((function(t){var a;((a=t).__esModule||io&&"Module"===a[Symbol.toStringTag])&&(t=t.default),n.resolved="function"==typeof t?t:xi.extend(t),e.components[s]=t,--i<=0&&r()})),l=oo((function(n){var t="Failed to resolve async component "+s+": "+n;o||(o=no(n)?n:new Error(t),r(o))}));try{c=n(u,l)}catch(n){l(n)}if(c)if("function"==typeof c.then)c.then(u,l);else{var p=c.component;p&&"function"==typeof p.then&&p.then(u,l)}}})),a||r()}}function ro(n,t){return ao(n.map((function(n){return Object.keys(n.components).map((function(e){return t(n.components[e],n.instances[e],n,e)}))})))}function ao(n){return Array.prototype.concat.apply([],n)}var io="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function oo(n){var t=!1;return function(){for(var e=[],r=arguments.length;r--;)e[r]=arguments[r];if(!t)return t=!0,n.apply(this,e)}}var so=function(n,t){this.router=n,this.base=function(n){if(!n)if(ji){var t=document.querySelector("base");n=(n=t&&t.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(t),this.current=Ga,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function co(n,t,e,r){var a=ro(n,(function(n,r,a,i){var o=function(n,t){"function"!=typeof n&&(n=xi.extend(n));return n.options[t]}(n,t);if(o)return Array.isArray(o)?o.map((function(n){return e(n,r,a,i)})):e(o,r,a,i)}));return ao(r?a.reverse():a)}function uo(n,t){if(t)return function(){return n.apply(t,arguments)}}so.prototype.listen=function(n){this.cb=n},so.prototype.onReady=function(n,t){this.ready?n():(this.readyCbs.push(n),t&&this.readyErrorCbs.push(t))},so.prototype.onError=function(n){this.errorCbs.push(n)},so.prototype.transitionTo=function(n,t,e){var r,a=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(t){t(n)})),n}var i=this.current;this.confirmTransition(r,(function(){a.updateRoute(r),t&&t(r),a.ensureURL(),a.router.afterHooks.forEach((function(n){n&&n(r,i)})),a.ready||(a.ready=!0,a.readyCbs.forEach((function(n){n(r)})))}),(function(n){e&&e(n),n&&!a.ready&&(to(n,Ki.redirected)&&i===Ga||(a.ready=!0,a.readyErrorCbs.forEach((function(t){t(n)}))))}))},so.prototype.confirmTransition=function(n,t,e){var r=this,a=this.current;this.pending=n;var i,o,s=function(n){!to(n)&&no(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(t){t(n)})):console.error(n)),e&&e(n)},c=n.matched.length-1,u=a.matched.length-1;if(Ha(n,a)&&c===u&&n.matched[c]===a.matched[u])return this.ensureURL(),s(((o=Zi(i=a,n,Ki.duplicated,'Avoided redundant navigation to current location: "'+i.fullPath+'".')).name="NavigationDuplicated",o));var l=function(n,t){var e,r=Math.max(n.length,t.length);for(e=0;e<r&&n[e]===t[e];e++);return{updated:t.slice(0,e),activated:t.slice(e),deactivated:n.slice(e)}}(this.current.matched,n.matched),p=l.updated,d=l.deactivated,f=l.activated,m=[].concat(function(n){return co(n,"beforeRouteLeave",uo,!0)}(d),this.router.beforeHooks,function(n){return co(n,"beforeRouteUpdate",uo)}(p),f.map((function(n){return n.beforeEnter})),eo(f)),h=function(t,e){if(r.pending!==n)return s(Yi(a,n));try{t(n,a,(function(t){!1===t?(r.ensureURL(!0),s(function(n,t){return Zi(n,t,Ki.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+t.fullPath+'" via a navigation guard.')}(a,n))):no(t)?(r.ensureURL(!0),s(t)):"string"==typeof t||"object"==typeof t&&("string"==typeof t.path||"string"==typeof t.name)?(s(Xi(a,n)),"object"==typeof t&&t.replace?r.replace(t):r.push(t)):e(t)}))}catch(n){s(n)}};Hi(m,h,(function(){Hi(function(n){return co(n,"beforeRouteEnter",(function(n,t,e,r){return function(n,t,e){return function(r,a,i){return n(r,a,(function(n){"function"==typeof n&&(t.enteredCbs[e]||(t.enteredCbs[e]=[]),t.enteredCbs[e].push(n)),i(n)}))}}(n,e,r)}))}(f).concat(r.router.resolveHooks),h,(function(){if(r.pending!==n)return s(Yi(a,n));r.pending=null,t(n),r.router.app&&r.router.app.$nextTick((function(){Xa(n)}))}))}))},so.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},so.prototype.setupListeners=function(){},so.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=Ga,this.pending=null};var lo=function(n){function t(t,e){n.call(this,t,e),this._startLocation=po(this.base)}return n&&(t.__proto__=n),t.prototype=Object.create(n&&n.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var t=this.router,e=t.options.scrollBehavior,r=Gi&&e;r&&this.listeners.push(Li());var a=function(){var e=n.current,a=po(n.base);n.current===Ga&&a===n._startLocation||n.transitionTo(a,(function(n){r&&Bi(t,n,e,!0)}))};window.addEventListener("popstate",a),this.listeners.push((function(){window.removeEventListener("popstate",a)}))}},t.prototype.go=function(n){window.history.go(n)},t.prototype.push=function(n,t,e){var r=this,a=this.current;this.transitionTo(n,(function(n){Wi(ni(r.base+n.fullPath)),Bi(r.router,n,a,!1),t&&t(n)}),e)},t.prototype.replace=function(n,t,e){var r=this,a=this.current;this.transitionTo(n,(function(n){Vi(ni(r.base+n.fullPath)),Bi(r.router,n,a,!1),t&&t(n)}),e)},t.prototype.ensureURL=function(n){if(po(this.base)!==this.current.fullPath){var t=ni(this.base+this.current.fullPath);n?Wi(t):Vi(t)}},t.prototype.getCurrentLocation=function(){return po(this.base)},t}(so);function po(n){var t=window.location.pathname;return n&&0===t.toLowerCase().indexOf(n.toLowerCase())&&(t=t.slice(n.length)),(t||"/")+window.location.search+window.location.hash}var fo=function(n){function t(t,e,r){n.call(this,t,e),r&&function(n){var t=po(n);if(!/^\/#/.test(t))return window.location.replace(ni(n+"/#"+t)),!0}(this.base)||mo()}return n&&(t.__proto__=n),t.prototype=Object.create(n&&n.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var t=this.router.options.scrollBehavior,e=Gi&&t;e&&this.listeners.push(Li());var r=function(){var t=n.current;mo()&&n.transitionTo(ho(),(function(r){e&&Bi(n.router,r,t,!0),Gi||yo(r.fullPath)}))},a=Gi?"popstate":"hashchange";window.addEventListener(a,r),this.listeners.push((function(){window.removeEventListener(a,r)}))}},t.prototype.push=function(n,t,e){var r=this,a=this.current;this.transitionTo(n,(function(n){vo(n.fullPath),Bi(r.router,n,a,!1),t&&t(n)}),e)},t.prototype.replace=function(n,t,e){var r=this,a=this.current;this.transitionTo(n,(function(n){yo(n.fullPath),Bi(r.router,n,a,!1),t&&t(n)}),e)},t.prototype.go=function(n){window.history.go(n)},t.prototype.ensureURL=function(n){var t=this.current.fullPath;ho()!==t&&(n?vo(t):yo(t))},t.prototype.getCurrentLocation=function(){return ho()},t}(so);function mo(){var n=ho();return"/"===n.charAt(0)||(yo("/"+n),!1)}function ho(){var n=window.location.href,t=n.indexOf("#");return t<0?"":n=n.slice(t+1)}function go(n){var t=window.location.href,e=t.indexOf("#");return(e>=0?t.slice(0,e):t)+"#"+n}function vo(n){Gi?Wi(go(n)):window.location.hash=n}function yo(n){Gi?Vi(go(n)):window.location.replace(go(n))}var bo=function(n){function t(t,e){n.call(this,t,e),this.stack=[],this.index=-1}return n&&(t.__proto__=n),t.prototype=Object.create(n&&n.prototype),t.prototype.constructor=t,t.prototype.push=function(n,t,e){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,t&&t(n)}),e)},t.prototype.replace=function(n,t,e){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),t&&t(n)}),e)},t.prototype.go=function(n){var t=this,e=this.index+n;if(!(e<0||e>=this.stack.length)){var r=this.stack[e];this.confirmTransition(r,(function(){var n=t.current;t.index=e,t.updateRoute(r),t.router.afterHooks.forEach((function(t){t&&t(r,n)}))}),(function(n){to(n,Ki.duplicated)&&(t.index=e)}))}},t.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},t.prototype.ensureURL=function(){},t}(so),xo=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ei(n.routes||[],this);var t=n.mode||"hash";switch(this.fallback="history"===t&&!Gi&&!1!==n.fallback,this.fallback&&(t="hash"),ji||(t="abstract"),this.mode=t,t){case"history":this.history=new lo(this,n.base);break;case"hash":this.history=new fo(this,n.base,this.fallback);break;case"abstract":this.history=new bo(this,n.base);break;default:0}},wo={currentRoute:{configurable:!0}};function So(n,t){return n.push(t),function(){var e=n.indexOf(t);e>-1&&n.splice(e,1)}}xo.prototype.match=function(n,t,e){return this.matcher.match(n,t,e)},wo.currentRoute.get=function(){return this.history&&this.history.current},xo.prototype.init=function(n){var t=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var e=t.apps.indexOf(n);e>-1&&t.apps.splice(e,1),t.app===n&&(t.app=t.apps[0]||null),t.app||t.history.teardown()})),!this.app){this.app=n;var e=this.history;if(e instanceof lo||e instanceof fo){var r=function(n){e.setupListeners(),function(n){var r=e.current,a=t.options.scrollBehavior;Gi&&a&&"fullPath"in n&&Bi(t,n,r,!1)}(n)};e.transitionTo(e.getCurrentLocation(),r,r)}e.listen((function(n){t.apps.forEach((function(t){t._route=n}))}))}},xo.prototype.beforeEach=function(n){return So(this.beforeHooks,n)},xo.prototype.beforeResolve=function(n){return So(this.resolveHooks,n)},xo.prototype.afterEach=function(n){return So(this.afterHooks,n)},xo.prototype.onReady=function(n,t){this.history.onReady(n,t)},xo.prototype.onError=function(n){this.history.onError(n)},xo.prototype.push=function(n,t,e){var r=this;if(!t&&!e&&"undefined"!=typeof Promise)return new Promise((function(t,e){r.history.push(n,t,e)}));this.history.push(n,t,e)},xo.prototype.replace=function(n,t,e){var r=this;if(!t&&!e&&"undefined"!=typeof Promise)return new Promise((function(t,e){r.history.replace(n,t,e)}));this.history.replace(n,t,e)},xo.prototype.go=function(n){this.history.go(n)},xo.prototype.back=function(){this.go(-1)},xo.prototype.forward=function(){this.go(1)},xo.prototype.getMatchedComponents=function(n){var t=n?n.matched?n:this.resolve(n).route:this.currentRoute;return t?[].concat.apply([],t.matched.map((function(n){return Object.keys(n.components).map((function(t){return n.components[t]}))}))):[]},xo.prototype.resolve=function(n,t,e){var r=bi(n,t=t||this.history.current,e,this),a=this.match(r,t),i=a.redirectedFrom||a.fullPath;return{location:r,route:a,href:function(n,t,e){var r="hash"===e?"#"+t:t;return n?ni(n+"/"+r):r}(this.history.base,i,this.mode),normalizedTo:r,resolved:a}},xo.prototype.getRoutes=function(){return this.matcher.getRoutes()},xo.prototype.addRoute=function(n,t){this.matcher.addRoute(n,t),this.history.current!==Ga&&this.history.transitionTo(this.history.getCurrentLocation())},xo.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==Ga&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(xo.prototype,wo),xo.install=function n(t){if(!n.installed||xi!==t){n.installed=!0,xi=t;var e=function(n){return void 0!==n},r=function(n,t){var r=n.$options._parentVnode;e(r)&&e(r=r.data)&&e(r=r.registerRouteInstance)&&r(n,t)};t.mixin({beforeCreate:function(){e(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(t.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this._routerRoot._route}}),t.component("RouterView",Ya),t.component("RouterLink",Si);var a=t.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}},xo.version="3.5.1",xo.isNavigationFailure=to,xo.NavigationFailureType=Ki,xo.START_LOCATION=Ga,ji&&window.Vue&&window.Vue.use(xo);var ko=xo;e(187),e(131),e(206),e(100),e(208),e(73),e(74),e(209);function jo(n){n.locales&&Object.keys(n.locales).forEach((function(t){n.locales[t].path=t})),Object.freeze(n)}e(35),e(42),e(63);var To=e(44),_o=(e(139),e(47),e(72),e(189),e(190),{NotFound:function(){return e.e(6).then(e.bind(null,385))},Layout:function(){return Promise.all([e.e(0),e.e(2)]).then(e.bind(null,384))}}),Eo={"v-ebc6073e":function(){return e.e(7).then(e.bind(null,388))},"v-207179c1":function(){return e.e(11).then(e.bind(null,389))},"v-7cea9226":function(){return e.e(12).then(e.bind(null,390))},"v-04168f2f":function(){return e.e(8).then(e.bind(null,391))},"v-ceb98d3c":function(){return e.e(9).then(e.bind(null,392))},"v-38b2273a":function(){return e.e(10).then(e.bind(null,393))}};function Oo(n){var t=Object.create(null);return function(e){return t[e]||(t[e]=n(e))}}var Co=/-(\w)/g,Ao=Oo((function(n){return n.replace(Co,(function(n,t){return t?t.toUpperCase():""}))})),Do=/\B([A-Z])/g,Io=Oo((function(n){return n.replace(Do,"-$1").toLowerCase()})),Po=Oo((function(n){return n.charAt(0).toUpperCase()+n.slice(1)}));function $o(n,t){if(t)return n(t)?n(t):t.includes("-")?n(Po(Ao(t))):n(Po(t))||n(Io(t))}var Lo=Object.assign({},_o,Eo),Bo=function(n){return Lo[n]},No=function(n){return Eo[n]},Mo=function(n){return _o[n]},Ro=function(n){return Ia.component(n)};function Fo(n){return $o(No,n)}function zo(n){return $o(Mo,n)}function Jo(n){return $o(Bo,n)}function Uo(n){return $o(Ro,n)}function qo(){for(var n=arguments.length,t=new Array(n),e=0;e<n;e++)t[e]=arguments[e];return Promise.all(t.filter((function(n){return n})).map(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(t){var e;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(Uo(t)||!Jo(t)){n.next=5;break}return n.next=3,Jo(t)();case 3:e=n.sent,Ia.component(t,e.default);case 5:case"end":return n.stop()}}),n)})));return function(t){return n.apply(this,arguments)}}()))}function Go(n,t){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=t)}var Wo=e(98),Vo=(e(178),e(179),e(166)),Ho=e.n(Vo),Ko={created:function(){if(this.siteMeta=this.$site.headTags.filter((function(n){return"meta"===Object(Wo.a)(n,1)[0]})).map((function(n){var t=Object(Wo.a)(n,2);t[0];return t[1]})),this.$ssrContext){var n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(t=n)?t.map((function(n){var t="<meta";return Object.keys(n).forEach((function(e){t+=" ".concat(e,'="').concat(n[e],'"')})),t+">"})).join("\n    "):"",this.$ssrContext.canonicalLink=Yo(this.$canonicalUrl)}var t},mounted:function(){this.currentMetaTags=Object(To.a)(document.querySelectorAll("meta")),this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta:function(){document.title=this.$title,document.documentElement.lang=this.$lang;var n=this.getMergedMetaTags();this.currentMetaTags=Zo(n,this.currentMetaTags)},getMergedMetaTags:function(){var n=this.$page.frontmatter.meta||[];return Ho()([{name:"description",content:this.$description}],n,this.siteMeta,Qo)},updateCanonicalLink:function(){Xo(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",Yo(this.$canonicalUrl))}},watch:{$page:function(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy:function(){Zo(null,this.currentMetaTags),Xo()}};function Xo(){var n=document.querySelector("link[rel='canonical']");n&&n.remove()}function Yo(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return n?'<link href="'.concat(n,'" rel="canonical" />'):""}function Zo(n,t){if(t&&Object(To.a)(t).filter((function(n){return n.parentNode===document.head})).forEach((function(n){return document.head.removeChild(n)})),n)return n.map((function(n){var t=document.createElement("meta");return Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),document.head.appendChild(t),t}))}function Qo(n){for(var t=0,e=["name","property","itemprop"];t<e.length;t++){var r=e[t];if(n.hasOwnProperty(r))return n[r]+r}return JSON.stringify(n)}e(99);var ns=e(70),ts=e.n(ns),es={mounted:function(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:ts()((function(){this.setActiveHash()}),300),setActiveHash:function(){for(var n=this,t=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter((function(n){return t.some((function(t){return t.hash===n.hash}))})),r=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),a=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+r,o=0;o<e.length;o++){var s=e[o],c=e[o+1],u=0===o&&0===r||r>=s.parentElement.offsetTop+10&&(!c||r<c.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(u&&l!==decodeURIComponent(s.hash)){var p=s;if(i===a)for(var d=o+1;d<e.length;d++)if(l===decodeURIComponent(e[d].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(p.hash),(function(){n.$nextTick((function(){n.$vuepress.$set("disableScrollBehavior",!1)}))}))}}}},beforeDestroy:function(){window.removeEventListener("scroll",this.onScroll)}},rs=(e(88),e(71)),as=e.n(rs),is=[Ko,es,{mounted:function(){var n=this;as.a.configure({showSpinner:!1}),this.$router.beforeEach((function(n,t,e){n.path===t.path||Ia.component(n.name)||as.a.start(),e()})),this.$router.afterEach((function(){as.a.done(),n.isSidebarOpen=!1}))}}],os={name:"GlobalLayout",computed:{layout:function(){var n=this.getLayout();return Go("layout",n),Ia.component(n)}},methods:{getLayout:function(){if(this.$page.path){var n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},ss=e(19),cs=Object(ss.a)(os,(function(){var n=this.$createElement;return(this._self._c||n)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,t,e){var r;switch(t){case"components":n[t]||(n[t]={}),Object.assign(n[t],e);break;case"mixins":n[t]||(n[t]=[]),(r=n[t]).push.apply(r,Object(To.a)(e));break;default:throw new Error("Unknown option name.")}}(cs,"mixins",is);var us=[{name:"v-ebc6073e",path:"/Dir/Dir.html",component:cs,beforeEnter:function(n,t,e){qo("Layout","v-ebc6073e").then(e)}},{name:"v-207179c1",path:"/JavaDoc/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8C%E6%B3%A8%E8%A7%A3.html",component:cs,beforeEnter:function(n,t,e){qo("Layout","v-207179c1").then(e)}},{path:"/JavaDoc/Java枚举类和注解.html",redirect:"/JavaDoc/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8C%E6%B3%A8%E8%A7%A3.html"},{path:"/JavaDoc/Java枚举类和注解.html",redirect:"/JavaDoc/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8C%E6%B3%A8%E8%A7%A3.html"},{name:"v-7cea9226",path:"/",component:cs,beforeEnter:function(n,t,e){qo("Layout","v-7cea9226").then(e)}},{path:"/index.html",redirect:"/"},{name:"v-04168f2f",path:"/JavaDoc/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B.html",component:cs,beforeEnter:function(n,t,e){qo("Layout","v-04168f2f").then(e)}},{path:"/JavaDoc/Java多线程.html",redirect:"/JavaDoc/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B.html"},{path:"/JavaDoc/Java多线程.html",redirect:"/JavaDoc/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B.html"},{name:"v-ceb98d3c",path:"/JavaDoc/Java%E5%B8%B8%E7%94%A8%E7%B1%BB.html",component:cs,beforeEnter:function(n,t,e){qo("Layout","v-ceb98d3c").then(e)}},{path:"/JavaDoc/Java常用类.html",redirect:"/JavaDoc/Java%E5%B8%B8%E7%94%A8%E7%B1%BB.html"},{path:"/JavaDoc/Java常用类.html",redirect:"/JavaDoc/Java%E5%B8%B8%E7%94%A8%E7%B1%BB.html"},{name:"v-38b2273a",path:"/JavaDoc/Java%E5%BC%82%E5%B8%B8.html",component:cs,beforeEnter:function(n,t,e){qo("Layout","v-38b2273a").then(e)}},{path:"/JavaDoc/Java异常.html",redirect:"/JavaDoc/Java%E5%BC%82%E5%B8%B8.html"},{path:"/JavaDoc/Java异常.html",redirect:"/JavaDoc/Java%E5%BC%82%E5%B8%B8.html"},{path:"*",component:cs}],ls={title:"13rokyDocs",description:"Java路途漫漫,用于记录Java学习过程中学习到的知识",base:"/13rokyDocs/",headTags:[["link",{rel:"shortcut icon",type:"image/x-icon",href:"/13rokyDocs/jyjwebdocs/favicon.ico"}]],pages:[{title:"文档目录",frontmatter:{},regularPath:"/Dir/Dir.html",relativePath:"Dir/Dir.md",key:"v-ebc6073e",path:"/Dir/Dir.html",headers:[{level:2,title:"JavaDoc",slug:"javadoc",normalizedTitle:"javadoc",charIndex:11}],headersStr:"JavaDoc",content:"# 文档目录\n\n\n# JavaDoc",normalizedContent:"# 文档目录\n\n\n# javadoc",charsets:{cjk:!0},rightAnchor:{ignore:["/","/api/"],expand:{default:!1,trigger:"hover"},customClass:"your-customClass",disableGlobalUI:!1,isIgnore:!1}},{title:"Java枚举类与注解",frontmatter:{},regularPath:"/JavaDoc/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8C%E6%B3%A8%E8%A7%A3.html",relativePath:"JavaDoc/Java枚举类和注解.md",key:"v-207179c1",path:"/JavaDoc/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8C%E6%B3%A8%E8%A7%A3.html",headers:[{level:2,title:"一、枚举类",slug:"一、枚举类",normalizedTitle:"一、枚举类",charIndex:19},{level:3,title:"① 自定义枚举类",slug:"_1-自定义枚举类",normalizedTitle:"① 自定义枚举类",charIndex:30},{level:3,title:"② enum关键字定义枚举类",slug:"_2-enum关键字定义枚举类",normalizedTitle:"② enum关键字定义枚举类",charIndex:44},{level:3,title:"③ enum 枚举类的方法",slug:"_3-enum-枚举类的方法",normalizedTitle:"③ enum 枚举类的方法",charIndex:64},{level:3,title:"④ enum 枚举类实现接口",slug:"_4-enum-枚举类实现接口",normalizedTitle:"④ enum 枚举类实现接口",charIndex:83},{level:2,title:"二、注解",slug:"二、注解",normalizedTitle:"二、注解",charIndex:101}],headersStr:"一、枚举类 ① 自定义枚举类 ② enum关键字定义枚举类 ③ enum 枚举类的方法 ④ enum 枚举类实现接口 二、注解",content:'# Java枚举类与注解\n\n\n\n * 一、枚举类\n   * ① 自定义枚举类\n   * ② enum关键字定义枚举类\n   * ③ enum 枚举类的方法\n   * ④ enum 枚举类实现接口\n * 二、注解\n\n\n\n\n# 一、枚举类\n\n> 类的对象只有有限个, 确定的. 我们称此类为枚举类.\n\n说明：\n\n 1. 类的对象只有有限个，确定的。如：\n    * 星期：Monday(星期一)、......、Sunday(星期天)\n    * 性别：Man(男)、Woman(女)  季节：Spring(春节)......Winter(冬天)\n    * 支付方式：Cash（现金）、WeChatPay（微信）、Alipay(支付宝)、BankCard(银 行卡)、CreditCard(信用卡)\n    * 就职状态：Busy、Free、Vocation、Dimission\n    * 订单状态：Nonpayment（未付款）、Paid（已付款）、Delivered（已发货）、 Return（退货）、Checked（已确认）Fulfilled（已配货）\n    * 线程状态：创建、就绪、运行、阻塞、死亡\n 2. 当需要定义一组常量时，强烈建议使用枚举类。\n 3. 若枚举只有一个对象, 则可以作为一种单例模式的实现方式。\n\n枚举类的实现：\n\n 1. JDK1.5之前需要自定义枚举类。\n 2. JDK 1.5 新增的 enum 关键字用于定义枚举类。\n\n枚举类的属性：\n\n 1. 枚举类对象的属性不应允许被改动, 所以应该使用 private final 修饰。\n 2. 枚举类的使用 private final 修饰的属性应该在构造器中为其赋值。\n 3. 若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的 传入参数。\n\n\n# ① 自定义枚举类\n\n> 通过自己写一个自定义的类来实现自定义枚举类。\n\n自定义枚举类的实现：\n\n 1. 私有化类的构造器，保证不能在类的外部创建其对象。\n\n 2. 在类的内部创建枚举类的实例。声明为：public static final。\n\n 3. 对象如果有实例变量，应该声明为private final，并在构造器中初始化。\n\nDemo：\n\npackage com.broky.EnumClass;\n\n/**\n * 自定义枚举类\n *\n * @author 13roky\n * @date 2021-05-13 17:16\n */\npublic class SeasonTest {\n    public static void main(String[] args) {\n        Season spring = Season.SPRING;\n        System.out.println(spring);\n    }\n}\n\n// 自定义枚举类\nclass Season{\n    // 1. 声明 Season 对象的属性\n    // final 不能使用初始化赋值, 可以手动 显式赋值, 构造器赋值, 代码块赋值\n    // 现式赋值和代码块赋值 会导致创建当前类的不同对象时 他们的这些属性都是一样的\n    // 构造器赋值 可以在实例化的时候设置属性\n    private final String seasonName;\n    private final String seasonDesc;\n\n    // 2. 私有化类的构造器, 并给对象属性赋值\n    private Season(String seasonName, String seasonDesc){\n        this.seasonName = seasonName;\n        this.seasonDesc = seasonDesc;\n    }\n\n    // 3. 提供当前枚举类的多个对象 : public static final 的\n    public static Season SPRING = new Season("春天","春暖花开");\n    public static Season SUMMER = new Season("夏天","夏日炎炎");\n    public static Season AUTUMN = new Season("秋天","秋高气爽");\n    public static Season WINTER = new Season("冬天","冰天雪地");\n\n    // 4. 其它诉求1 : 获取枚举类对象的属性\n    public String getSeasonName() {\n        return seasonName;\n    }\n\n    public String getSeasonDesc() {\n        return seasonDesc;\n    }\n\n    // 5. 其他诉求2 : 提供toString（）\n    @Override\n    public String toString() {\n        return "Season{" + "seasonName=\'" + seasonName + \'\\\'\' + ", seasonDesc=\'" + seasonDesc + \'\\\'\' + \'}\';\n    }\n}\n\n\n\n# ② enum关键字定义枚举类\n\n> 通过使用enum关键字，和一些简便的规则，更方便枚举类的创建\n\n说明：\n\n 1. enum 枚举类是继承 java.lang.Enum 类的，所以其中如果不重写 toString 使用的是 java.lang.Enum 中的 toString，不会输出内存地址，而是会打印对象名\n\nenum 枚举类的实现：\n\n 1. 使用 enum 声明类为枚举类。\n\n 2. 在枚举类的开头首先定义枚举类中所需要的对象。\n    \n    * 枚举类对实例化枚举类的对象做了简化\n      \n      只需要使用 对象名(参数···) 就可以完成实例化，如：\n      \n      PRING("春天", "春暖花开"), WINTER("冬天", "冰天雪地");\n      \n      多个对象用 “,” 隔开，最后一个以 “;” 结尾\n      \n      如果没有属性，可以去掉括号，如：\n      \n      PRING, WINTER;\n\n 3. 其余规则均与自定义枚举类相同。\n\nDemo：\n\npackage com.broky.EnumClass;\n\n/**\n * @author 13roky\n * @date 2021-05-13 18:32\n */\npublic class SeasonTest1 {\n    public static void main(String[] args) {\n        Season1 spring = Season1.SPRING;\n        System.out.println(spring);\n        System.out.println(Season1.class.getSuperclass());\n    }\n}\n\nenum Season1 {\n    // 1. 提供当前枚举类的对象, 多个对象之间用","隔开, 末尾对象用";"结束\n    SPRING("春天", "春暖花开"), \n    SUMMER("夏天", "夏日炎炎"), \n    AUTUMN("秋天", "秋高气爽"), \n    WINTER("冬天", "冰天雪地");\n\n    // 2. 声明 Season 对象的属性 : private final 修饰\n    private final String seasonName;\n    private final String seasonDesc;\n\n    // 3. 私有化类的构造器, 并给对象属性赋值\n    private Season1(String seasonName, String seasonDesc) {\n        this.seasonName = seasonName;\n        this.seasonDesc = seasonDesc;\n    }\n\n    // 4. 其它诉求1 : 获取枚举类对象的属性\n    public String getSeasonName() {\n        return seasonName;\n    }\n\n    public String getSeasonDesc() {\n        return seasonDesc;\n    }\n\n    // 5. 其他诉求2 : 提供toString（）\n    // 不重写 toString 时, 如果 enum 类继承的是 Object 类, 那么打印时应该使用 Object 的 toString 打印的是地址值.\n    // 但是经过实践得知, 打印出的不是地址值, 由 Season1.class.getSuperclass() 知, 其父类是 java.lang.Enum\n\n    //    @Override\n    //    public String toString() {\n    //        return "Season{" + "seasonName=\'" + seasonName + \'\\\'\' + ", seasonDesc=\'" + seasonDesc + \'\\\'\' + \'}\';\n    //    }\n}\n\n\n\n# ③ enum 枚举类的方法\n\n * **values() ：**返回枚举类型的对象数组。该方法可以很方便地遍历所有的 枚举值。\n * **valueOf(String str) ：**可以把一个字符串转为对应的枚举类对象。要求字符 串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。\n * toString()：返回当前枚举类对象常量的名称。\n\nDemo：（枚举类使用上面代码的枚举类Season1）\n\npackage com.broky.EnumClass;\n\nimport java.util.Arrays;\n\n/**\n * @author 13roky\n * @date 2021-05-13 18:32\n */\npublic class SeasonTest1 {\n    public static void main(String[] args) {\n        Season1 spring = Season1.SPRING;\n        System.out.println(spring);\n        System.out.println(Season1.class.getSuperclass());\n\n        System.out.println("************************************");\n        // values()方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。\n        Season1[] values = Season1.values();\n        System.out.println(Arrays.toString(values));\n\n        Thread.State[] values1 = Thread.State.values();\n        System.out.println(Arrays.toString(values1));\n\n        System.out.println("************************************");\n        // valueOf(String str) ：返回枚举类中对象名是objName的对象。\n        // 可以把一个字符串转为对应的枚举类对象。\n        // 要求字符 串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。\n        Season1 winter1= Season1.valueOf("WINTER");\n        System.out.println(winter1);\n\n        System.out.println("************************************");\n\n        // toString()：返回当前枚举类对象常量的名称。\n        System.out.println(winter1.toString());\n    }\n}\n\n\n\n# ④ enum 枚举类实现接口\n\n> enum 枚举类可以像正常类那样实现接口并重写接口中的方法\n> \n> 但是 enum 枚举类还有其独特的实现接口的方法, 接口类中的每个对象都可以独自重写实现接口的方法\n\nenum 对象特有的实现接口的方法 :\n\n * 对象名(构造器参数){ 需要重写的方法 }, 如:\n\n    AUTUMN("秋天", "秋高气爽"){\n        @Override\n        public void show() {\n            System.out.println("秋高气爽");\n        }\n    },\n    WINTER("冬天", "冰天雪地"){\n        @Override\n        public void show() {\n            System.out.println("凛冬已至");\n        }\n    };\n\n\nDemo:\n\npackage com.broky.EnumClass;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\n\n/**\n * @author 13roky\n * @date 2021-05-13 18:32\n */\npublic class SeasonTest1 {\n    @Test\n    public void test(){\n        Season1 spring = Season1.SPRING;\n        spring.show();\n        Season1.SUMMER.show();\n    }\n}\n\ninterface info{\n    void show();\n}\n\nenum Season1 implements info{\n    // enum 独有的实现接口的方法\n    // 1. 提供当前枚举类的对象, 多个对象之间用","隔开, 末尾对象用";"结束\n    SPRING("春天", "春暖花开"){\n        @Override\n        public void show() {\n            System.out.println("春天在哪里");\n        }\n    },\n    SUMMER("夏天", "夏日炎炎"){\n        @Override\n        public void show() {\n            System.out.println("夏天");\n        }\n    },\n    AUTUMN("秋天", "秋高气爽"){\n        @Override\n        public void show() {\n            System.out.println("秋高气爽");\n        }\n    },\n    WINTER("冬天", "冰天雪地"){\n        @Override\n        public void show() {\n            System.out.println("凛冬已至");\n        }\n    };\n\n    // 2. 声明 Season 对象的属性 : private final 修饰\n    private final String seasonName;\n    private final String seasonDesc;\n\n    // 3. 私有化类的构造器, 并给对象属性赋值\n    private Season1(String seasonName, String seasonDesc) {\n        this.seasonName = seasonName;\n        this.seasonDesc = seasonDesc;\n    }\n\n    // 4. 其它诉求1 : 获取枚举类对象的属性\n    public String getSeasonName() {\n        return seasonName;\n    }\n\n    public String getSeasonDesc() {\n        return seasonDesc;\n    }\n\n    @Override\n    public void show() {\n        System.out.println("这是一个季节");\n    }\n\n}\n\n\n\n# 二、注解',normalizedContent:'# java枚举类与注解\n\n\n\n * 一、枚举类\n   * ① 自定义枚举类\n   * ② enum关键字定义枚举类\n   * ③ enum 枚举类的方法\n   * ④ enum 枚举类实现接口\n * 二、注解\n\n\n\n\n# 一、枚举类\n\n> 类的对象只有有限个, 确定的. 我们称此类为枚举类.\n\n说明：\n\n 1. 类的对象只有有限个，确定的。如：\n    * 星期：monday(星期一)、......、sunday(星期天)\n    * 性别：man(男)、woman(女)  季节：spring(春节)......winter(冬天)\n    * 支付方式：cash（现金）、wechatpay（微信）、alipay(支付宝)、bankcard(银 行卡)、creditcard(信用卡)\n    * 就职状态：busy、free、vocation、dimission\n    * 订单状态：nonpayment（未付款）、paid（已付款）、delivered（已发货）、 return（退货）、checked（已确认）fulfilled（已配货）\n    * 线程状态：创建、就绪、运行、阻塞、死亡\n 2. 当需要定义一组常量时，强烈建议使用枚举类。\n 3. 若枚举只有一个对象, 则可以作为一种单例模式的实现方式。\n\n枚举类的实现：\n\n 1. jdk1.5之前需要自定义枚举类。\n 2. jdk 1.5 新增的 enum 关键字用于定义枚举类。\n\n枚举类的属性：\n\n 1. 枚举类对象的属性不应允许被改动, 所以应该使用 private final 修饰。\n 2. 枚举类的使用 private final 修饰的属性应该在构造器中为其赋值。\n 3. 若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的 传入参数。\n\n\n# ① 自定义枚举类\n\n> 通过自己写一个自定义的类来实现自定义枚举类。\n\n自定义枚举类的实现：\n\n 1. 私有化类的构造器，保证不能在类的外部创建其对象。\n\n 2. 在类的内部创建枚举类的实例。声明为：public static final。\n\n 3. 对象如果有实例变量，应该声明为private final，并在构造器中初始化。\n\ndemo：\n\npackage com.broky.enumclass;\n\n/**\n * 自定义枚举类\n *\n * @author 13roky\n * @date 2021-05-13 17:16\n */\npublic class seasontest {\n    public static void main(string[] args) {\n        season spring = season.spring;\n        system.out.println(spring);\n    }\n}\n\n// 自定义枚举类\nclass season{\n    // 1. 声明 season 对象的属性\n    // final 不能使用初始化赋值, 可以手动 显式赋值, 构造器赋值, 代码块赋值\n    // 现式赋值和代码块赋值 会导致创建当前类的不同对象时 他们的这些属性都是一样的\n    // 构造器赋值 可以在实例化的时候设置属性\n    private final string seasonname;\n    private final string seasondesc;\n\n    // 2. 私有化类的构造器, 并给对象属性赋值\n    private season(string seasonname, string seasondesc){\n        this.seasonname = seasonname;\n        this.seasondesc = seasondesc;\n    }\n\n    // 3. 提供当前枚举类的多个对象 : public static final 的\n    public static season spring = new season("春天","春暖花开");\n    public static season summer = new season("夏天","夏日炎炎");\n    public static season autumn = new season("秋天","秋高气爽");\n    public static season winter = new season("冬天","冰天雪地");\n\n    // 4. 其它诉求1 : 获取枚举类对象的属性\n    public string getseasonname() {\n        return seasonname;\n    }\n\n    public string getseasondesc() {\n        return seasondesc;\n    }\n\n    // 5. 其他诉求2 : 提供tostring（）\n    @override\n    public string tostring() {\n        return "season{" + "seasonname=\'" + seasonname + \'\\\'\' + ", seasondesc=\'" + seasondesc + \'\\\'\' + \'}\';\n    }\n}\n\n\n\n# ② enum关键字定义枚举类\n\n> 通过使用enum关键字，和一些简便的规则，更方便枚举类的创建\n\n说明：\n\n 1. enum 枚举类是继承 java.lang.enum 类的，所以其中如果不重写 tostring 使用的是 java.lang.enum 中的 tostring，不会输出内存地址，而是会打印对象名\n\nenum 枚举类的实现：\n\n 1. 使用 enum 声明类为枚举类。\n\n 2. 在枚举类的开头首先定义枚举类中所需要的对象。\n    \n    * 枚举类对实例化枚举类的对象做了简化\n      \n      只需要使用 对象名(参数···) 就可以完成实例化，如：\n      \n      pring("春天", "春暖花开"), winter("冬天", "冰天雪地");\n      \n      多个对象用 “,” 隔开，最后一个以 “;” 结尾\n      \n      如果没有属性，可以去掉括号，如：\n      \n      pring, winter;\n\n 3. 其余规则均与自定义枚举类相同。\n\ndemo：\n\npackage com.broky.enumclass;\n\n/**\n * @author 13roky\n * @date 2021-05-13 18:32\n */\npublic class seasontest1 {\n    public static void main(string[] args) {\n        season1 spring = season1.spring;\n        system.out.println(spring);\n        system.out.println(season1.class.getsuperclass());\n    }\n}\n\nenum season1 {\n    // 1. 提供当前枚举类的对象, 多个对象之间用","隔开, 末尾对象用";"结束\n    spring("春天", "春暖花开"), \n    summer("夏天", "夏日炎炎"), \n    autumn("秋天", "秋高气爽"), \n    winter("冬天", "冰天雪地");\n\n    // 2. 声明 season 对象的属性 : private final 修饰\n    private final string seasonname;\n    private final string seasondesc;\n\n    // 3. 私有化类的构造器, 并给对象属性赋值\n    private season1(string seasonname, string seasondesc) {\n        this.seasonname = seasonname;\n        this.seasondesc = seasondesc;\n    }\n\n    // 4. 其它诉求1 : 获取枚举类对象的属性\n    public string getseasonname() {\n        return seasonname;\n    }\n\n    public string getseasondesc() {\n        return seasondesc;\n    }\n\n    // 5. 其他诉求2 : 提供tostring（）\n    // 不重写 tostring 时, 如果 enum 类继承的是 object 类, 那么打印时应该使用 object 的 tostring 打印的是地址值.\n    // 但是经过实践得知, 打印出的不是地址值, 由 season1.class.getsuperclass() 知, 其父类是 java.lang.enum\n\n    //    @override\n    //    public string tostring() {\n    //        return "season{" + "seasonname=\'" + seasonname + \'\\\'\' + ", seasondesc=\'" + seasondesc + \'\\\'\' + \'}\';\n    //    }\n}\n\n\n\n# ③ enum 枚举类的方法\n\n * **values() ：**返回枚举类型的对象数组。该方法可以很方便地遍历所有的 枚举值。\n * **valueof(string str) ：**可以把一个字符串转为对应的枚举类对象。要求字符 串必须是枚举类对象的“名字”。如不是，会有运行时异常：illegalargumentexception。\n * tostring()：返回当前枚举类对象常量的名称。\n\ndemo：（枚举类使用上面代码的枚举类season1）\n\npackage com.broky.enumclass;\n\nimport java.util.arrays;\n\n/**\n * @author 13roky\n * @date 2021-05-13 18:32\n */\npublic class seasontest1 {\n    public static void main(string[] args) {\n        season1 spring = season1.spring;\n        system.out.println(spring);\n        system.out.println(season1.class.getsuperclass());\n\n        system.out.println("************************************");\n        // values()方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。\n        season1[] values = season1.values();\n        system.out.println(arrays.tostring(values));\n\n        thread.state[] values1 = thread.state.values();\n        system.out.println(arrays.tostring(values1));\n\n        system.out.println("************************************");\n        // valueof(string str) ：返回枚举类中对象名是objname的对象。\n        // 可以把一个字符串转为对应的枚举类对象。\n        // 要求字符 串必须是枚举类对象的“名字”。如不是，会有运行时异常：illegalargumentexception。\n        season1 winter1= season1.valueof("winter");\n        system.out.println(winter1);\n\n        system.out.println("************************************");\n\n        // tostring()：返回当前枚举类对象常量的名称。\n        system.out.println(winter1.tostring());\n    }\n}\n\n\n\n# ④ enum 枚举类实现接口\n\n> enum 枚举类可以像正常类那样实现接口并重写接口中的方法\n> \n> 但是 enum 枚举类还有其独特的实现接口的方法, 接口类中的每个对象都可以独自重写实现接口的方法\n\nenum 对象特有的实现接口的方法 :\n\n * 对象名(构造器参数){ 需要重写的方法 }, 如:\n\n    autumn("秋天", "秋高气爽"){\n        @override\n        public void show() {\n            system.out.println("秋高气爽");\n        }\n    },\n    winter("冬天", "冰天雪地"){\n        @override\n        public void show() {\n            system.out.println("凛冬已至");\n        }\n    };\n\n\ndemo:\n\npackage com.broky.enumclass;\n\nimport org.junit.jupiter.api.test;\n\nimport java.util.arrays;\n\n/**\n * @author 13roky\n * @date 2021-05-13 18:32\n */\npublic class seasontest1 {\n    @test\n    public void test(){\n        season1 spring = season1.spring;\n        spring.show();\n        season1.summer.show();\n    }\n}\n\ninterface info{\n    void show();\n}\n\nenum season1 implements info{\n    // enum 独有的实现接口的方法\n    // 1. 提供当前枚举类的对象, 多个对象之间用","隔开, 末尾对象用";"结束\n    spring("春天", "春暖花开"){\n        @override\n        public void show() {\n            system.out.println("春天在哪里");\n        }\n    },\n    summer("夏天", "夏日炎炎"){\n        @override\n        public void show() {\n            system.out.println("夏天");\n        }\n    },\n    autumn("秋天", "秋高气爽"){\n        @override\n        public void show() {\n            system.out.println("秋高气爽");\n        }\n    },\n    winter("冬天", "冰天雪地"){\n        @override\n        public void show() {\n            system.out.println("凛冬已至");\n        }\n    };\n\n    // 2. 声明 season 对象的属性 : private final 修饰\n    private final string seasonname;\n    private final string seasondesc;\n\n    // 3. 私有化类的构造器, 并给对象属性赋值\n    private season1(string seasonname, string seasondesc) {\n        this.seasonname = seasonname;\n        this.seasondesc = seasondesc;\n    }\n\n    // 4. 其它诉求1 : 获取枚举类对象的属性\n    public string getseasonname() {\n        return seasonname;\n    }\n\n    public string getseasondesc() {\n        return seasondesc;\n    }\n\n    @override\n    public void show() {\n        system.out.println("这是一个季节");\n    }\n\n}\n\n\n\n# 二、注解',charsets:{cjk:!0},rightAnchor:{ignore:["/","/api/"],expand:{default:!1,trigger:"hover"},customClass:"your-customClass",disableGlobalUI:!1,isIgnore:!1}},{title:"Home",frontmatter:{home:!0,heroImage:"https://camo.githubusercontent.com/cb6b21aed79d175ef2bc872d07903bb467705cba35e4e21e91027277b5ba22ab/68747470733a2f2f692e7667792e6d652f47506f6f4a542e706e67",actionText:"文档目录 →",actionLink:"/Dir/Dir.html",features:[{title:"简洁至上",details:"以 Markdown 为中心的项目结构，帮助你更舒服的回顾路途中积累的的知识点。"},{title:"在线查看",details:"可以在任何可以连互联网的设备中轻松查看文档."},{title:"精准查找",details:"文档具备关键词查找功能,让你更快速找到自己寻找的知识点."}],footer:null},regularPath:"/",relativePath:"README.md",key:"v-7cea9226",path:"/",headersStr:null,content:"",normalizedContent:"",charsets:{},rightAnchor:{ignore:["/","/api/"],expand:{default:!1,trigger:"hover"},customClass:"your-customClass",disableGlobalUI:!1,isIgnore:!0}},{title:"Java多线程",frontmatter:{},regularPath:"/JavaDoc/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B.html",relativePath:"JavaDoc/Java多线程.md",key:"v-04168f2f",path:"/JavaDoc/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B.html",headers:[{level:2,title:"1. 基本概念",slug:"_1-基本概念",normalizedTitle:"1. 基本概念",charIndex:16},{level:2,title:"2. 线程的创建和启动",slug:"_2-线程的创建和启动",normalizedTitle:"2. 线程的创建和启动",charIndex:27},{level:3,title:"2.1. 多线程实现的原理",slug:"_2-1-多线程实现的原理",normalizedTitle:"2.1. 多线程实现的原理",charIndex:44},{level:3,title:"2.2.多线程的创建，方式一：继承于Thread类",slug:"_2-2-多线程的创建-方式一-继承于thread类",normalizedTitle:"2.2.多线程的创建，方式一：继承于thread类",charIndex:63},{level:3,title:"2.3.多线程的创建，方式一：创建Thread匿名子类（也属于方法一）",slug:"_2-3-多线程的创建-方式一-创建thread匿名子类-也属于方法一",normalizedTitle:"2.3.多线程的创建，方式一：创建thread匿名子类（也属于方法一）",charIndex:94},{level:3,title:"2.4. 多线程的创建，方式二：实现Runnable接口",slug:"_2-4-多线程的创建-方式二-实现runnable接口",normalizedTitle:"2.4. 多线程的创建，方式二：实现runnable接口",charIndex:135},{level:3,title:"2.5. 多线程的创建，方式三：实现Callable接口",slug:"_2-5-多线程的创建-方式三-实现callable接口",normalizedTitle:"2.5. 多线程的创建，方式三：实现callable接口",charIndex:169},{level:3,title:"2.6. 多线程的创建，方式四：线程池",slug:"_2-6-多线程的创建-方式四-线程池",normalizedTitle:"2.6. 多线程的创建，方式四：线程池",charIndex:203},{level:2,title:"3. Thread类的常用方法",slug:"_3-thread类的常用方法",normalizedTitle:"3. thread类的常用方法",charIndex:226},{level:2,title:"4. 线程的调度",slug:"_4-线程的调度",normalizedTitle:"4. 线程的调度",charIndex:245},{level:3,title:"4.1. cpu的调度策略",slug:"_4-1-cpu的调度策略",normalizedTitle:"4.1. cpu的调度策略",charIndex:259},{level:3,title:"4.2. Java的调度算法：",slug:"_4-2-java的调度算法",normalizedTitle:"4.2. java的调度算法：",charIndex:278},{level:2,title:"5. 线程的生命周期",slug:"_5-线程的生命周期",normalizedTitle:"5. 线程的生命周期",charIndex:297},{level:2,title:"6. 线程的同步",slug:"_6-线程的同步",normalizedTitle:"6. 线程的同步",charIndex:311},{level:3,title:"6.1. 多线程的安全性问题解析",slug:"_6-1-多线程的安全性问题解析",normalizedTitle:"6.1. 多线程的安全性问题解析",charIndex:325},{level:3,title:"6.2. 多线程安全性问题的解决",slug:"_6-2-多线程安全性问题的解决",normalizedTitle:"6.2. 多线程安全性问题的解决",charIndex:347},{level:3,title:"6.3. 线程同步的死锁问题",slug:"_6-3-线程同步的死锁问题",normalizedTitle:"6.3. 线程同步的死锁问题",charIndex:369},{level:2,title:"7. 线程的通信",slug:"_7-线程的通信",normalizedTitle:"7. 线程的通信",charIndex:387},{level:2,title:"8. 练习",slug:"_8-练习",normalizedTitle:"8. 练习",charIndex:399}],headersStr:"1. 基本概念 2. 线程的创建和启动 2.1. 多线程实现的原理 2.2.多线程的创建，方式一：继承于Thread类 2.3.多线程的创建，方式一：创建Thread匿名子类（也属于方法一） 2.4. 多线程的创建，方式二：实现Runnable接口 2.5. 多线程的创建，方式三：实现Callable接口 2.6. 多线程的创建，方式四：线程池 3. Thread类的常用方法 4. 线程的调度 4.1. cpu的调度策略 4.2. Java的调度算法： 5. 线程的生命周期 6. 线程的同步 6.1. 多线程的安全性问题解析 6.2. 多线程安全性问题的解决 6.3. 线程同步的死锁问题 7. 线程的通信 8. 练习",content:'# Java多线程\n\n\n\n * 1. 基本概念\n * 2. 线程的创建和启动\n   * 2.1. 多线程实现的原理\n   * 2.2.多线程的创建，方式一：继承于Thread类\n   * 2.3.多线程的创建，方式一：创建Thread匿名子类（也属于方法一）\n   * 2.4. 多线程的创建，方式二：实现Runnable接口\n   * 2.5. 多线程的创建，方式三：实现Callable接口\n   * 2.6. 多线程的创建，方式四：线程池\n * 3. Thread类的常用方法\n * 4. 线程的调度\n   * 4.1. cpu的调度策略\n   * 4.2. Java的调度算法：\n * 5. 线程的生命周期\n * 6. 线程的同步\n   * 6.1. 多线程的安全性问题解析\n   * 6.2. 多线程安全性问题的解决\n   * 6.3. 线程同步的死锁问题\n * 7. 线程的通信\n * 8. 练习\n\n\n\n\n# 1. 基本概念\n\n * 程序（program）\n   \n   程序是为完成特定任务、用某种语言编写的一组指令的集合。即指==一段静态的代码==（还没有运行起来），静态对象。\n\n * 进程（process）\n   \n   进程是程序的一次执行过程，也就是说程序运行起来了，加载到了内存中，并占用了cpu的资源。这是一个动态的过程：有自身的产生、存在和消亡的过程，这也是进程的生命周期。\n   \n   ==进程是系统资源分配的单位==，系统在运行时会为每个进程分配不同的内存区域。\n\n * 线程（thread）\n   \n   进程可进一步细化为线程，是一个程序内部的执行路径。\n   \n   若一个进程同一时间并行执行多个线程，那么这个进程就是支持多线程的。\n   \n   ==线程是cpu调度和执行的单位，每个线程拥有独立的运行栈和程序计数器（pc）==，线程切换的开销小。\n   \n   一个进程中的多个线程共享相同的内存单元/内存地址空间——》他们从同一堆中分配对象，可以访问相同的变量和对象。这就使得相乘间通信更简便、搞笑。但索格线程操作共享的系统资源可能就会带来==安全隐患==（隐患为到底哪个线程操作这个数据，可能一个线程正在操作这个数据，有一个线程也来操作了这个数据v）。\n   \n   * 配合JVM内存结构了解（只做了解即可）\n     \n     \n     \n     class文件会通过类加载器加载到内存空间。\n     \n     其中内存区域中每个线程都会有虚拟机栈和程序计数器。\n     \n     每个进程都会有一个方法区和堆，多个线程共享同一进程下的方法区和堆。\n\n * CPU单核和多核的理解\n   \n   单核的CPU是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。同时间段内有多个线程需要CPU去运行时，CPU也只能交替去执行多个线程中的一个线程，但是由于其执行速度特别快，因此感觉不出来。\n   \n   多核的CPU才能更好的发挥多线程的效率。\n   \n   对于Java应用程序java.exe来讲，至少会存在三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。如过发生异常时会影响主线程。\n\n * Java线程的分类：用户线程 和 守护线程\n   \n   * Java的gc()垃圾回收线程就是一个守护线程\n   * 守护线程是用来服务用户线程的，通过在start()方法前调用thread.setDaemon(true)可以吧一个用户线程变成一个守护线程。\n\n * 并行和并发\n   \n   * 并行：多个cpu同时执行多个任务。比如，多个人做不同的事。\n   * 并发：一个cpu（采用时间片）同时执行多个任务。比如，渺少、多个人做同一件事。\n\n * 多线程的优点\n   \n   1. 提高应用程序的响应。堆图像化界面更有意义，可以增强用户体验。\n   2. 提高计算机系CPU的利用率。\n   3. 改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改。\n\n * 何时需要多线程\n   \n   * 程序需要同时执行两个或多个任务。\n   * 程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等。\n   * 需要一些后台运行的程序时。\n\n\n# 2. 线程的创建和启动\n\n\n# 2.1. 多线程实现的原理\n\n * Java语言的JVM允许程序运行多个线程，多线程可以通过Java中的==java.lang.Thread==类来体现。\n * Thread类的特性\n   * 每个线程都是通过某个特定的Thread对象的run()方法来完成操作的，经常吧run()方法的主体称为线程体。\n   * 通过Thread方法的start()方法来启动这个线程，而非直接调用run()。\n\n\n# 2.2.多线程的创建，方式一：继承于Thread类\n\n 1. 创建一个继承于Thread类的子类。\n 2. 重写Thread类的run()方法。\n 3. 创建Thread类的子类的对象。\n 4. 通过此对象调用start()来启动一个线程。\n\n**代码实现：**多线程执行同一段代码\n\npackage com.broky.multiThread;\n\n/**\n * @author 13roky\n * @date 2021-04-19 21:22\n */\npublic class ThreadTest extends Thread{\n    @Override\n    //线程体,启动线程时会运行run()方法中的代码\n    public void run() {\n        //输出100以内的偶数\n        for (int i = 0; i < 100; i++) {\n            if (i % 2 == 0){\n                System.out.println(Thread.currentThread().getName()+":\\t"+i);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        //创建一个Thread类的子类对象\n        ThreadTest t1 = new ThreadTest();\n        //通过此对象调用start()启动一个线程\n        t1.start();\n        //注意:已经启动过一次的线程无法再次启动\n        //再创建一个线程\n        ThreadTest t2 = new ThreadTest();\n        t2.start();\n\n        //另一种调用方法,此方法并没有给对象命名\n        new ThreadTest().start();\n\n        System.out.println("主线程");\n    }\n}\n\n\n多线程代码运行图解\n\n\n\n多线程执行多段代码\n\npackage com.broky.multiThread.exer;\n\n/**\n * @author 13roky\n * @date 2021-04-19 22:43\n */\npublic class ThreadExerDemo01 {\n    public static void main(String[] args) {\n        new Thread01().start();\n        new Thread02().start();\n    }\n}\n\nclass Thread01 extends Thread {\n    @Override\n    public void run() {\n        for (int i = 0; i < 100; i++) {\n            if (i % 2 == 0) System.out.println(Thread.currentThread().getName() + ":\\t" + i);\n        }\n    }\n}\n\nclass Thread02 extends Thread {\n    @Override\n    public void run() {\n        for (int i = 0; i < 100; i++) {\n            if (i % 2 != 0) System.out.println(Thread.currentThread().getName() + ":\\t" + i);\n        }\n    }\n}\n\n\n\n# 2.3.多线程的创建，方式一：创建Thread匿名子类（也属于方法一）\n\npackage com.broky.multiThread;\n\n/**\n * @author 13roky\n * @date 2021-04-19 22:53\n */\npublic class AnonymousSubClass {\n    public static void main(String[] args) {\n\n        new Thread(){\n            @Override\n            public void run() {\n                for (int i = 0; i < 100; i++) {\n                    if (i % 2 == 0) System.out.println(Thread.currentThread().getName() + ":\\t" + i);\n                }\n            }\n        }.start();\n\n    }\n}\n\n\n\n# 2.4. 多线程的创建，方式二：实现Runnable接口\n\n 1. 创建一个实现Runnable接口的类。\n 2. 实现类去实现Runnable接口中的抽象方法：run()。\n 3. 创建实现类的对象。\n 4. 将此对象作为参数传到Thread类的构造器中，创建Thread类的对象。\n 5. 通过Thread类的对象调用start()方法。\n\npackage com.broky.multiThread;\n\n/**\n * @author 13roky\n * @date 2021-04-20 23:16\n */\npublic class RunnableThread {\n    public static void main(String[] args) {\n        //创建实现类的对象\n        RunnableThread01 runnableThread01 = new RunnableThread01();\n        //创建Thread类的对象,并将实现类的对象当做参数传入构造器\n        Thread t1 = new Thread(runnableThread01);\n        //使用Thread类的对象去调用Thread类的start()方法:①启动了线程 ②Thread中的run()调用了Runnable中的run()\n        t1.start();\n\n        //在创建一个线程时，只需要new一个Thread类就可,不需要new实现类\n        Thread t2 = new Thread(runnableThread01);\n        t2.start();\n    }\n}\n\n//RunnableThread01实现Runnable接口的run()抽象方法\nclass RunnableThread01 implements Runnable {\n    @Override\n    public void run() {\n        for (int i = 0; i < 100; i++) {\n            if (i % 2 == 0) System.out.println(Thread.currentThread().getName() + ":\\t" + i);\n        }\n    }\n}\n\n\n# 2.4.1. 比较创建线程的两种方式\n\n * Java中只允许单进程，以卖票程序TiketSales类来说，很有可能这个类本来就有父类，这样一来就不可以继承Thread类来完成多线程了，但是一个类可以实现多个接口，因此==实现的方式没有类的单继承性的局限性==，用实现Runnable接口的方式来完成多线程更加实用。\n * 实现Runnable接口的方式天然具有共享数据的特性（不用static变量）。因为继承Thread的实现方式，需要创建多个子类的对象来进行多线程，如果子类中有变量A，而不使用static约束变量的话，每个子类的对象都会有自己独立的变量A，只有static约束A后，子类的对象才共享变量A。而实现Runnable接口的方式，只需要创建一个实现类的对象，要将这个对象传入Thread类并创建多个Thread类的对象来完成多线程，而这多个Thread类对象实际上就是调用一个实现类对象而已。==实现的方式更适合来处理多个线程有共享数据的情况。==\n * 联系：Thread类中也实现了Runnable接口\n * 相同点两种方式都需要重写run()方法，线程的执行逻辑都在run()方法中\n\n\n# 2.5. 多线程的创建，方式三：实现Callable接口\n\n与Runnable相比，Callable功能更强大\n\n 1. 相比run()方法，可以有返回值\n 2. 方法可以抛出异常\n 3. 支持泛型的返回值\n 4. 需要借助FutureTask类，比如获取返回结果\n\npackage com.broky.multiThread;\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.FutureTask;\n\n/**\n * 创建线程的方式三：实现Callable接口。 ---JDK5新特性\n * 如何理解Callable比Runnable强大？\n * 1.call()可以有返回值\n * 2.call()可以抛出异常被外面的操作捕获\n * @author 13roky\n * @date 2021-04-22 21:04\n */\n\n//1.创建一个实现Callable的实现类\nclass NumThread implements Callable<Integer>{\n    //2.实现call方法，将此线程需要执行的操作声明在call()中\n    @Override\n    public Integer call() throws Exception {\n        int sum = 0;\n        for (int i = 1; i < 100; i++) {\n            if(i%2==0){\n                System.out.println(i);\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}\n\npublic class ThreadNew {\n    public static void main(String[] args) {\n        //3.创建Callable接口实现类的对象\n        NumThread numThread = new NumThread();\n        //4.将此Callable接口实现类的对象作为参数传递到FutureTask构造器中，创建FutureTask对象\n        FutureTask<Integer> futureTask = new FutureTask(numThread);\n        //5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()\n        new Thread(futureTask).start();\n\n        try {\n            //6.获取Callable中Call方法的返回值\n            Integer sum = futureTask.get();\n            System.out.println("总和为"+sum);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n\n\n\n# 2.6. 多线程的创建，方式四：线程池\n\n背景：\n\n经常创建和销毁、使用量特别大的资源、比如并发情况下的线程、对性能影响很大。\n\n思路：\n\n提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。\n\n优点：\n\n提高响应速度（减少了创建新线程的时间）\n\n降低资源消耗（重复利用线程池中线程，不需要每次都创建）\n\n便于线程管理\n\npackage com.broky.multiThread;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ThreadPoolExecutor;\n\n/**\n * 创建线程的方式四：使用线程池\n * <p>\n * 面试题：创建多线程有几种方式\n *\n * @author 13roky\n * @date 2021-04-22 21:49\n */\n\nclass NumberThread implements Runnable {\n    @Override\n    public void run() {\n        for (int i = 0; i < 100; i++) {\n            if (i % 2 == 0) {\n                System.out.println(Thread.currentThread().getName() + ":\\t" + i);\n            }\n        }\n    }\n}\n\npublic class ThreadPool {\n    public static void main(String[] args) {\n\n        //1.提供指定线程数量的线程池\n        ExecutorService service = Executors.newFixedThreadPool(10);\n        ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;\n        //设置线程池的属性\n        //        System.out.println(service.getClass());\n        //        service1.setCorePoolSize(15);\n        //        service1.setKeepAliveTime();\n\n        //2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象。\n        service.execute(new NumberThread()); //适合用于Runnable\n        //        service.submit(); 适合适用于Callable\n        //关闭线程池\n        service.shutdown();\n    }\n}\n\n\n\n# 3. Thread类的常用方法\n\n * start() : 启动当前线程, 调用当前线程的run()方法\n * run() : 通常需要重写Thread类中的此方法, 将创建的线程要执行的操作声明在此方法中\n * currentThread() : 静态方法, 返回当前代码执行的线程\n * getName() : 获取当前线程的名字\n * setName() : 设置当前线程的名字\n * yield() : 释放当前CPU的执行权\n * join() : 在线程a中调用线程b的join(), 此时线程a进入阻塞状态, 知道线程b完全执行完以后, 线程a才结束阻塞状态\n * stop() : 已过时. 当执行此方法时,强制结束当前线程.\n * sleep(long militime) : 让线程睡眠指定的毫秒数，在指定时间内，线程是阻塞状态\n * isAlive() ：判断当前线程是否存活\n\n\n# 4. 线程的调度\n\n\n# 4.1. cpu的调度策略\n\n * **时间片：**cpu正常情况下的调度策略。即CPU分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片，即该进程允许运行的时间，使各个程序从表面上看是同时进行的。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。而不会造成CPU资源浪费。在宏观上：我们可以同时打开多个应用程序，每个程序并行不悖，同时运行。但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。\n\n * **抢占式：**高优先级的线程抢占cpu。\n\n\n# 4.2. Java的调度算法：\n\n * 同优先级线程组成先进先出队列（先到先服务），使用时间片策略。\n * 堆高优先级，使用优先调度的抢占式策略。\n\n线程的优先级等级（一共有10挡）\n\n * MAX_PRIORITY：10\n * MIN_PRIORITY：1\n * NORM_PRIORITY：5 (默认优先级)\n\n获取和设置当前线程的优先级\n\n * getPriority(); 获取\n * setPriority(int p); 设置\n\n说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有高优先级的线程执行完成以后，低优先级的线程才执行。\n\n\n# 5. 线程的生命周期\n\n * JDk中用Thread.State类定义了线程的几种状态\n\n想要实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类及其子类的对象来表示线程，在他的一个完整的生命周期中通常要经历如下的五种状态：\n\n 1. 新建：当一个Thread类或其子类的对象被声明并创建时，新的线程对象处于新建状态。\n 2. 就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源。\n 3. 运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run()方法定义了线程的操作和功能。\n 4. 阻塞：在某种特殊情况下，被认为挂起或执行输入输出操作时，让出CPU并临时中止自己的执行，进入阻塞状态。\n 5. 死亡：线程完成了它的全部工作或线程被提前强制性的中止或出现异常倒置导致结束。\n\n\n\n\n# 6. 线程的同步\n\n\n# 6.1. 多线程的安全性问题解析\n\n * 线程的安全问题\n   * 多个线程执行的不确定性硬气执行结果的不稳定性\n   * 多个线程对账本的共享, 会造成操作的不完整性, 会破坏数据.\n   * 多个线程访问共享的数据时可能存在安全性问题\n * 线程的安全问题Demo: 卖票过程中出现了重票和错票的情况 (以下多窗口售票demo存在多线程安全问题)\n\npackage com.broky.multiThread.safeThread;\n\n/**\n * @author 13roky\n * @date 2021-04-21 20:39\n */\npublic class SafeTicketsWindow {\n    public static void main(String[] args) {\n        WindowThread ticketsThread02 = new WindowThread();\n        Thread t1 = new Thread(ticketsThread02);\n        Thread t2 = new Thread(ticketsThread02);\n        Thread t3 = new Thread(ticketsThread02);\n\n        t1.setName("窗口1");\n        t2.setName("窗口2");\n        t3.setName("窗口3");\n\n        t1.start();\n        t2.start();\n        t3.start();\n    }\n}\n\nclass WindowThread implements Runnable {\n    private int tiketsNum = 100;\n\n    public void run() {\n        while (true) {\n            if (tiketsNum > 0) {\n                try {\n                    //手动让线程进入阻塞,增大错票概率\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread().getName() + ":\\t票号:" + tiketsNum);\n                /*try {\n                    //手动让线程进入阻塞,增大重票的概率\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }*/\n                tiketsNum--;\n            } else {\n                break;\n            }\n        }\n    }\n}\n\n\n错票分析:\n\n当票数为1的时候，三个线程中有线程被阻塞没有执行票数-1的操作，这是其它线程就会通过if语句的判断，这样一来就会造成多卖了一张票，出现错票的情况。\n\n极端情况为，当票数为1时，三个线程同时判断通过，进入阻塞，然后多执行两侧卖票操作。\n\n\n\n重票分析：\n\n如果t1在输出票号22和票数-1的操作之间被阻塞，这就导致这时候t1卖出了22号票，但是总票数没有减少。在t1被阻塞期间，如果t2运行到输出票号时，那么t2也会输出和t1相同的票号22.\n\n通过以上两种情况可以看出，线程的安全性问题时因为多个线程正在执行代码的过程中，并且尚未完成的时候，其他线程参与进来执行代码所导致的。\n\n\n# 6.2. 多线程安全性问题的解决\n\n原理：\n\n当一个线程在操作共享数据的时候，其他线程不能参与进来。知道这个线程操作完共享数据的时候，其他线程才可以操作。即使当这个线程操作共享数据的时候发生了阻塞，依旧无法改变这种情况。\n\n在Java中，我们通过同步机制，来解决线程的安全问题。\n\n\n\n# 6.2.1. 多线程安全问题的解决方式一：同步代码块\n\nsynchronized(同步监视器){需要被同步的代码}\n\n说明：\n\n 1. 操作共享数据（多个线程共同操作的变量）的代码，即为需要被同步的代码。 不能多包涵代码（效率低，如果包到while前面就变成了单线程了），也不能少包含代码\n 2. 共享数据：多个线程共同操作的变量。\n 3. 同步监视器：俗称，锁。任何一个类的对象都可以充当锁。但是所有的线程都必须共用一把锁，共用一个对象。\n\n锁的选择：\n\n 1. 自行创建，共用对象，如下面demo中的Object对象。\n\n 2. 使用this表示当前类的对象\n    \n    继承Thread的方法中的锁不能使用this代替，因为继承thread实现多线程时，会创建多个子类对象来代表多个线程，这个时候this指的时当前这个类的多个对象，不唯一，无法当作锁。\n    \n    实现Runnable接口的方式中，this可以当作锁，因为这种方式只需要创建一个实现类的对象，将实现类的对象传递给多个Thread类对象来当作多个线程，this就是这个一个实现类的对象，是唯一的，被所有线程所共用的对象。\n\n 3. 使用类当作锁，以下面demo为例，其中的锁可以写为WindowThread.class, 从这里可以得出结论，==类也是一个对象==\n\n优点：同步的方式，解决了线程安全的问题\n\n缺点：操作同步代码时，只能有一个线程参与，其他线程等待。相当于时一个单线程的过程，效率低。\n\nDemo\n\npackage com.broky.multiThread.safeThread;\n\n/**\n * @author 13roky\n * @date 2021-04-21 20:39\n */\npublic class SafeTicketsWindow {\n    public static void main(String[] args) {\n        WindowThread ticketsThread02 = new WindowThread();\n        Thread t1 = new Thread(ticketsThread02);\n        Thread t2 = new Thread(ticketsThread02);\n        Thread t3 = new Thread(ticketsThread02);\n\n        t1.setName("窗口1");\n        t2.setName("窗口2");\n        t3.setName("窗口3");\n\n        t1.start();\n        t2.start();\n        t3.start();\n    }\n}\n\nclass WindowThread implements Runnable {\n    private int tiketsNum = 100;\n    \n    //由于，Runnable实现多线程，所有线程共用一个实现类的对象，所以三个线程都共用实现类中的这个Object类的对象。\n    Object obj = new Object();\n    //如果时继承Thread类实现多线程，那么需要使用到static Object obj = new Object();\n    \n    public void run() {\n        \n        //Object obj = new Object();\n        //如果Object对象在run()方法中创建，那么每个线程运行都会生成自己的Object类的对象，并不是三个线程的共享对象，所以并没有给加上锁。\n        \n        while (true) {\n            synchronized (obj) {\n                if (tiketsNum > 0) {\n                    try {\n                        //手动让线程进入阻塞,增大安全性发生的概率\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    System.out.println(Thread.currentThread().getName() + ":\\t票号:" + tiketsNum + "\\t剩余票数:" + --tiketsNum);\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n}\n\n\n# 6.3.2. 多线程安全问题的解决方式二：同步方法\n\n将所要同步的代码放到一个方法中，将方法声明为synchronized同步方法。之后可以在run()方法中调用同步方法。\n\n要点：\n\n 1. 同步方法仍然涉及到同步监视器，只是不需要我们显示的声明。\n 2. 非静态的同步方法，同步监视器是：this。\n 3. 静态的同步方法，同步监视器是：当前类本身。\n\nDemo\n\npackage com.broky.multiThread.safeThread;\n\n/**\n * @author 13roky\n * @date 2021-04-21 22:39\n */\npublic class Window02 {\n    public static void main(String[] args) {\n        Window02Thread ticketsThread02 = new Window02Thread();\n        Thread t1 = new Thread(ticketsThread02);\n        Thread t2 = new Thread(ticketsThread02);\n        Thread t3 = new Thread(ticketsThread02);\n\n        t1.setName("窗口1");\n        t2.setName("窗口2");\n        t3.setName("窗口3");\n\n        t1.start();\n        t2.start();\n        t3.start();\n    }\n}\n\nclass Window02Thread implements Runnable {\n    private int tiketsNum = 100;\n\n    @Override\n    public void run() {\n        while (tiketsNum > 0) {\n            show();\n        }\n    }\n\n    private synchronized void show() { //同步监视器：this\n        if (tiketsNum > 0) {\n            try {\n                //手动让线程进入阻塞,增大安全性发生的概率\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(Thread.currentThread().getName() + ":\\t票号:" + tiketsNum + "\\t剩余票数:" + --tiketsNum);\n        }\n    }\n}\n\n\npackage com.broky.multiThread.safeThread;\n\n/**\n * @author 13roky\n * @date 2021-04-21 22:59\n */\npublic class Window03 {\n    public static void main(String[] args) {\n        Window03Thread t1 = new Window03Thread();\n        Window03Thread t2 = new Window03Thread();\n        Window03Thread t3 = new Window03Thread();\n        t1.setName("窗口1");\n        t2.setName("窗口2");\n        t3.setName("窗口3");\n        t1.setPriority(Thread.MIN_PRIORITY);\n        t3.setPriority(Thread.MAX_PRIORITY);\n        t1.start();\n        t2.start();\n        t3.start();\n    }\n}\n\nclass Window03Thread extends Thread {\n    public static int tiketsNum = 100;\n\n    @Override\n    public void run() {\n        while (tiketsNum > 0) {\n            show();\n        }\n    }\n\n    public static synchronized void show() {//同步监视器：Winddoe03Thread.class  不加static话同步监视器为t1 t2 t3所以错误\n        if (tiketsNum > 0) {\n            try {\n                //手动让线程进入阻塞,增大安全性发生的概率\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(Thread.currentThread().getName() + ":\\t票号:" + tiketsNum + "\\t剩余票数:" + --tiketsNum);\n        }\n    }\n}\n\n\n使用同步解决懒汉模式的线程安全问题\n\npackage com.broky.multiThread.safeThread;\n\n/**\n * @author 13roky\n * @date 2021-04-22 7:24\n */\npublic class BankTest {\n}\n\nclass Bank {\n    private Bank() {\n    }\n\n    private static Bank instance = null;\n\n    public static Bank getInstance() {\n        //方式一：效率性差，每个等待线程都会进入同步代码块\n        //        synchronized (Bank.class) {\n        //            if (instance == null) {\n        //                instance = new Bank();\n        //            }\n        //        }\n\n        //方式二：在同步代码块外层在判断一次，就防止所有线程进入同步代码块。\n        if (instance == null) {\n            synchronized (Bank.class) {\n                if (instance == null) {\n                    instance = new Bank();\n                }\n            }\n        }\n        return instance;\n    }\n}\n\n\n# 6.2.3. 多线程安全问题的解决方式二：Lock锁 -JDK5.0新特性\n\nJDK5.0之后，可以通过实例化ReentrantLock对象，在所需要同步的语句前，调用ReentrantLock对象的lock()方法，实现同步锁，在同步语句结束时，调用unlock()方法结束同步锁\n\nsynchronized和lock的异同：(面试题)\n\n1. Lcok是显式锁（需要手动开启和关闭锁），synchronized是隐式锁，除了作用域自动释放。\n2. Lock只有代码块锁，synchronized有代码块锁和方法锁。\n3. 使用Lcok锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的拓展性（提供更多的子类）\n\n\n建议使用顺序：Lock—》同步代码块（已经进入了方法体，分配了相应的资源）—》同步方法（在方法体之外）\n\nDemo:\n\npackage com.broky.multiThread.safeThread;\n\nimport java.util.concurrent.locks.ReentrantLock;\n\n/**\n * @author 13roky\n * @date 2021-04-22 9:36\n */\npublic class SafeLock {\n    public static void main(String[] args) {\n        SafeLockThread safeLockThread = new SafeLockThread();\n        Thread t1 = new Thread(safeLockThread);\n        Thread t2 = new Thread(safeLockThread);\n        Thread t3 = new Thread(safeLockThread);\n\n        t1.start();\n        t2.start();\n        t3.start();\n    }\n}\n\nclass SafeLockThread implements Runnable{\n    private int tickets = 100;\n    private ReentrantLock lock = new ReentrantLock();\n\n    @Override\n    public void run() {\n        while (tickets>0) {\n            try {\n                //在这里锁住，有点类似同步监视器\n                lock.lock();\n                if (tickets > 0) {\n                    Thread.sleep(100);\n                    System.out.println(Thread.currentThread().getName() + ":\\t票号:" + tickets + "\\t剩余票数:" + --tickets);\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                //操作完成共享数据后在这里解锁\n                lock.unlock();\n            }\n        }\n    }\n}\n\n\n\n\n# 6.3. 线程同步的死锁问题\n\n原理：\n\n不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了死锁。\n\n出现死锁后，并不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续。\n\n使用同步时应避免出现死锁。\n\nJava中死锁最简单的情况：\n\n一个线程T1持有锁L1并且申请获得锁L2，而另一个线程T2持有锁L2并且申请获得锁L1，因为默认的锁申请操作都是阻塞的，所以线程T1和T2永远被阻塞了。导致了死锁。这是最容易理解也是最简单的死锁的形式。但是实际环境中的死锁往往比这个复杂的多。可能会有多个线程形成了一个死锁的环路，比如：线程T1持有锁L1并且申请获得锁L2，而线程T2持有锁L2并且申请获得锁L3，而线程T3持有锁L3并且申请获得锁L1，这样导致了一个锁依赖的环路：T1依赖T2的锁L2，T2依赖T3的锁L3，而T3依赖T1的锁L1。从而导致了死锁。\n\n从这两个例子，我们可以得出结论，产生死锁可能性的最根本原因是：线程在获得一个锁L1的情况下再去申请另外一个锁L2，也就是锁L1想要包含了锁L2，也就是说在获得了锁L1，并且没有释放锁L1的情况下，又去申请获得锁L2，这个是产生死锁的最根本原因。另一个原因是默认的锁申请操作是阻塞的。\n\n死锁的解决方法：\n\n1. 专门的算法、原则。\n2. 尽量减少同步资源的定义。\n3. 尽量避免嵌套同步。\n\n\npackage com.broky.multiThread.safeThread;\n\n/**\n * @author 13roky\n * @date 2021-04-22 8:34\n */\npublic class DeadLock {\n    public static void main(String[] args) {\n        StringBuffer s1 = new StringBuffer();\n        StringBuffer s2 = new StringBuffer();\n\n        new Thread() {\n            public void run() {\n                synchronized (s1) {\n                    s1.append("a");\n                    s2.append("1");\n\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n\n                    synchronized (s2) {\n                        s1.append("b");\n                        s2.append("2");\n\n                        System.out.println(s1);\n                        System.out.println(s2);\n                    }\n                }\n            }\n        }.start();\n\n        new Thread(new Runnable() {\n            public void run() {\n                synchronized (s2) {\n                    s1.append("c");\n                    s2.append("3");\n\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n\n                    synchronized (s1) {\n                        s1.append("d");\n                        s2.append("4");\n\n                        System.out.println(s1);\n                        System.out.println(s2);\n                    }\n                }\n            }\n        }).start();\n    }\n}\n\n\n\n# 7. 线程的通信\n\n很多情况下，尽管我们创建了多个线程，也会出现几乎一个线程执行完所有操作的时候，这时候我们就需要让线程间相互交流。\n\n原理：\n\n当一个线程执行完成其所应该执行的代码后，手动让这个线程进入阻塞状态，这样一来，接下来的操作只能由其他线程来操作。当其他线程执行的开始阶段，再手动让已经阻塞的线程停止阻塞，进入就绪状态，虽说这时候阻塞的线程停止了阻塞，但是由于现在正在运行的线程拿着同步锁，所以停止阻塞的线程也无法立马执行。如此操作就可以完成线程间的通信。\n\n所用的到方法：\n\nwait()：一旦执行此方法，当前线程就会进入阻塞，一旦执行wait()会释放同步监视器。\n\nnotify()：一旦执行此方法，将会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先度最高的。\n\nnotifyAll() ：一旦执行此方法，就会唤醒所有被wait的线程\n\n说明：\n\n这三个方法必须在同步代码块或同步方法中使用。\n\n三个方法的调用者必须是同步代码块或同步方法中的同步监视器。\n\n这三个方法并不时定义在Thread类中的，而是定义在Object类当中的。因为所有的对象都可以作为同步监视器，而这三个方法需要由同步监视器调用，所以任何一个类都要满足，那么只能写在Object类中。\n\nsleep()和wait()的异同：(面试题)\n\n 1. 相同点：两个方法一旦执行，都可以让线程进入阻塞状态。\n\n 2. 不同点：1) 两个方法声明的位置不同：Thread类中声明sleep(),Object类中声明wait()\n    \n    2) 调用要求不同：sleep()可以在任何需要的场景下调用。wait()必须在同步代码块中调用。\n    \n    2) 关于是否释放同步监视器：如果两个方法都使用在同步代码块呵呵同步方法中，sleep不会释放锁，wait会释放锁。\n\nDemo：\n\npackage com.broky.multiThread;\n\n/**\n * @author 13roky\n * @date 2021-04-22 13:29\n */\npublic class Communication {\n    public static void main(String[] args) {\n        CommunicationThread communicationThread = new CommunicationThread();\n        Thread t1 = new Thread(communicationThread);\n        Thread t2 = new Thread(communicationThread);\n        Thread t3 = new Thread(communicationThread);\n\n        t1.start();\n        t2.start();\n        t3.start();\n    }\n}\n\nclass CommunicationThread implements Runnable {\n    int Num = 1;\n\n    @Override\n    public void run() {\n        while (true) {\n            synchronized (this) {\n                notifyAll();\n                if (Num <= 100) {\n                    System.out.println(Thread.currentThread().getName() + ":\\t" + Num);\n                    Num++;\n\n                    try {\n                        wait();\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }else{\n                    break;\n                }\n            }\n\n        }\n    }\n}\n\n\n\n# 8. 练习\n\n * 练习1：\n\n银行有一个账户。\n\n有两个储户分别向同一个账户存3000元，每次存1000，存3次。每次存完打印账户余额。\n\npackage com.broky.multiThread.exer;\n\n/**\n * 练习1\n * 银行有一个账户\n * 有两个储户分别向同一个账户存3000元，每次存1000，存3次。每次存完打印账户余额。\n * 分析：\n * 1.是否有多个线程问题？ 是，有两个储户线程。\n * 2.是否有共享数据？ 是，两个储户向同一个账户存钱\n * 3.是否有线程安全问题： 有\n *\n * @author 13roky\n * @date 2021-04-22 12:38\n */\npublic class AccountTest {\n    public static void main(String[] args) {\n        Account acct = new Account();\n        Customer c1 = new Customer(acct);\n        Customer c2 = new Customer(acct);\n\n        c1.setName("储户1");\n        c2.setName("储户2");\n\n        c1.start();\n        c2.start();\n\n    }\n}\n\nclass Account {\n    private double accountSum;\n\n    public Account() {\n        this.accountSum = 0;\n    }\n\n    public Account(double accountSum) {\n        this.accountSum = accountSum;\n    }\n\n    //存钱\n    public void deppsit(double depositNum) {\n        synchronized (this) {\n            if (depositNum > 0) {\n                accountSum = accountSum + depositNum;\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread().getName() + ": 存钱成功，当前余额为：\\t" + accountSum);\n            }\n        }\n\n    }\n\n}\n\nclass Customer extends Thread {\n    private Account acct;\n\n    public Customer(Account acct) {\n        this.acct = acct;\n    }\n\n    @Override\n    public void run() {\n        for (int i = 0; i < 3; i++) {\n            acct.deppsit(1000);\n        }\n    }\n}\n\n\n * 经典例题：生产者和消费着问题\n\n生产者( Productor)将产品交给店员( Clerk),而消费者( (Customer)从店员处取走产品, 店员一次只能持有固定数量的产品(比如:20),如果生产者试图生产更多的产品,店员会叫生产者停一下,如果店中有空位放产品了再通知生产者继续生产; 如果店中没有产品了,店员会告诉消费者等一下,如果店中有产品了再通知消费者来取走产品。\n\npackage com.broky.multiThread.exer;\n\n/**\n * - 经典例题：生产者和消费着问题\n * 生产者( Productor)将产品交给店员( Clerk),而消费者( (Customer)从店员处取走产品,\n * 店员一次只能持有固定数量的产品(比如:20),如果生产者试图生产更多的产品,店员会叫生产者停一下,\n * 如果店中有空位放产品了再通知生产者继续生产; 如果店中没有产品了,店员会告诉消费者等一下,\n * 如果店中有产品了再通知消费者来取走产品。\n *\n * 分析：\n * 1.是多线程问题，可以假设多个消费这和多个生产者是多线程的\n * 2.存在操作的共享数据，生产和购买时都需要操作经销商的库存存量。\n * 3.处理线程安全问题。\n * 4.三个类：生产者，经销商，消费者。经销商被生产者和消费者共享。生产者读取经销商库存，当库存不够时，生产产品\n * 并发给经销商，操作经销商库存+1。消费者读取经销商库存，当有库存时，方可进行购买，购买完成后，经销商库存-1.\n * @author 13roky\n * @date 2021-04-22 14:36\n */\npublic class ProductTest {\n    public static void main(String[] args) {\n        Clerk clerk = new Clerk();\n        Producer p1 = new Producer(clerk);\n        Producer p2 = new Producer(clerk);\n        p1.setName("生产者1");\n        p2.setName("生产者2");\n\n        Consumer c1 = new Consumer(clerk);\n        Consumer c2 = new Consumer(clerk);\n        c1.setName("消费者1");\n        c2.setName("消费者2");\n\n        p1.start();\n        c1.start();\n    }\n}\n\nclass Clerk {\n    private int productNum;\n\n    public Clerk() {\n        this.productNum = 0;\n    }\n\n    public int getProductNum() {\n        return productNum;\n    }\n\n    public void setProductNum(int productNum) {\n        this.productNum = productNum;\n    }\n}\n\nclass Producer extends Thread {\n    private Clerk clerk;\n\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName() + "开始生产......");\n\n        while(true){\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            produce();\n        }\n    }\n\n    public Producer(Clerk clerk) {\n        if (clerk != null) {\n            this.clerk = clerk;\n        }\n    }\n\n    private void produce() {\n        synchronized (ProductTest.class) {\n            ProductTest.class.notify();\n            if (clerk.getProductNum() < 20) {\n                clerk.setProductNum(clerk.getProductNum() + 1);\n                System.out.println(Thread.currentThread().getName() + ":\\t生产完成第 " + clerk.getProductNum() + " 个产品");\n            }else {\n                try {\n                    ProductTest.class.wait();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n}\n\nclass Consumer extends Thread {\n    private Clerk clerk;\n\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName() + "开始消费......");\n\n        while(true){\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            buy();\n        }\n    }\n\n    public Consumer(Clerk clerk) {\n        if (clerk != null) {\n            this.clerk = clerk;\n        }\n    }\n\n    private void buy(){\n        synchronized (ProductTest.class) {\n            ProductTest.class.notify();\n            if (clerk.getProductNum() > 0) {\n                System.out.println(Thread.currentThread().getName() + ":\\t购买完成第 " + clerk.getProductNum() + " 个产品");\n                clerk.setProductNum(clerk.getProductNum() - 1);\n            }else {\n\n                try {\n                    ProductTest.class.wait();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n',normalizedContent:'# java多线程\n\n\n\n * 1. 基本概念\n * 2. 线程的创建和启动\n   * 2.1. 多线程实现的原理\n   * 2.2.多线程的创建，方式一：继承于thread类\n   * 2.3.多线程的创建，方式一：创建thread匿名子类（也属于方法一）\n   * 2.4. 多线程的创建，方式二：实现runnable接口\n   * 2.5. 多线程的创建，方式三：实现callable接口\n   * 2.6. 多线程的创建，方式四：线程池\n * 3. thread类的常用方法\n * 4. 线程的调度\n   * 4.1. cpu的调度策略\n   * 4.2. java的调度算法：\n * 5. 线程的生命周期\n * 6. 线程的同步\n   * 6.1. 多线程的安全性问题解析\n   * 6.2. 多线程安全性问题的解决\n   * 6.3. 线程同步的死锁问题\n * 7. 线程的通信\n * 8. 练习\n\n\n\n\n# 1. 基本概念\n\n * 程序（program）\n   \n   程序是为完成特定任务、用某种语言编写的一组指令的集合。即指==一段静态的代码==（还没有运行起来），静态对象。\n\n * 进程（process）\n   \n   进程是程序的一次执行过程，也就是说程序运行起来了，加载到了内存中，并占用了cpu的资源。这是一个动态的过程：有自身的产生、存在和消亡的过程，这也是进程的生命周期。\n   \n   ==进程是系统资源分配的单位==，系统在运行时会为每个进程分配不同的内存区域。\n\n * 线程（thread）\n   \n   进程可进一步细化为线程，是一个程序内部的执行路径。\n   \n   若一个进程同一时间并行执行多个线程，那么这个进程就是支持多线程的。\n   \n   ==线程是cpu调度和执行的单位，每个线程拥有独立的运行栈和程序计数器（pc）==，线程切换的开销小。\n   \n   一个进程中的多个线程共享相同的内存单元/内存地址空间——》他们从同一堆中分配对象，可以访问相同的变量和对象。这就使得相乘间通信更简便、搞笑。但索格线程操作共享的系统资源可能就会带来==安全隐患==（隐患为到底哪个线程操作这个数据，可能一个线程正在操作这个数据，有一个线程也来操作了这个数据v）。\n   \n   * 配合jvm内存结构了解（只做了解即可）\n     \n     \n     \n     class文件会通过类加载器加载到内存空间。\n     \n     其中内存区域中每个线程都会有虚拟机栈和程序计数器。\n     \n     每个进程都会有一个方法区和堆，多个线程共享同一进程下的方法区和堆。\n\n * cpu单核和多核的理解\n   \n   单核的cpu是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。同时间段内有多个线程需要cpu去运行时，cpu也只能交替去执行多个线程中的一个线程，但是由于其执行速度特别快，因此感觉不出来。\n   \n   多核的cpu才能更好的发挥多线程的效率。\n   \n   对于java应用程序java.exe来讲，至少会存在三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。如过发生异常时会影响主线程。\n\n * java线程的分类：用户线程 和 守护线程\n   \n   * java的gc()垃圾回收线程就是一个守护线程\n   * 守护线程是用来服务用户线程的，通过在start()方法前调用thread.setdaemon(true)可以吧一个用户线程变成一个守护线程。\n\n * 并行和并发\n   \n   * 并行：多个cpu同时执行多个任务。比如，多个人做不同的事。\n   * 并发：一个cpu（采用时间片）同时执行多个任务。比如，渺少、多个人做同一件事。\n\n * 多线程的优点\n   \n   1. 提高应用程序的响应。堆图像化界面更有意义，可以增强用户体验。\n   2. 提高计算机系cpu的利用率。\n   3. 改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改。\n\n * 何时需要多线程\n   \n   * 程序需要同时执行两个或多个任务。\n   * 程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等。\n   * 需要一些后台运行的程序时。\n\n\n# 2. 线程的创建和启动\n\n\n# 2.1. 多线程实现的原理\n\n * java语言的jvm允许程序运行多个线程，多线程可以通过java中的==java.lang.thread==类来体现。\n * thread类的特性\n   * 每个线程都是通过某个特定的thread对象的run()方法来完成操作的，经常吧run()方法的主体称为线程体。\n   * 通过thread方法的start()方法来启动这个线程，而非直接调用run()。\n\n\n# 2.2.多线程的创建，方式一：继承于thread类\n\n 1. 创建一个继承于thread类的子类。\n 2. 重写thread类的run()方法。\n 3. 创建thread类的子类的对象。\n 4. 通过此对象调用start()来启动一个线程。\n\n**代码实现：**多线程执行同一段代码\n\npackage com.broky.multithread;\n\n/**\n * @author 13roky\n * @date 2021-04-19 21:22\n */\npublic class threadtest extends thread{\n    @override\n    //线程体,启动线程时会运行run()方法中的代码\n    public void run() {\n        //输出100以内的偶数\n        for (int i = 0; i < 100; i++) {\n            if (i % 2 == 0){\n                system.out.println(thread.currentthread().getname()+":\\t"+i);\n            }\n        }\n    }\n\n    public static void main(string[] args) {\n        //创建一个thread类的子类对象\n        threadtest t1 = new threadtest();\n        //通过此对象调用start()启动一个线程\n        t1.start();\n        //注意:已经启动过一次的线程无法再次启动\n        //再创建一个线程\n        threadtest t2 = new threadtest();\n        t2.start();\n\n        //另一种调用方法,此方法并没有给对象命名\n        new threadtest().start();\n\n        system.out.println("主线程");\n    }\n}\n\n\n多线程代码运行图解\n\n\n\n多线程执行多段代码\n\npackage com.broky.multithread.exer;\n\n/**\n * @author 13roky\n * @date 2021-04-19 22:43\n */\npublic class threadexerdemo01 {\n    public static void main(string[] args) {\n        new thread01().start();\n        new thread02().start();\n    }\n}\n\nclass thread01 extends thread {\n    @override\n    public void run() {\n        for (int i = 0; i < 100; i++) {\n            if (i % 2 == 0) system.out.println(thread.currentthread().getname() + ":\\t" + i);\n        }\n    }\n}\n\nclass thread02 extends thread {\n    @override\n    public void run() {\n        for (int i = 0; i < 100; i++) {\n            if (i % 2 != 0) system.out.println(thread.currentthread().getname() + ":\\t" + i);\n        }\n    }\n}\n\n\n\n# 2.3.多线程的创建，方式一：创建thread匿名子类（也属于方法一）\n\npackage com.broky.multithread;\n\n/**\n * @author 13roky\n * @date 2021-04-19 22:53\n */\npublic class anonymoussubclass {\n    public static void main(string[] args) {\n\n        new thread(){\n            @override\n            public void run() {\n                for (int i = 0; i < 100; i++) {\n                    if (i % 2 == 0) system.out.println(thread.currentthread().getname() + ":\\t" + i);\n                }\n            }\n        }.start();\n\n    }\n}\n\n\n\n# 2.4. 多线程的创建，方式二：实现runnable接口\n\n 1. 创建一个实现runnable接口的类。\n 2. 实现类去实现runnable接口中的抽象方法：run()。\n 3. 创建实现类的对象。\n 4. 将此对象作为参数传到thread类的构造器中，创建thread类的对象。\n 5. 通过thread类的对象调用start()方法。\n\npackage com.broky.multithread;\n\n/**\n * @author 13roky\n * @date 2021-04-20 23:16\n */\npublic class runnablethread {\n    public static void main(string[] args) {\n        //创建实现类的对象\n        runnablethread01 runnablethread01 = new runnablethread01();\n        //创建thread类的对象,并将实现类的对象当做参数传入构造器\n        thread t1 = new thread(runnablethread01);\n        //使用thread类的对象去调用thread类的start()方法:①启动了线程 ②thread中的run()调用了runnable中的run()\n        t1.start();\n\n        //在创建一个线程时，只需要new一个thread类就可,不需要new实现类\n        thread t2 = new thread(runnablethread01);\n        t2.start();\n    }\n}\n\n//runnablethread01实现runnable接口的run()抽象方法\nclass runnablethread01 implements runnable {\n    @override\n    public void run() {\n        for (int i = 0; i < 100; i++) {\n            if (i % 2 == 0) system.out.println(thread.currentthread().getname() + ":\\t" + i);\n        }\n    }\n}\n\n\n# 2.4.1. 比较创建线程的两种方式\n\n * java中只允许单进程，以卖票程序tiketsales类来说，很有可能这个类本来就有父类，这样一来就不可以继承thread类来完成多线程了，但是一个类可以实现多个接口，因此==实现的方式没有类的单继承性的局限性==，用实现runnable接口的方式来完成多线程更加实用。\n * 实现runnable接口的方式天然具有共享数据的特性（不用static变量）。因为继承thread的实现方式，需要创建多个子类的对象来进行多线程，如果子类中有变量a，而不使用static约束变量的话，每个子类的对象都会有自己独立的变量a，只有static约束a后，子类的对象才共享变量a。而实现runnable接口的方式，只需要创建一个实现类的对象，要将这个对象传入thread类并创建多个thread类的对象来完成多线程，而这多个thread类对象实际上就是调用一个实现类对象而已。==实现的方式更适合来处理多个线程有共享数据的情况。==\n * 联系：thread类中也实现了runnable接口\n * 相同点两种方式都需要重写run()方法，线程的执行逻辑都在run()方法中\n\n\n# 2.5. 多线程的创建，方式三：实现callable接口\n\n与runnable相比，callable功能更强大\n\n 1. 相比run()方法，可以有返回值\n 2. 方法可以抛出异常\n 3. 支持泛型的返回值\n 4. 需要借助futuretask类，比如获取返回结果\n\npackage com.broky.multithread;\n\nimport java.util.concurrent.callable;\nimport java.util.concurrent.executionexception;\nimport java.util.concurrent.futuretask;\n\n/**\n * 创建线程的方式三：实现callable接口。 ---jdk5新特性\n * 如何理解callable比runnable强大？\n * 1.call()可以有返回值\n * 2.call()可以抛出异常被外面的操作捕获\n * @author 13roky\n * @date 2021-04-22 21:04\n */\n\n//1.创建一个实现callable的实现类\nclass numthread implements callable<integer>{\n    //2.实现call方法，将此线程需要执行的操作声明在call()中\n    @override\n    public integer call() throws exception {\n        int sum = 0;\n        for (int i = 1; i < 100; i++) {\n            if(i%2==0){\n                system.out.println(i);\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}\n\npublic class threadnew {\n    public static void main(string[] args) {\n        //3.创建callable接口实现类的对象\n        numthread numthread = new numthread();\n        //4.将此callable接口实现类的对象作为参数传递到futuretask构造器中，创建futuretask对象\n        futuretask<integer> futuretask = new futuretask(numthread);\n        //5.将futuretask的对象作为参数传递到thread类的构造器中，创建thread对象，并调用start()\n        new thread(futuretask).start();\n\n        try {\n            //6.获取callable中call方法的返回值\n            integer sum = futuretask.get();\n            system.out.println("总和为"+sum);\n        } catch (interruptedexception e) {\n            e.printstacktrace();\n        } catch (executionexception e) {\n            e.printstacktrace();\n        }\n\n    }\n}\n\n\n\n# 2.6. 多线程的创建，方式四：线程池\n\n背景：\n\n经常创建和销毁、使用量特别大的资源、比如并发情况下的线程、对性能影响很大。\n\n思路：\n\n提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。\n\n优点：\n\n提高响应速度（减少了创建新线程的时间）\n\n降低资源消耗（重复利用线程池中线程，不需要每次都创建）\n\n便于线程管理\n\npackage com.broky.multithread;\n\nimport java.util.concurrent.executorservice;\nimport java.util.concurrent.executors;\nimport java.util.concurrent.threadpoolexecutor;\n\n/**\n * 创建线程的方式四：使用线程池\n * <p>\n * 面试题：创建多线程有几种方式\n *\n * @author 13roky\n * @date 2021-04-22 21:49\n */\n\nclass numberthread implements runnable {\n    @override\n    public void run() {\n        for (int i = 0; i < 100; i++) {\n            if (i % 2 == 0) {\n                system.out.println(thread.currentthread().getname() + ":\\t" + i);\n            }\n        }\n    }\n}\n\npublic class threadpool {\n    public static void main(string[] args) {\n\n        //1.提供指定线程数量的线程池\n        executorservice service = executors.newfixedthreadpool(10);\n        threadpoolexecutor service1 = (threadpoolexecutor) service;\n        //设置线程池的属性\n        //        system.out.println(service.getclass());\n        //        service1.setcorepoolsize(15);\n        //        service1.setkeepalivetime();\n\n        //2.执行指定的线程的操作。需要提供实现runnable接口或callable接口实现类的对象。\n        service.execute(new numberthread()); //适合用于runnable\n        //        service.submit(); 适合适用于callable\n        //关闭线程池\n        service.shutdown();\n    }\n}\n\n\n\n# 3. thread类的常用方法\n\n * start() : 启动当前线程, 调用当前线程的run()方法\n * run() : 通常需要重写thread类中的此方法, 将创建的线程要执行的操作声明在此方法中\n * currentthread() : 静态方法, 返回当前代码执行的线程\n * getname() : 获取当前线程的名字\n * setname() : 设置当前线程的名字\n * yield() : 释放当前cpu的执行权\n * join() : 在线程a中调用线程b的join(), 此时线程a进入阻塞状态, 知道线程b完全执行完以后, 线程a才结束阻塞状态\n * stop() : 已过时. 当执行此方法时,强制结束当前线程.\n * sleep(long militime) : 让线程睡眠指定的毫秒数，在指定时间内，线程是阻塞状态\n * isalive() ：判断当前线程是否存活\n\n\n# 4. 线程的调度\n\n\n# 4.1. cpu的调度策略\n\n * **时间片：**cpu正常情况下的调度策略。即cpu分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片，即该进程允许运行的时间，使各个程序从表面上看是同时进行的。如果在时间片结束时进程还在运行，则cpu将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则cpu当即进行切换。而不会造成cpu资源浪费。在宏观上：我们可以同时打开多个应用程序，每个程序并行不悖，同时运行。但在微观上：由于只有一个cpu，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。\n\n * **抢占式：**高优先级的线程抢占cpu。\n\n\n# 4.2. java的调度算法：\n\n * 同优先级线程组成先进先出队列（先到先服务），使用时间片策略。\n * 堆高优先级，使用优先调度的抢占式策略。\n\n线程的优先级等级（一共有10挡）\n\n * max_priority：10\n * min_priority：1\n * norm_priority：5 (默认优先级)\n\n获取和设置当前线程的优先级\n\n * getpriority(); 获取\n * setpriority(int p); 设置\n\n说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有高优先级的线程执行完成以后，低优先级的线程才执行。\n\n\n# 5. 线程的生命周期\n\n * jdk中用thread.state类定义了线程的几种状态\n\n想要实现多线程，必须在主线程中创建新的线程对象。java语言使用thread类及其子类的对象来表示线程，在他的一个完整的生命周期中通常要经历如下的五种状态：\n\n 1. 新建：当一个thread类或其子类的对象被声明并创建时，新的线程对象处于新建状态。\n 2. 就绪：处于新建状态的线程被start()后，将进入线程队列等待cpu时间片，此时它已具备了运行的条件，只是没分配到cpu资源。\n 3. 运行：当就绪的线程被调度并获得cpu资源时，便进入运行状态，run()方法定义了线程的操作和功能。\n 4. 阻塞：在某种特殊情况下，被认为挂起或执行输入输出操作时，让出cpu并临时中止自己的执行，进入阻塞状态。\n 5. 死亡：线程完成了它的全部工作或线程被提前强制性的中止或出现异常倒置导致结束。\n\n\n\n\n# 6. 线程的同步\n\n\n# 6.1. 多线程的安全性问题解析\n\n * 线程的安全问题\n   * 多个线程执行的不确定性硬气执行结果的不稳定性\n   * 多个线程对账本的共享, 会造成操作的不完整性, 会破坏数据.\n   * 多个线程访问共享的数据时可能存在安全性问题\n * 线程的安全问题demo: 卖票过程中出现了重票和错票的情况 (以下多窗口售票demo存在多线程安全问题)\n\npackage com.broky.multithread.safethread;\n\n/**\n * @author 13roky\n * @date 2021-04-21 20:39\n */\npublic class safeticketswindow {\n    public static void main(string[] args) {\n        windowthread ticketsthread02 = new windowthread();\n        thread t1 = new thread(ticketsthread02);\n        thread t2 = new thread(ticketsthread02);\n        thread t3 = new thread(ticketsthread02);\n\n        t1.setname("窗口1");\n        t2.setname("窗口2");\n        t3.setname("窗口3");\n\n        t1.start();\n        t2.start();\n        t3.start();\n    }\n}\n\nclass windowthread implements runnable {\n    private int tiketsnum = 100;\n\n    public void run() {\n        while (true) {\n            if (tiketsnum > 0) {\n                try {\n                    //手动让线程进入阻塞,增大错票概率\n                    thread.sleep(100);\n                } catch (interruptedexception e) {\n                    e.printstacktrace();\n                }\n                system.out.println(thread.currentthread().getname() + ":\\t票号:" + tiketsnum);\n                /*try {\n                    //手动让线程进入阻塞,增大重票的概率\n                    thread.sleep(100);\n                } catch (interruptedexception e) {\n                    e.printstacktrace();\n                }*/\n                tiketsnum--;\n            } else {\n                break;\n            }\n        }\n    }\n}\n\n\n错票分析:\n\n当票数为1的时候，三个线程中有线程被阻塞没有执行票数-1的操作，这是其它线程就会通过if语句的判断，这样一来就会造成多卖了一张票，出现错票的情况。\n\n极端情况为，当票数为1时，三个线程同时判断通过，进入阻塞，然后多执行两侧卖票操作。\n\n\n\n重票分析：\n\n如果t1在输出票号22和票数-1的操作之间被阻塞，这就导致这时候t1卖出了22号票，但是总票数没有减少。在t1被阻塞期间，如果t2运行到输出票号时，那么t2也会输出和t1相同的票号22.\n\n通过以上两种情况可以看出，线程的安全性问题时因为多个线程正在执行代码的过程中，并且尚未完成的时候，其他线程参与进来执行代码所导致的。\n\n\n# 6.2. 多线程安全性问题的解决\n\n原理：\n\n当一个线程在操作共享数据的时候，其他线程不能参与进来。知道这个线程操作完共享数据的时候，其他线程才可以操作。即使当这个线程操作共享数据的时候发生了阻塞，依旧无法改变这种情况。\n\n在java中，我们通过同步机制，来解决线程的安全问题。\n\n\n\n# 6.2.1. 多线程安全问题的解决方式一：同步代码块\n\nsynchronized(同步监视器){需要被同步的代码}\n\n说明：\n\n 1. 操作共享数据（多个线程共同操作的变量）的代码，即为需要被同步的代码。 不能多包涵代码（效率低，如果包到while前面就变成了单线程了），也不能少包含代码\n 2. 共享数据：多个线程共同操作的变量。\n 3. 同步监视器：俗称，锁。任何一个类的对象都可以充当锁。但是所有的线程都必须共用一把锁，共用一个对象。\n\n锁的选择：\n\n 1. 自行创建，共用对象，如下面demo中的object对象。\n\n 2. 使用this表示当前类的对象\n    \n    继承thread的方法中的锁不能使用this代替，因为继承thread实现多线程时，会创建多个子类对象来代表多个线程，这个时候this指的时当前这个类的多个对象，不唯一，无法当作锁。\n    \n    实现runnable接口的方式中，this可以当作锁，因为这种方式只需要创建一个实现类的对象，将实现类的对象传递给多个thread类对象来当作多个线程，this就是这个一个实现类的对象，是唯一的，被所有线程所共用的对象。\n\n 3. 使用类当作锁，以下面demo为例，其中的锁可以写为windowthread.class, 从这里可以得出结论，==类也是一个对象==\n\n优点：同步的方式，解决了线程安全的问题\n\n缺点：操作同步代码时，只能有一个线程参与，其他线程等待。相当于时一个单线程的过程，效率低。\n\ndemo\n\npackage com.broky.multithread.safethread;\n\n/**\n * @author 13roky\n * @date 2021-04-21 20:39\n */\npublic class safeticketswindow {\n    public static void main(string[] args) {\n        windowthread ticketsthread02 = new windowthread();\n        thread t1 = new thread(ticketsthread02);\n        thread t2 = new thread(ticketsthread02);\n        thread t3 = new thread(ticketsthread02);\n\n        t1.setname("窗口1");\n        t2.setname("窗口2");\n        t3.setname("窗口3");\n\n        t1.start();\n        t2.start();\n        t3.start();\n    }\n}\n\nclass windowthread implements runnable {\n    private int tiketsnum = 100;\n    \n    //由于，runnable实现多线程，所有线程共用一个实现类的对象，所以三个线程都共用实现类中的这个object类的对象。\n    object obj = new object();\n    //如果时继承thread类实现多线程，那么需要使用到static object obj = new object();\n    \n    public void run() {\n        \n        //object obj = new object();\n        //如果object对象在run()方法中创建，那么每个线程运行都会生成自己的object类的对象，并不是三个线程的共享对象，所以并没有给加上锁。\n        \n        while (true) {\n            synchronized (obj) {\n                if (tiketsnum > 0) {\n                    try {\n                        //手动让线程进入阻塞,增大安全性发生的概率\n                        thread.sleep(100);\n                    } catch (interruptedexception e) {\n                        e.printstacktrace();\n                    }\n                    system.out.println(thread.currentthread().getname() + ":\\t票号:" + tiketsnum + "\\t剩余票数:" + --tiketsnum);\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n}\n\n\n# 6.3.2. 多线程安全问题的解决方式二：同步方法\n\n将所要同步的代码放到一个方法中，将方法声明为synchronized同步方法。之后可以在run()方法中调用同步方法。\n\n要点：\n\n 1. 同步方法仍然涉及到同步监视器，只是不需要我们显示的声明。\n 2. 非静态的同步方法，同步监视器是：this。\n 3. 静态的同步方法，同步监视器是：当前类本身。\n\ndemo\n\npackage com.broky.multithread.safethread;\n\n/**\n * @author 13roky\n * @date 2021-04-21 22:39\n */\npublic class window02 {\n    public static void main(string[] args) {\n        window02thread ticketsthread02 = new window02thread();\n        thread t1 = new thread(ticketsthread02);\n        thread t2 = new thread(ticketsthread02);\n        thread t3 = new thread(ticketsthread02);\n\n        t1.setname("窗口1");\n        t2.setname("窗口2");\n        t3.setname("窗口3");\n\n        t1.start();\n        t2.start();\n        t3.start();\n    }\n}\n\nclass window02thread implements runnable {\n    private int tiketsnum = 100;\n\n    @override\n    public void run() {\n        while (tiketsnum > 0) {\n            show();\n        }\n    }\n\n    private synchronized void show() { //同步监视器：this\n        if (tiketsnum > 0) {\n            try {\n                //手动让线程进入阻塞,增大安全性发生的概率\n                thread.sleep(100);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            system.out.println(thread.currentthread().getname() + ":\\t票号:" + tiketsnum + "\\t剩余票数:" + --tiketsnum);\n        }\n    }\n}\n\n\npackage com.broky.multithread.safethread;\n\n/**\n * @author 13roky\n * @date 2021-04-21 22:59\n */\npublic class window03 {\n    public static void main(string[] args) {\n        window03thread t1 = new window03thread();\n        window03thread t2 = new window03thread();\n        window03thread t3 = new window03thread();\n        t1.setname("窗口1");\n        t2.setname("窗口2");\n        t3.setname("窗口3");\n        t1.setpriority(thread.min_priority);\n        t3.setpriority(thread.max_priority);\n        t1.start();\n        t2.start();\n        t3.start();\n    }\n}\n\nclass window03thread extends thread {\n    public static int tiketsnum = 100;\n\n    @override\n    public void run() {\n        while (tiketsnum > 0) {\n            show();\n        }\n    }\n\n    public static synchronized void show() {//同步监视器：winddoe03thread.class  不加static话同步监视器为t1 t2 t3所以错误\n        if (tiketsnum > 0) {\n            try {\n                //手动让线程进入阻塞,增大安全性发生的概率\n                thread.sleep(100);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            system.out.println(thread.currentthread().getname() + ":\\t票号:" + tiketsnum + "\\t剩余票数:" + --tiketsnum);\n        }\n    }\n}\n\n\n使用同步解决懒汉模式的线程安全问题\n\npackage com.broky.multithread.safethread;\n\n/**\n * @author 13roky\n * @date 2021-04-22 7:24\n */\npublic class banktest {\n}\n\nclass bank {\n    private bank() {\n    }\n\n    private static bank instance = null;\n\n    public static bank getinstance() {\n        //方式一：效率性差，每个等待线程都会进入同步代码块\n        //        synchronized (bank.class) {\n        //            if (instance == null) {\n        //                instance = new bank();\n        //            }\n        //        }\n\n        //方式二：在同步代码块外层在判断一次，就防止所有线程进入同步代码块。\n        if (instance == null) {\n            synchronized (bank.class) {\n                if (instance == null) {\n                    instance = new bank();\n                }\n            }\n        }\n        return instance;\n    }\n}\n\n\n# 6.2.3. 多线程安全问题的解决方式二：lock锁 -jdk5.0新特性\n\njdk5.0之后，可以通过实例化reentrantlock对象，在所需要同步的语句前，调用reentrantlock对象的lock()方法，实现同步锁，在同步语句结束时，调用unlock()方法结束同步锁\n\nsynchronized和lock的异同：(面试题)\n\n1. lcok是显式锁（需要手动开启和关闭锁），synchronized是隐式锁，除了作用域自动释放。\n2. lock只有代码块锁，synchronized有代码块锁和方法锁。\n3. 使用lcok锁，jvm将花费较少的时间来调度线程，性能更好。并且具有更好的拓展性（提供更多的子类）\n\n\n建议使用顺序：lock—》同步代码块（已经进入了方法体，分配了相应的资源）—》同步方法（在方法体之外）\n\ndemo:\n\npackage com.broky.multithread.safethread;\n\nimport java.util.concurrent.locks.reentrantlock;\n\n/**\n * @author 13roky\n * @date 2021-04-22 9:36\n */\npublic class safelock {\n    public static void main(string[] args) {\n        safelockthread safelockthread = new safelockthread();\n        thread t1 = new thread(safelockthread);\n        thread t2 = new thread(safelockthread);\n        thread t3 = new thread(safelockthread);\n\n        t1.start();\n        t2.start();\n        t3.start();\n    }\n}\n\nclass safelockthread implements runnable{\n    private int tickets = 100;\n    private reentrantlock lock = new reentrantlock();\n\n    @override\n    public void run() {\n        while (tickets>0) {\n            try {\n                //在这里锁住，有点类似同步监视器\n                lock.lock();\n                if (tickets > 0) {\n                    thread.sleep(100);\n                    system.out.println(thread.currentthread().getname() + ":\\t票号:" + tickets + "\\t剩余票数:" + --tickets);\n                }\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            } finally {\n                //操作完成共享数据后在这里解锁\n                lock.unlock();\n            }\n        }\n    }\n}\n\n\n\n\n# 6.3. 线程同步的死锁问题\n\n原理：\n\n不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了死锁。\n\n出现死锁后，并不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续。\n\n使用同步时应避免出现死锁。\n\njava中死锁最简单的情况：\n\n一个线程t1持有锁l1并且申请获得锁l2，而另一个线程t2持有锁l2并且申请获得锁l1，因为默认的锁申请操作都是阻塞的，所以线程t1和t2永远被阻塞了。导致了死锁。这是最容易理解也是最简单的死锁的形式。但是实际环境中的死锁往往比这个复杂的多。可能会有多个线程形成了一个死锁的环路，比如：线程t1持有锁l1并且申请获得锁l2，而线程t2持有锁l2并且申请获得锁l3，而线程t3持有锁l3并且申请获得锁l1，这样导致了一个锁依赖的环路：t1依赖t2的锁l2，t2依赖t3的锁l3，而t3依赖t1的锁l1。从而导致了死锁。\n\n从这两个例子，我们可以得出结论，产生死锁可能性的最根本原因是：线程在获得一个锁l1的情况下再去申请另外一个锁l2，也就是锁l1想要包含了锁l2，也就是说在获得了锁l1，并且没有释放锁l1的情况下，又去申请获得锁l2，这个是产生死锁的最根本原因。另一个原因是默认的锁申请操作是阻塞的。\n\n死锁的解决方法：\n\n1. 专门的算法、原则。\n2. 尽量减少同步资源的定义。\n3. 尽量避免嵌套同步。\n\n\npackage com.broky.multithread.safethread;\n\n/**\n * @author 13roky\n * @date 2021-04-22 8:34\n */\npublic class deadlock {\n    public static void main(string[] args) {\n        stringbuffer s1 = new stringbuffer();\n        stringbuffer s2 = new stringbuffer();\n\n        new thread() {\n            public void run() {\n                synchronized (s1) {\n                    s1.append("a");\n                    s2.append("1");\n\n                    try {\n                        thread.sleep(1000);\n                    } catch (interruptedexception e) {\n                        e.printstacktrace();\n                    }\n\n                    synchronized (s2) {\n                        s1.append("b");\n                        s2.append("2");\n\n                        system.out.println(s1);\n                        system.out.println(s2);\n                    }\n                }\n            }\n        }.start();\n\n        new thread(new runnable() {\n            public void run() {\n                synchronized (s2) {\n                    s1.append("c");\n                    s2.append("3");\n\n                    try {\n                        thread.sleep(1000);\n                    } catch (interruptedexception e) {\n                        e.printstacktrace();\n                    }\n\n                    synchronized (s1) {\n                        s1.append("d");\n                        s2.append("4");\n\n                        system.out.println(s1);\n                        system.out.println(s2);\n                    }\n                }\n            }\n        }).start();\n    }\n}\n\n\n\n# 7. 线程的通信\n\n很多情况下，尽管我们创建了多个线程，也会出现几乎一个线程执行完所有操作的时候，这时候我们就需要让线程间相互交流。\n\n原理：\n\n当一个线程执行完成其所应该执行的代码后，手动让这个线程进入阻塞状态，这样一来，接下来的操作只能由其他线程来操作。当其他线程执行的开始阶段，再手动让已经阻塞的线程停止阻塞，进入就绪状态，虽说这时候阻塞的线程停止了阻塞，但是由于现在正在运行的线程拿着同步锁，所以停止阻塞的线程也无法立马执行。如此操作就可以完成线程间的通信。\n\n所用的到方法：\n\nwait()：一旦执行此方法，当前线程就会进入阻塞，一旦执行wait()会释放同步监视器。\n\nnotify()：一旦执行此方法，将会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先度最高的。\n\nnotifyall() ：一旦执行此方法，就会唤醒所有被wait的线程\n\n说明：\n\n这三个方法必须在同步代码块或同步方法中使用。\n\n三个方法的调用者必须是同步代码块或同步方法中的同步监视器。\n\n这三个方法并不时定义在thread类中的，而是定义在object类当中的。因为所有的对象都可以作为同步监视器，而这三个方法需要由同步监视器调用，所以任何一个类都要满足，那么只能写在object类中。\n\nsleep()和wait()的异同：(面试题)\n\n 1. 相同点：两个方法一旦执行，都可以让线程进入阻塞状态。\n\n 2. 不同点：1) 两个方法声明的位置不同：thread类中声明sleep(),object类中声明wait()\n    \n    2) 调用要求不同：sleep()可以在任何需要的场景下调用。wait()必须在同步代码块中调用。\n    \n    2) 关于是否释放同步监视器：如果两个方法都使用在同步代码块呵呵同步方法中，sleep不会释放锁，wait会释放锁。\n\ndemo：\n\npackage com.broky.multithread;\n\n/**\n * @author 13roky\n * @date 2021-04-22 13:29\n */\npublic class communication {\n    public static void main(string[] args) {\n        communicationthread communicationthread = new communicationthread();\n        thread t1 = new thread(communicationthread);\n        thread t2 = new thread(communicationthread);\n        thread t3 = new thread(communicationthread);\n\n        t1.start();\n        t2.start();\n        t3.start();\n    }\n}\n\nclass communicationthread implements runnable {\n    int num = 1;\n\n    @override\n    public void run() {\n        while (true) {\n            synchronized (this) {\n                notifyall();\n                if (num <= 100) {\n                    system.out.println(thread.currentthread().getname() + ":\\t" + num);\n                    num++;\n\n                    try {\n                        wait();\n                    } catch (interruptedexception e) {\n                        e.printstacktrace();\n                    }\n                }else{\n                    break;\n                }\n            }\n\n        }\n    }\n}\n\n\n\n# 8. 练习\n\n * 练习1：\n\n银行有一个账户。\n\n有两个储户分别向同一个账户存3000元，每次存1000，存3次。每次存完打印账户余额。\n\npackage com.broky.multithread.exer;\n\n/**\n * 练习1\n * 银行有一个账户\n * 有两个储户分别向同一个账户存3000元，每次存1000，存3次。每次存完打印账户余额。\n * 分析：\n * 1.是否有多个线程问题？ 是，有两个储户线程。\n * 2.是否有共享数据？ 是，两个储户向同一个账户存钱\n * 3.是否有线程安全问题： 有\n *\n * @author 13roky\n * @date 2021-04-22 12:38\n */\npublic class accounttest {\n    public static void main(string[] args) {\n        account acct = new account();\n        customer c1 = new customer(acct);\n        customer c2 = new customer(acct);\n\n        c1.setname("储户1");\n        c2.setname("储户2");\n\n        c1.start();\n        c2.start();\n\n    }\n}\n\nclass account {\n    private double accountsum;\n\n    public account() {\n        this.accountsum = 0;\n    }\n\n    public account(double accountsum) {\n        this.accountsum = accountsum;\n    }\n\n    //存钱\n    public void deppsit(double depositnum) {\n        synchronized (this) {\n            if (depositnum > 0) {\n                accountsum = accountsum + depositnum;\n                try {\n                    thread.sleep(1000);\n                } catch (interruptedexception e) {\n                    e.printstacktrace();\n                }\n                system.out.println(thread.currentthread().getname() + ": 存钱成功，当前余额为：\\t" + accountsum);\n            }\n        }\n\n    }\n\n}\n\nclass customer extends thread {\n    private account acct;\n\n    public customer(account acct) {\n        this.acct = acct;\n    }\n\n    @override\n    public void run() {\n        for (int i = 0; i < 3; i++) {\n            acct.deppsit(1000);\n        }\n    }\n}\n\n\n * 经典例题：生产者和消费着问题\n\n生产者( productor)将产品交给店员( clerk),而消费者( (customer)从店员处取走产品, 店员一次只能持有固定数量的产品(比如:20),如果生产者试图生产更多的产品,店员会叫生产者停一下,如果店中有空位放产品了再通知生产者继续生产; 如果店中没有产品了,店员会告诉消费者等一下,如果店中有产品了再通知消费者来取走产品。\n\npackage com.broky.multithread.exer;\n\n/**\n * - 经典例题：生产者和消费着问题\n * 生产者( productor)将产品交给店员( clerk),而消费者( (customer)从店员处取走产品,\n * 店员一次只能持有固定数量的产品(比如:20),如果生产者试图生产更多的产品,店员会叫生产者停一下,\n * 如果店中有空位放产品了再通知生产者继续生产; 如果店中没有产品了,店员会告诉消费者等一下,\n * 如果店中有产品了再通知消费者来取走产品。\n *\n * 分析：\n * 1.是多线程问题，可以假设多个消费这和多个生产者是多线程的\n * 2.存在操作的共享数据，生产和购买时都需要操作经销商的库存存量。\n * 3.处理线程安全问题。\n * 4.三个类：生产者，经销商，消费者。经销商被生产者和消费者共享。生产者读取经销商库存，当库存不够时，生产产品\n * 并发给经销商，操作经销商库存+1。消费者读取经销商库存，当有库存时，方可进行购买，购买完成后，经销商库存-1.\n * @author 13roky\n * @date 2021-04-22 14:36\n */\npublic class producttest {\n    public static void main(string[] args) {\n        clerk clerk = new clerk();\n        producer p1 = new producer(clerk);\n        producer p2 = new producer(clerk);\n        p1.setname("生产者1");\n        p2.setname("生产者2");\n\n        consumer c1 = new consumer(clerk);\n        consumer c2 = new consumer(clerk);\n        c1.setname("消费者1");\n        c2.setname("消费者2");\n\n        p1.start();\n        c1.start();\n    }\n}\n\nclass clerk {\n    private int productnum;\n\n    public clerk() {\n        this.productnum = 0;\n    }\n\n    public int getproductnum() {\n        return productnum;\n    }\n\n    public void setproductnum(int productnum) {\n        this.productnum = productnum;\n    }\n}\n\nclass producer extends thread {\n    private clerk clerk;\n\n    @override\n    public void run() {\n        system.out.println(thread.currentthread().getname() + "开始生产......");\n\n        while(true){\n            try {\n                thread.sleep(500);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            produce();\n        }\n    }\n\n    public producer(clerk clerk) {\n        if (clerk != null) {\n            this.clerk = clerk;\n        }\n    }\n\n    private void produce() {\n        synchronized (producttest.class) {\n            producttest.class.notify();\n            if (clerk.getproductnum() < 20) {\n                clerk.setproductnum(clerk.getproductnum() + 1);\n                system.out.println(thread.currentthread().getname() + ":\\t生产完成第 " + clerk.getproductnum() + " 个产品");\n            }else {\n                try {\n                    producttest.class.wait();\n                } catch (interruptedexception e) {\n                    e.printstacktrace();\n                }\n            }\n        }\n    }\n\n}\n\nclass consumer extends thread {\n    private clerk clerk;\n\n    @override\n    public void run() {\n        system.out.println(thread.currentthread().getname() + "开始消费......");\n\n        while(true){\n            try {\n                thread.sleep(1000);\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            buy();\n        }\n    }\n\n    public consumer(clerk clerk) {\n        if (clerk != null) {\n            this.clerk = clerk;\n        }\n    }\n\n    private void buy(){\n        synchronized (producttest.class) {\n            producttest.class.notify();\n            if (clerk.getproductnum() > 0) {\n                system.out.println(thread.currentthread().getname() + ":\\t购买完成第 " + clerk.getproductnum() + " 个产品");\n                clerk.setproductnum(clerk.getproductnum() - 1);\n            }else {\n\n                try {\n                    producttest.class.wait();\n                } catch (interruptedexception e) {\n                    e.printstacktrace();\n                }\n            }\n        }\n    }\n}\n',charsets:{cjk:!0},rightAnchor:{ignore:["/","/api/"],expand:{default:!1,trigger:"hover"},customClass:"your-customClass",disableGlobalUI:!1,isIgnore:!1}},{title:"Java常用类",frontmatter:{},regularPath:"/JavaDoc/Java%E5%B8%B8%E7%94%A8%E7%B1%BB.html",relativePath:"JavaDoc/Java常用类.md",key:"v-ceb98d3c",path:"/JavaDoc/Java%E5%B8%B8%E7%94%A8%E7%B1%BB.html",headers:[{level:2,title:"1. String类",slug:"_1-string类",normalizedTitle:"1. string类",charIndex:16},{level:3,title:"1.1 String的特性",slug:"_1-1-string的特性",normalizedTitle:"1.1 string的特性",charIndex:32},{level:3,title:"1.2 String字面量赋值的内存理解",slug:"_1-2-string字面量赋值的内存理解",normalizedTitle:"1.2 string字面量赋值的内存理解",charIndex:51},{level:3,title:"1.3 String new方式赋值的内存理解",slug:"_1-3-string-new方式赋值的内存理解",normalizedTitle:"1.3 string new方式赋值的内存理解",charIndex:77},{level:3,title:"1.4 String 拼接字面量和变量的方式赋值",slug:"_1-4-string-拼接字面量和变量的方式赋值",normalizedTitle:"1.4 string 拼接字面量和变量的方式赋值",charIndex:106},{level:3,title:"1.5 String类常用方法",slug:"_1-5-string类常用方法",normalizedTitle:"1.5 string类常用方法",charIndex:136},{level:3,title:"1.6 String与其它类型的转换",slug:"_1-6-string与其它类型的转换",normalizedTitle:"1.6 string与其它类型的转换",charIndex:157},{level:3,title:"1.7 常见算法题目",slug:"_1-7-常见算法题目",normalizedTitle:"1.7 常见算法题目",charIndex:181},{level:2,title:"2. StringBuffer 和 StringBuilder类",slug:"_2-stringbuffer-和-stringbuilder类",normalizedTitle:"2. stringbuffer 和 stringbuilder类",charIndex:195},{level:3,title:"2.1 String、StringBuffer、StringBuilder 三者的异同",slug:"_2-1-string、stringbuffer、stringbuilder-三者的异同",normalizedTitle:"2.1 string、stringbuffer、stringbuilder 三者的异同",charIndex:233},{level:3,title:"2.2 StringBuffer 类的常用方法",slug:"_2-2-stringbuffer-类的常用方法",normalizedTitle:"2.2 stringbuffer 类的常用方法",charIndex:282},{level:3,title:"2.3 String、StringBuffer、StringBuilder 三者的效率",slug:"_2-3-string、stringbuffer、stringbuilder-三者的效率",normalizedTitle:"2.3 string、stringbuffer、stringbuilder 三者的效率",charIndex:311},{level:2,title:"3. JDK8 之前的日期和时间 api 相关类",slug:"_3-jdk8-之前的日期和时间-api-相关类",normalizedTitle:"3. jdk8 之前的日期和时间 api 相关类",charIndex:358},{level:3,title:"3.1 java.lang.System 类",slug:"_3-1-java-lang-system-类",normalizedTitle:"3.1 java.lang.system 类",charIndex:388},{level:3,title:"3.2 java.util.Date 和 java.sql.Date 类",slug:"_3-2-java-util-date-和-java-sql-date-类",normalizedTitle:"3.2 java.util.date 和 java.sql.date 类",charIndex:416},{level:3,title:"3.3 SimpleDateFormat 类",slug:"_3-3-simpledateformat-类",normalizedTitle:"3.3 simpledateformat 类",charIndex:458},{level:3,title:"3.4 Calendar 类",slug:"_3-4-calendar-类",normalizedTitle:"3.4 calendar 类",charIndex:486},{level:3,title:"3.5 JDK8 之前时间日期api的一些问题",slug:"_3-5-jdk8-之前时间日期api的一些问题",normalizedTitle:"3.5 jdk8 之前时间日期api的一些问题",charIndex:506},{level:2,title:"4. JDK8 中新的时间日期 api",slug:"_4-jdk8-中新的时间日期-api",normalizedTitle:"4. jdk8 中新的时间日期 api",charIndex:533},{level:3,title:"4.1 LocalDate、LocalTime、LocalDateTime 类的使用",slug:"_4-1-localdate、localtime、localdatetime-类的使用",normalizedTitle:"4.1 localdate、localtime、localdatetime 类的使用",charIndex:558},{level:3,title:"4.2 Instant 类的使用",slug:"_4-2-instant-类的使用",normalizedTitle:"4.2 instant 类的使用",charIndex:606},{level:3,title:"4.3 DateTimeFormatter 类",slug:"_4-3-datetimeformatter-类",normalizedTitle:"4.3 datetimeformatter 类",charIndex:628},{level:3,title:"4.4 其它API",slug:"_4-4-其它api",normalizedTitle:"4.4 其它api",charIndex:657},{level:2,title:"5. Comparable 和 Comparator 接口",slug:"_5-comparable-和-comparator-接口",normalizedTitle:"5. comparable 和 comparator 接口",charIndex:670},{level:3,title:"5.1 Comparable 接口 自然排序",slug:"_5-1-comparable-接口-自然排序",normalizedTitle:"5.1 comparable 接口 自然排序",charIndex:705},{level:3,title:"5.2 Comparator 接口 定制排序",slug:"_5-2-comparator-接口-定制排序",normalizedTitle:"5.2 comparator 接口 定制排序",charIndex:733},{level:2,title:"6. System 类",slug:"_6-system-类",normalizedTitle:"6. system 类",charIndex:759},{level:2,title:"7. Math类",slug:"_7-math类",normalizedTitle:"7. math类",charIndex:774},{level:2,title:"8. BigInteger 与 BigDecimal 类",slug:"_8-biginteger-与-bigdecimal-类",normalizedTitle:"8. biginteger 与 bigdecimal 类",charIndex:786},{level:3,title:"8.1 BigInteger 类",slug:"_8-1-biginteger-类",normalizedTitle:"8.1 biginteger 类",charIndex:820},{level:3,title:"8.2 BigDecimal 类",slug:"_8-2-bigdecimal-类",normalizedTitle:"8.2 bigdecimal 类",charIndex:842}],headersStr:"1. String类 1.1 String的特性 1.2 String字面量赋值的内存理解 1.3 String new方式赋值的内存理解 1.4 String 拼接字面量和变量的方式赋值 1.5 String类常用方法 1.6 String与其它类型的转换 1.7 常见算法题目 2. StringBuffer 和 StringBuilder类 2.1 String、StringBuffer、StringBuilder 三者的异同 2.2 StringBuffer 类的常用方法 2.3 String、StringBuffer、StringBuilder 三者的效率 3. JDK8 之前的日期和时间 api 相关类 3.1 java.lang.System 类 3.2 java.util.Date 和 java.sql.Date 类 3.3 SimpleDateFormat 类 3.4 Calendar 类 3.5 JDK8 之前时间日期api的一些问题 4. JDK8 中新的时间日期 api 4.1 LocalDate、LocalTime、LocalDateTime 类的使用 4.2 Instant 类的使用 4.3 DateTimeFormatter 类 4.4 其它API 5. Comparable 和 Comparator 接口 5.1 Comparable 接口 自然排序 5.2 Comparator 接口 定制排序 6. System 类 7. Math类 8. BigInteger 与 BigDecimal 类 8.1 BigInteger 类 8.2 BigDecimal 类",content:'# Java常用类\n\n\n\n * 1. String类\n   * 1.1 String的特性\n   * 1.2 String字面量赋值的内存理解\n   * 1.3 String new方式赋值的内存理解\n   * 1.4 String 拼接字面量和变量的方式赋值\n   * 1.5 String类常用方法\n   * 1.6 String与其它类型的转换\n   * 1.7 常见算法题目\n * 2. StringBuffer 和 StringBuilder类\n   * 2.1 String、StringBuffer、StringBuilder 三者的异同\n   * 2.2 StringBuffer 类的常用方法\n   * 2.3 String、StringBuffer、StringBuilder 三者的效率\n * 3. JDK8 之前的日期和时间 api 相关类\n   * 3.1 java.lang.System 类\n   * 3.2 java.util.Date 和 java.sql.Date 类\n   * 3.3 SimpleDateFormat 类\n   * 3.4 Calendar 类\n   * 3.5 JDK8 之前时间日期api的一些问题\n * 4. JDK8 中新的时间日期 api\n   * 4.1 LocalDate、LocalTime、LocalDateTime 类的使用\n   * 4.2 Instant 类的使用\n   * 4.3 DateTimeFormatter 类\n   * 4.4 其它API\n * 5. Comparable 和 Comparator 接口\n   * 5.1 Comparable 接口 自然排序\n   * 5.2 Comparator 接口 定制排序\n * 6. System 类\n * 7. Math类\n * 8. BigInteger 与 BigDecimal 类\n   * 8.1 BigInteger 类\n   * 8.2 BigDecimal 类\n\n\n\n\n# 1. String类\n\n\n# 1.1 String的特性\n\n * **String类：**代表字符串。Java程序中的所有字符串字面值（如“abc”）都作为此类的实例实现。\n\n * String是一个final类，代表==不可变的字符序列==。\n\n * String字符串是常量，用双引号引起来表示。他们的值在创建之后不能更改。\n\n * String对象的找字符内容是存储在一个字符数组value[]中的。（jdk新版本已改为使用byte类型的数组value[]存放）\n\n\n\n\n# 1.2 String字面量赋值的内存理解\n\n字面量赋值是直接在常量池中赋值的\n\nDemo:\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\n/**\n * String 的使用\n *\n * @author 13roky\n * @date 2021-04-24 10:34\n */\npublic class StringTest {\n    /*\n        String:字符串,使用一对""来表示.\n        1.String类是被声明为final的,不可被继承.\n        2.String实现了Serializable接口:标识字符串是支持序列化的. (io流)\n                实现了Comparable接口:可以比较大小.\n        3.String内部定义了final char[] value用于存储字符串数字. final表示数组和其元素不能被修改。(为了节省jvm的内存空间jdk9已经改为byte[]类型数组)\n        4.String:代表不可变的字符序列。简称：不可变性。\n                体现:1.当对字符串重新赋值时,需要重新指定内存区域赋值,不能使用原有的value进行赋值.(因为原有的value是final的)\n                    2.当对现有的字符串进行连接操作时,需要重新指定内存区域赋值,不能使用原有的value赋值.\n                    3.当调用String的replace()方法修改字符或字符串时,也必须重新指定内存区域赋值,不能使用原有的value赋值.\n        5.通过字面量的方式(区别于new)给一个字符串赋值,此时的字符串值生命在字符串常量池中.\n        6.字符串常量池中是不会存储相同内容的字符串的.\n     */\n    @Test\n    public void test01(){\n        //字面量的定义方式, 在内存中用的是同一个内存地址\n        String s1 = "abc";\n        String s2 = "abc";\n        //==比较的是地址值,为true说明s1和s2在内存中指向的是同一个位置\n        System.out.println(s1 == s2);//true\n        \n        s1 = "hello";\n        \n        System.out.println(s1);//hello\n        System.out.println(s2);//abc\n\n        System.out.println("================================================");\n\n        String s3 = "abc";\n        s3 += "def";\n        System.out.println(s3);//abcdef\n        System.out.println(s2);//abc\n\n        System.out.println("================================================");\n\n        String s4 = "adb";\n        String s5 = s4.replace(\'a\',\'m\');\n\n        System.out.println(s4);//abc\n        System.out.println(s5);//mbc\n    }\n}\n\n\n\n图解:\n\n * 由于==字符串常量池中是不会存储相同内容的字符串的==，所以在字符串常量池中s1和s2指向同一个内存地址。\n\n\n\n * 由于String内部定义了final char[] value用于存储字符串数字，final表示数组和其元素不能被修改，其也就有了==不可变的字符序列==的性质。所以改变s1取值为hello后，并不会改变字符串常量池中的对应位置的值，而是会新开辟一个内存地址存放hello值，并且s1指向新的内存地址。\n\n\n\n * 以下图解类似。\n\n\n\n\n\n\n# 1.3 String new方式赋值的内存理解\n\nDemo:\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\n/**\n * String 的使用\n *\n * @author 13roky\n * @date 2021-04-24 10:34\n */\npublic class StringTest {\n    /*\n    String实例化方式测试:\n    方式一: 通过字面量定义的方式\n    方式二: 通过new + 构造器的方式\n\n    面试题：String s = new String("abc);方式创建对象，在内存中创建了几个对象？\n            两个：一个是堆空间中new结构，另一个是char[]对应的常量池中的数据"abc"\n     */\n    @Test\n    public void test2() {\n        //通过字面量定义的方式:此时的s1和s2的数据javaEE生命在方法区中的字符串常量池中.\n        String s1 = "javaEE";\n        String s2 = "javaEE";\n        //通过new + 构造器的方式:此时的s3和s4保存的地址值是数据在堆空间中开辟空间后对应的地址值.\n        String s3 = new String("javaEE");\n        String s4 = new String("javaEE");\n\n        System.out.println(s1 == s2);//true\n        System.out.println(s1 == s3);//false\n        System.out.println(s1 == s4);//false\n        System.out.println(s3 == s4);//false\n        System.out.println(s3.equals(s4));//true\n\n        System.out.println("=================================================");\n\n        Person p1 = new Person("Tom",12);\n        Person p2 = new Person("Tom",12);\n\n        System.out.println(p1.name.equals(p2.name));//true\n        System.out.println(p1.name == p2.name);//true\n    }\n}\n\nclass Person{\n    public String name;\n    public int age;\n\n    public Person(String name,int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n\n\n\n图解:\n\nnew的结构是存在于堆中的，比如 String s3 = new String("javaEE");\n\n\n\n\n# 1.4 String 拼接字面量和变量的方式赋值\n\nDemo：\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\n/**\n * String 的使用\n *\n * @author 13roky\n * @date 2021-04-24 10:34\n */\npublic class StringTest {\n    /*\n    1.常量与常量的拼接结果在常量池。且常量池中不会存在享同内容的常量。\n    2.只要其中有一个是变量，结果就在堆中。\n    3.如果拼接的结果调用intern()方法，返回值就会在常量池中。\n     */\n    @Test\n    public void test03() {\n        String s1 = "javaEE";\n        String s2 = "hadoop";\n        String s3 = "javaEEhadoop";\n        String s4 = "javaEE" + "hadoop";//引号中的为字面量，这里是字面量的拼接\n        String s5 = s1 + "hadoop";\n        String s6 = "javaEE" + s2;\n        String s7 = s1 + s2;\n        final String s8 = "hadoop";\n        String s9 = "javaEE" + s8;\n\n        System.out.println(s3 == s4);//true\n        System.out.println(s3 == s5);//false\n        System.out.println(s3 == s6);//false\n        System.out.println(s3 == s7);//false\n        System.out.println(s5 == s6);//false\n        System.out.println(s5 == s7);//false\n        System.out.println(s6 == s7);//false\n        System.out.println(s3 == s9);//true\n\n        String s10 = s5.intern();//返回值得到的s8使用的常量值中已经存在的”javaEEhadoop“（s5.intern返回的时常量池中对应的内存地址）\n        System.out.println(s3 == s10);//true\n    }    \n}\n\n\n图解：\n\n * 常量与常量的拼接，结果直接保存在常量池中。如String s4 = "javaEE" + "hadoop";,如果常量池中存在“javaEEhadoop”，那么s4直接指向其地址。\n * 只要拼接赋值时，其中有一个是变量，那么结果就会存在于堆中，如String s5 = s1 + "hadoop";,栈中的变量名s5指向堆中对应的地址0x0001，堆中的地址又指向常量池的地址0x1214。\n * s5指向的是堆中的内存地址0x0001，但是方法s5.intern返回的直接是常量池中的地址。所以String s10 = s5.intern();这行代码会让s10直接指向常量池对应的内存地址。\n\n\n\npackage com.broky.commonClass.exer;\n\nimport java.util.Arrays;\n\n/**\n * @author 13roky\n * @date 2021-04-26 7:27\n */\npublic class StringValueChangeEx {\n    String str = new String("good");\n    char[]  ch = {\'t\',\'e\',\'s\',\'t\'};\n\n    public void change(String str,char ch[]){\n        str = "test ok";\n        ch[0] = \'b\';\n    }\n\n    public static void main(String[] args) {\n        StringValueChangeEx test01 = new StringValueChangeEx();\n        test01.change(test01.str, test01.ch);\n        //这里涉及字符串的拼接,所以会用toString方法,而char中的toString返回的是哈希值,所以要用arrays类\n        System.out.println(test01.str + " and " + Arrays.toString(test01.ch));   //good and [C@2f4d3709\n        System.out.println(test01.str); //good\n        System.out.println(test01.ch);  //test\n    }\n}\n\n\n\n# 1.5 String类常用方法\n\n 1.  int Length():返回字符的长度: return value.Length\n 2.  char charAt(int index):返回某索引处的字return vaLue[index]\n 3.  booLean isEmpty():判断是否是空字符牢: return value. Length == 0\n 4.  String toLowercase():使用默认语言环境,将 String中的所有字符转换为小写\n 5.  String toUppercase():使用默认语言环境,将 String中的所有字符转换为大写\n 6.  String trim():返回字符的副本,忽略前导空白和尾部空白\n 7.  boolean equals(Object obj):比较字符的内容是否相同\n 8.  booLean equalsIgnoreCase(String anotherString):与equls方法类似,忽略大小写\n 9.  String concat(string str):将指定字符牢连接到此字符的结尾。等价于用"+"\n 10. int compare To(String anotherstring):比较两个字符的大小\n 11. String substring(int beginIndex):返回一个新的字符,它是此字符的从 beginIndex开始截取到最后一个子字符串.\n 12. String substring(int beginIndex, int endindex):返回一个新字符串,它是此字符从beginIndex开始截取到endIndex(不包含)的一个子字符串.\n\nDemo:\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Locale;\n\n/**\n * @author 13roky\n * @date 2021-04-26 21:47\n */\npublic class CommonMethod {\n    /*\n    int Length():返回字符的长度: return value.Length\n    char charAt( nt index):返回某索引处的字return vaLue[index]\n    booLean isEmpty():判断是否是空字符牢: return value. Length == 0\n    String toLowercase():使用默认语言环境,将 String中的所有字符转换为小写\n    String toUppercase():使用默认语言环境,将 String中的所有字符转换为大写\n    String trim():返园字符的副本,忽略前导空白和尾部空白\n    boolean equals(Object obj):比较字符的内容是否相同\n    booLean equalsIgnoreCase(String anotherString):与equls方法类似,忽略大小写\n    String concat(string str):将指定字符牢连接到此字符的结尾。等价于用"+"\n    int compare To(String anotherstring):比较两个字符的大小\n    String substring(int beginIndex):返回一个新的字符,它是此字符的从 beginIndex开始截取到最后一个子字符串.\n    String substring(int beginIndex, int endindex):返回一个新字符串,它是此字符从beginIndex开始截取到endIndex(不包含)的一个子字符串.\n     */\n    @Test\n    public void test01(){\n        String s1 ="HelloWorld";\n        System.out.println(s1.length());\n        System.out.println(s1.charAt(0));\n        System.out.println(s1.charAt(9));\n        System.out.println(s1.isEmpty());\n\n        String s2 = s1.toLowerCase();\n        System.out.println(s1);\n        System.out.println(s2);\n\n        String s3 = "    he  llo    world    ";\n        String s4 = s3.trim();\n        System.out.println(s3);\n        System.out.println(s4);\n    }\n\n    @Test\n    public void test02(){\n        String s1 = "HelloWorld";\n        String s2 = "helloworld";\n        System.out.println(s1.equals(s2));\n        System.out.println(s1.equalsIgnoreCase(s2));\n\n        String s3 = "abc";\n        String s4 = "def".concat(s3);\n        System.out.println(s4);\n\n        String s5 = "abc";\n        String s6 = new String("abd");\n        System.out.println(s5.compareTo(s6));\n\n        String s7 = "13roky学Java";\n        String s8 = s7.substring(2,6);\n        System.out.println(s7);\n        System.out.println(s8);\n    }\n}\n\n\n 13. boolean endsWith(String suffix):测试此字符串是否以指定的后缀结束\n 14. boolean startsWith(String prefix):测试此字符串是否以指定的前缀开始\n 15. boolean startsWith(String prefix, int toffset):测试此字符串从指定索引开始的子字符串是否以指定的前缀开始\n 16. boolean contains(CharSequence s):当且仅当此字符串包含指定的char值序列时,返回true\n 17. int indexOf(String str): 返回指定子字符串在此字符串中第一次出现处的索引\n 18. int indexOf(String str,int fromIndex):返回指定子字符串在此字符串中第一次出现处的索引,从指定的索引处开始\n 19. int lastIndexOf(String str):返回指定子字符串在此字符串中最右边出现处的索引\n 20. int lastIndexOf(String str,int fromIndex):返回指定子字符串在此字符串中最后一次出现处的索引,从指定的索引开始反向搜索(从右往左搜索)indexOf和lastindexOf方法如果未找到,返回结果都是-1\n\nDemo:\n\npackage com.broky.commonClass;\n\nimport jdk.jfr.DataAmount;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Locale;\n\n/**\n * @author 13roky\n * @date 2021-04-26 21:47\n */\npublic class CommonMethod {\n    /*\n    boolean endsWith(String suffix):测试此字符串是否以指定的后缀结束\n    boolean startsWith(String prefix):测试此字符串是否以指定的前缀开始\n    boolean startsWith(String prefix, int toffset):测试此字符串从指定索引开始的子字符串是否以指定的前缀开始\n\n    boolean contains(CharSequence s):当且仅当此字符串包含指定的char值序列时,返回true\n    int indexOf(String str): 返回指定子字符串在此字符串中第一次出现处的索引\n    int indexOf(String str,int fromIndex):返回指定子字符串在此字符串中第一次出现处的索引,从指定的索引处开始\n    int lastIndexOf(String str):返回指定子字符串在此字符串中最右边出现处的索引\n    int lastIndexOf(String str,int fromIndex):返回指定子字符串在此字符串中最后一次出现处的索引,从指定的索引开始反向搜索(从右往左搜索)\n    indexOf和lastindexOf方法如果未找到,返回结果都是-1\n    */\n    @Test\n    public void test03(){\n        String str1 = "helloworld";\n        boolean b1 = str1.endsWith("rld");\n        System.out.println(b1);\n\n        boolean b2 = str1.startsWith("He");\n        System.out.println(b2);\n\n        boolean b3 =str1.startsWith("ll",2);\n        System.out.println(b3);\n\n        String str2 = "wo";\n        System.out.println(str1.contains(str2));\n\n        System.out.println(str1.indexOf("lol"));\n        System.out.println(str1.indexOf("l"));\n        System.out.println(str1.indexOf("lo", 5));\n\n        String str3 = "hellorworld";\n        System.out.println(str3.lastIndexOf("or"));\n        System.out.println(str3.lastIndexOf("or",6));\n    }\n    //什么情况下,indexOf(str)和lastIndexOf(str)返回值相同?\n    //情况一:存在唯一的一个str.\n    //情况二:不存在str\n}\n\n\n 21. 替换: String replace(char oldChar,char newChar):返回一个新的字符串,它是通过用newChar替换oldChar String replace(CharSequence target,CharSequence replacement):使用字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串. String replaceAll(String regex,String replacement):使用给定的replacement替换此字符串多有匹配给定的正则表达式的子字符串 String replaceFirst(String regex,String replacement):使用给定的replacement替换此字符串匹配给定的正则表达式的第一个子字符串.\n 22. 匹配: boolean matches(String regex):告知此字符串是否匹配给定得正则表达式\n 23. 切片: String[] split(String regex):根据给定的正则表达式的匹配拆分此字符串 String[] split(String regex,int limit):根据匹配给定的正则表达式来分此字符串,最多不超过limit个,如果超出,剩下的全部都放到最后一个元素\n\nDemo:\n\npackage com.broky.commonClass;\n\nimport jdk.jfr.DataAmount;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Locale;\n\n/**\n * @author 13roky\n * @date 2021-04-26 21:47\n */\npublic class CommonMethod {\n    /*\n    替换\n    String replace(char oldChar,char newChar):返回一个新的字符串,它是通过用newChar替换oldChar\n    String replace(CharSequence target,CharSequence replacement):使用字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串.\n    String replaceAll(String regex,String replacement):使用给定的replacement替换此字符串多有匹配给定的正则表达式的子字符串\n    String replaceFirst(String regex,String replacement):使用给定的replacement替换此字符串匹配给定的正则表达式的第一个子字符串.\n    匹配:\n    boolean matches(String regex):告知此字符串是否匹配给定得正则表达式\n    切片:\n    String[] split(String regex):根据给定的正则表达式的匹配拆分此字符串\n    String[] split(String regex,int limit):根据匹配给定的正则表达式来分此字符串,最多不超过limit个,如果超出,剩下的全部都放到最后一个元素\n     */\n    @Test\n    public void test04(){\n        String str1 = "13roky学Java";\n        String str2 = str1.replace(\'学\',\'写\');\n\n        System.out.println(str1);\n        System.out.println(str2);\n\n        String str3 = str1.replace("13roky", "geek");\n        System.out.println(str3);\n\n        System.out.println("=====================================================");\n        String str = "123klnjklsdnafdmc123pojasvapos";\n        String string = str.replace("\\\\d+",",").replaceAll("^,|,$","|");\n        System.out.println(string);\n\n        str = "12345";\n        //判断str字符串中是否全部有数字组成,即有1-n个数字组成\n        boolean matches = str.matches("\\\\d+");\n        System.out.println(matches);\n        String tel = "0571-4534289";\n        //判断一个电话是否是杭州的\n        boolean result = tel.matches("0571-\\\\d{7,8}");\n        System.out.println(result);\n\n        System.out.println("================================================");\n        str = "hello|world|java";\n        String[] strs = str.split("\\\\|");\n\n        for (int i = 0; i < strs.length; i++) {\n            System.out.println(strs[i]);\n        }\n        System.out.println();\n        str2 = "hello.world.java";\n        String[] strs2 = str2.split("\\\\|");\n        for (int i = 0; i < strs2.length; i++) {\n            System.out.println(strs2[i]);\n        }\n    }\n}\n\n\n\n# 1.6 String与其它类型的转换\n\ndemo：\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.Arrays;\n\n/**\n * String类与其他结构之间的转换\n * String 与 char[] 之间的转换\n * String 与 byte[] 之间的转换\n *\n * @author 13roky\n * @date 2021-05-02 19:33\n */\npublic class StringChange {\n    /*\n    复习：String与其他数据类型，包装类之间的转换\n    String --\x3e 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)\n    基本数据类型、包装类 ——》String：调用String重载的valueOf(xxx) 或者直接拼接“”\n     */\n    @Test\n    public void test(){\n        String str = "123";\n        //int num = (int) str;   只有子父类的关系才可以使用强制类型转换\n\n        int num = Integer.parseInt(str);\n\n        String str2 = String.valueOf(num);\n        String str3 = num + "";\n    }\n\n    /*\n    String 与 char[] 之间的转换\n\n    String --\x3e char[] ：String类中的toCharArray()方法\n    char[] --\x3e String ：String的构造器\n     */\n    @Test\n    public void test02(){\n        String str = "abcde";\n\n        char[] c1 = str.toCharArray();\n\n        for (int i = 0; i < c1.length; i++) {\n            System.out.println(c1[i]);\n        }\n\n        char[] c2 = new char[]{\'f\',\'s\',\'c\',\'a\'};\n\n        String str2 = new String(c2);\n        System.out.println(str2);\n    }\n\n    /*\n    String 与 byte[] 之间的转换\n    编码：String --\x3e byte[] ：调用String的getBytes()\n    解码：\n\n    转化的时候会涉及编码和解码\n    编码：字符串 --\x3e 字节 （看得懂转换为看不懂的二进制数据）\n    解码 字节 --\x3e 字符串 （看不懂的二进制数据转换为看得懂）\n\n     */\n    @Test\n    public void test03() throws UnsupportedEncodingException {\n        String str = "abc123此方";\n        // 使用ide默认的编码集进行转换\n        byte[]  b1 = str.getBytes();\n        // 字节byte类型 采用ASCLL编码 由于ASCLL中没有中文编码，所以中文会转为默认的编码如（UTF-8，UTF-8中一个汉字占三位）然后再转为ASCLL\n        System.out.println(Arrays.toString(b1));\n        // 使用 gbk 字符集进行编码，需要处理异常\n        byte[] b2 = str.getBytes("gbk");\n\n        System.out.println(Arrays.toString(b2));\n        System.out.println("=======================================");\n        // 使用ide默认的编码集进行解码\n        String str2 = new String(b1);\n        System.out.println(str2);\n        // 出现乱码。原因：编码及和解码集不一致倒置的\n        String str3 = new String(b2);\n        System.out.println(str3);\n\n        // 指定编码集\n        String str4 = new String(b2, "gbk");\n        System.out.println(str4);\n    }\n}\n\n\n\n# 1.7 常见算法题目\n\n 1. 模拟一个trim方法，去除字符串两端的空格。\n 2. 将一个字符串进行反转。将字符串中间指定部分进行反转。比如“abcdefg”反转为“abfedcg”。\n 3. 获取一个字符串在另一个字符串中出现的次数。\n 4. 获取两个字符串中最大的相同字符串。\n 5. 将字符串中字符进行自然顺序排序。Arrays.sort()\n\npackage com.broky.commonClass.exer;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.nio.CharBuffer;\nimport java.util.Arrays;\nimport java.util.Objects;\n\n/**\n * 四道常见String算法题目\n * 1. 模拟一个 trim 方法，去除字符串两端的空格。\n *\n * @author 13roky\n * @date 2021-05-08 10:06\n */\npublic class Algorithms {\n    @Test\n    public void testMyTrim() {\n        String s1 = "   123   ";\n        s1.trim();\n        s1 = myTrim(s1);\n        System.out.println(s1);\n    }\n\n    // 模拟一个 trim 方法，去除字符串两端的空格。\n    public String myTrim(String str) {\n        if (str != null) {\n            int start = 0;// 用于记录从前往后首次索引位置不是空格的位置的索引\n            int end = str.length() - 1;// 用于记录从后往前首次索引位置不是空格的位置的索引\n\n            while (start < end && str.charAt(start) == \' \') {\n                start++;\n            }\n\n            while (start < end && str.charAt(end) == \' \') {\n                end--;\n            }\n            if (str.charAt(start) == \' \') {\n                return "";\n            }\n\n            return str.substring(start, end + 1);\n        }\n        return null;\n    }\n\n    @Test\n    public void testMyReverse() {\n        System.out.println(myReverse01("abcdefg", 2, 5));\n        System.out.println(myReverse02("abcdefg", 2, 5));\n        System.out.println(myReverse03("abcdefg", 2, 5));\n    }\n\n    /*\n    将一个字符串进行反转。将字符串中指定部分进行反转。比如“abcdefg”反转为“abfedcg”\n     */\n    // 方式一：转换为char[]\n    public String myReverse01(String str, int start, int end) {\n        if (str != null) {\n            char[] chars = str.toCharArray();\n            char tmp = 0;\n            for (int s = start, e = end; s < e; s++, e--) {\n                tmp = chars[s];\n                chars[s] = chars[e];\n                chars[e] = tmp;\n            }\n            return new String(chars);\n        }\n        return null;\n    }\n\n    // 方式二：使用String的拼接\n    public String myReverse02(String str, int start, int end) {\n        if (str != null) {\n            String partOne = str.substring(0, start);\n            String parThree = str.substring(end + 1);\n            for (int i = end; i >= start; i--) {\n                partOne += str.charAt(i);\n            }\n            partOne += parThree;\n            return partOne;\n        }\n        return null;\n    }\n\n    // 方式三：使用StringBuffer 或 StringBuilder 替换String\n    public String myReverse03(String str, int start, int end) {\n        StringBuilder builder = new StringBuilder(str.length());\n        builder.append(str.substring(0, start));\n        for (int i = end; i >= start; i--) {\n            builder.append(str.charAt(i));\n        }\n        builder.append(str.substring(end + 1));\n        return String.valueOf(builder);\n    }\n\n    /*\n    获取一个字符串在另一个字符串中出现的次数。\n    如：获取 "ab" 在 “abkkcakabkebfkabkskab” 出现的次数\n     */\n    @Test\n    public void testGetCount() {\n        getCount01("ab", "abkkcakabkebfkabkskab");\n        getCount02("ab", "abkkcakabkebfkabkskab");\n    }\n    // 方法一：\n    public int getCount01(String mainStr, String subStr) {\n        int n = 0;\n        for (int i = 0; i < subStr.length() - mainStr.length() + 1; i++) {\n            if (mainStr.charAt(0) == subStr.charAt(i)) {\n                if (mainStr.equals(subStr.substring(i, i + mainStr.length()))) {\n                    n++;\n                }\n            }\n        }\n        System.out.println(n);\n        return n;\n    }\n    // 方法二：\n    public int getCount02(String mainStr, String subStr) {\n        int count = 0;\n        int index = 0;\n        if (subStr.length() >= mainStr.length()) {\n//            while ((index = subStr.indexOf(mainStr)) != -1) {\n//                count++;\n//                subStr = subStr.substring(index + mainStr.length());\n//            }\n            // 改进\n            while ((index = subStr.indexOf(mainStr,index)) != -1) {\n                count++;\n                index += mainStr.length();\n            }\n            System.out.println(count);\n            return count;\n        } else {\n            return 0;\n        }\n    }\n}\n\n\n\n# 2. StringBuffer 和 StringBuilder类\n\n\n# 2.1 String、StringBuffer、StringBuilder 三者的异同\n\n * String：不可变的字符序列，底层使用char[]进行存储\n * StringBuffer：可变的字符序列，线程安全的，效率低，底层使用char[]进行存储\n * StringBuilder：可变的字符序列，线程不安全的，效率高，jdk5.0新特性，底层使用char[]进行存储\n\n源码分析：\n\n * String： String str = new String(); // 底层代码为 char[] value = new char[0]; String str1 = new String("abc"); // 底层代码为 char[] value = new char[]{\'a\',\'b\',\'c\'};\n * StringBuffer: String sb1 = new StringBuffer(); // char[] value = new char[16];底层创建了一个长度是16的数组 sb1.append(\'a\'); // value[0] = \'a\'; sb1.append(\'b\'); // value[1] = \'b\';\n * 问题：\n   1. System.out.println(sb1.length()); 返回的是有的值count，而不是底层开辟的空间value.length.\n   2. 扩容问题，如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。默认情况下，扩容为原来容量的2倍+2（源码中采用了位运算<<），同时将原有数组中的元素复制到新数组中。\n * 总结：\n   1. 开发中尽量不要用String，String不可变，效率最差，每次都会新造。而StringBuufer和StringBuilder只有长度不够用的时候才去扩容并复制。\n   2. 开发中如果知道会频繁使用append时，建议使用StringBuffer的指定容量的构造器，避免之后进行扩容。\n\n\n# 2.2 StringBuffer 类的常用方法\n\n * StringBuffer append(xx):提供了很多的 append()方法,用于进行字符拼接\n * StringBuffer delete( int start, int end):删除指定位置的内容，本身发生改变，并返回值。\n * StringBuffer replace( int start, int end, String str):把 start,end)位置替换为str\n * StringBuffer insert( int offset,xxx):在指定位置插入xxx\n * StringBuffer reverse():把当前字符序列逆转\n * public int indexof(string str)\n * pubLic String substring (int start, int end) 返回一个从Start开始到End结束的左闭右开区间的子字符串，本身值并未变化\n * public int Length\n * public char charAt(int n)\n * public void setcharAt (int n, char ch)\n * 总结： 增：append(xx) 删：delete( int start, int end) 改：setCharAt(int n,char ch) / replace( int start, int end, String str) 查：charAt(int n) 插：insert( int offset,xxx) 长度：Length() 遍历：for() + charAt() / toString()\n * 方法链的原理：s1.append().append().append(); s1调用完append后返回的依旧是s1，可以继续调用append\n\npackage com.broky.commonClass.exer;\n\nimport org.junit.jupiter.api.Test;\n\n/**\n * StringBuffer 的常用方法\n *\n * @author 13roky\n * @date 2021-05-07 13:27\n */\npublic class StringBufferMethod {\n\n    @Test\n    public void test(){\n        StringBuffer s1 = new StringBuffer("abc");\n        s1.append(1);\n        s1.append("234");\n        System.out.println(s1.delete(2, 4));\n        System.out.println(s1);\n        System.out.println(s1.replace(2, 4, "hello"));\n        System.out.println(s1.reverse());\n\n    }\n}\n\n\n关于append方法\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\npublic class StringBufferBuilderTest {\n   \n    @Test\n    public void test2(){\n        String str = null;\n        StringBuffer sb = new StringBuffer();\n        //StringBuffer 的 append 方法会将null值转换为字符“null”加入\n        sb.append(str);\n\n        System.out.println(sb.length());//4\n\n        System.out.println(sb);//"null"\n\n        StringBuffer sb2 = new StringBuffer(str);\n        System.out.println(sb2);\n    }\n}\n\n\n\n# 2.3 String、StringBuffer、StringBuilder 三者的效率\n\n**效率：**StringBuilder > StringBuffer > String\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\n    /**\n     * String StringBuffer StringBuilder 效率测试\n     */\n    @Test\n    public void timeTest() {\n        long startTime = 0L;\n        long endTime = 0L;\n        String text = "";\n        StringBuffer buffer = new StringBuffer("");\n        StringBuilder builder = new StringBuilder("");\n\n        startTime = System.currentTimeMillis();\n        for (int i = 0; i < 20000; i++) {\n            buffer.append(String.valueOf(i));\n        }\n        endTime = System.currentTimeMillis();\n        System.out.println("StringBuffer 执行时间" + (endTime - startTime));\n\n        startTime = System.currentTimeMillis();\n        for (int i = 0; i < 20000; i++) {\n            builder.append(String.valueOf(i));\n        }\n        endTime = System.currentTimeMillis();\n        System.out.println("StringBuilder 执行时间" + (endTime - startTime));\n\n        startTime = System.currentTimeMillis();\n        for (int i = 0; i < 20000; i++) {\n            text = text + String.valueOf(i);\n        }\n        endTime = System.currentTimeMillis();\n        System.out.println("String 执行时间" + (endTime - startTime));\n\n    }\n}\n\n\n\n# 3. JDK8 之前的日期和时间 api 相关类\n\n\n# 3.1 java.lang.System 类\n\nSystem 类提供的 public static long currentTimeMillis() 用来返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。\n\n\n# 3.2 java.util.Date 和 java.sql.Date 类\n\n 1. 两个构造器的使用\n    \n    > 构造器一：Date()：创建一个对应当前时间的Date对象 构造器二：创建指定毫秒数的Date对象\n\n 2. 两个方法的使用\n    \n    > toString()：显示当前的年、月、日、时、分、秒 getTime()：获取当前Date对象对应的毫秒数。（时间戳）\n\n 3. java.sql.Date 对应这数据库中的日期类型的变量\n    \n    > 实例化 将 sql.date 转换 util.date: 多态直接赋值 将 util.date 转换 sql.date: 通过共同的getTime()时间戳实现\n\nDemo：\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Date;\n\n/**\n *  JDK8 之前的日期和时间的 api 测试\n *\n * @author 13roky\n * @date 2021-05-08 9:15\n */\npublic class DateTimeTest {\n\n    /*\n    System类提供的 public static long currentTimeMillis()\n    用来返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。\n     */\n    @Test\n    public void test() {\n        long time = System.currentTimeMillis();\n        System.out.println(time);\n    }\n\n    /*\n    java.util.Date 类\n            |---java.sql.Date 类 数据库\n    1. 两个构造器的使用\n        > 构造器一：Date()：创建一个对应当前时间的Date对象\n        > 构造器二：创建指定毫秒数的Date对象\n    2. 两个方法的使用\n        > toString()：显示当前的年、月、日、时、分、秒\n        > getTime()：获取当前Date对象对应的毫秒数。（时间戳）\n\n    3. java.sql.Date 对应这数据库中的日期类型的变量\n        > 实例化\n        > 将 sql.date 转换 util.date: 多态直接赋值\n        > 将 util.date 转换 sql.date: 通过共同的getTime()时间戳实现\n     */\n\n    @Test\n    public void test02() {\n        // 构造器一：Date()：创建一个对应当前时间的Date对象\n        Date date1 = new Date();\n        System.out.println(date1.toString());\n        System.out.println(date1.getTime());\n\n        // 构造器二：创建指定毫秒数的Date对象\n        Date date2 = new Date(1620437519431L);\n\n        java.sql.Date date3 = new java.sql.Date(1620437519431L);\n        System.out.println(date3);\n\n        // 将 util.date 转换 sql.date:\n        // 情况一\n        Date date4 = new java.sql.Date(1620437519431L);\n        java.sql.Date date5 = (java.sql.Date) date4;\n        // 情况二\n        Date date6 = new Date();\n        java.sql.Date date7 = new java.sql.Date(date6.getTime());\n\n        /*\n        当new的是父类的时候，如果强转为子类，那么编译时不会报错，运行时会报错，因为new的父类缺少子类特有的属性和方法\n        当new的是子类的时候，但是赋给了父类，这时候是可以强转成子类的，如情况一\n         */\n\n    }\n}\n\n\n注意：\n\n使用Data的构造器，设置时间会存在 偏移量 的问题\n\nDemo：\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Date;\n\n/**\n * JDK8 之前的日期和时间的 api 测试\n *\n * @author 13roky\n * @date 2021-05-08 9:15\n */\npublic class DateTimeTest {\n\n    // Date中的偏移量\n    @Test\n    public void test01() {\n        /*\n        由于构造方法存在一个偏移量，年份是从1990年开始，月份是从0开始所以构造时应该减去偏移量\n         */\n        Date date1 = new Date(2020, 9, 8);\n        System.out.println(date1);  // Fri Oct 08 00:00:00 CST 3920\n        date1 = new Date(2020 - 1900, 9 - 1, 8);\n        System.out.println(date1);  // Tue Sep 08 00:00:00 CST 2020\n    }\n}\n\n\n\n# 3.3 SimpleDateFormat 类\n\nSimpleDateFormat 是用来 格式化 Date 类中 时间格式的 和 对格式进行解析成 Date 的类\n\n可以使用默认格式，也可以自定义格式。\n\n 1. 两个操作 1.1 格式化：日期 ---\x3e 字符串 1.2 解析：格式化的逆过程，字符串 ---\x3e 日期\n 2. SimpleDateFormat 的实例化\n\nDemo\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * jdk 8 之前的日期时间的API测试\n * 1. System类中currentTimeMillis();\n * 2. java.util.Date 和 子类 java.sql.Date\n * 3. SimpleDateFormat\n * 4. Calendar\n *\n * @author 13roky\n * @date 2021-05-09 12:53\n */\npublic class DateTimeTest2 {\n    /*\n    SimpleDateFormat 的使用：SimpleDateFormat对日期 Date 类的格式化和解析\n\n    1. 两个操作\n    1.1 格式化：日期 ---\x3e 字符串\n    1.2 解析：格式化的逆过程，字符串 ---\x3e 日期\n\n    2. SimpleDateFormat 的实例化\n     */\n    @Test\n    public void testSimpleDateFormat() throws ParseException {\n        // 实例化SimpleDateFormat:使用默认的构造器\n        SimpleDateFormat sdf = new SimpleDateFormat();\n\n        // 格式化：日期 ---\x3e 字符串\n        Date date = new Date();\n        System.out.println(date);\n\n        String format = sdf.format(date);\n        System.out.println(format);\n\n        // 解析： 格式化的逆过程，字符串 ---\x3e 日期\n        String str = "2021/5/9 下午1:04";\n        Date date1 = null;\n\n        date1 = sdf.parse(str);\n\n        System.out.println(date1);\n\n        //*********************************\n        // SimpleDateFormat sdf1 = new SimpleDateFormat("yyyyy.MMMMM.dd GGG hh:mm aaa");\n        SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");\n        String format1 = sdf1.format(date);\n        System.out.println(format1);\n\n        Date date2 = sdf1.parse("2021-05-09 01:09:56");\n        System.out.println(date2);\n\n    }\n}\n\n\n练习:\n\n 1. 字符串“2020-02-23”转化为java.sql.Date\n 2. 三天打鱼两天晒网 1990-01-01 视频分析：P482480.尚硅谷_常用类-SimpleDateFormat的课后练习2\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n    @Test\n    public void testEx01() throws ParseException {\n        //练习一：字符串“2020-02-23”转化为java.sql.Date\n        String str ="2020-02-23";\n        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");\n\n        Date date = sdf.parse(str);\n        System.out.println(date);\n\n        java.sql.Date sqlDate = new java.sql.Date(date.getTime());\n\n        System.out.println(sqlDate);\n    }\n\n    @Test\n    public void testEx02() throws ParseException {\n        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");\n        Date startDate = sdf.parse("1990-01-01");\n\n        long oneDay = sdf.parse("1990-01-02").getTime() - startDate.getTime();\n        long period = oneDay * 5;\n        //        long now = sdf.parse(sdf.format(new Date())).getTime() - startDate.getTime();\n        long now = sdf.parse("1990-01-06").getTime() - startDate.getTime() + oneDay;\n\n        if (now % period > 3 * oneDay || now % period == 0) {\n            System.out.println("晒网");\n        } else {\n            System.out.println("打鱼");\n        }\n\n    }\n}\n\n\n\n# 3.4 Calendar 类\n\n * calendar类是一个抽象类，是可变的\n\ndemo\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\n\n/**\n * jdk 8 之前的日期时间的API测试\n * 1. System类中currentTimeMillis();\n * 2. java.util.Date 和 子类 java.sql.Date\n * 3. SimpleDateFormat\n * 4. Calendar\n *\n * @author 13roky\n * @date 2021-05-09 12:53\n */\npublic class DateTimeTest2 {\n    \n     /*\n        Calendar 日历类（抽象类）的使用\n     */\n    @Test\n    public void testCalendar(){\n        // 1. 实例化\n        // 方式一： 创建其子类 （GregorianCalendar）的对象\n        // 方式二：调用其静态方法getInstance()\n        // 两种创建方法本质上一样\n        Calendar calendar = Calendar.getInstance();\n        System.out.println(calendar.getClass());\n\n        // 2.常用方法\n        //get()\n        int days = calendar.get(Calendar.DAY_OF_MONTH);\n        System.out.println(days);\n\n        //set()\n        calendar.set(Calendar.DAY_OF_MONTH,22);\n        days = calendar.get(Calendar.DAY_OF_MONTH);\n        System.out.println(days);\n\n        //add()\n        calendar.add(Calendar.DAY_OF_MONTH,-3);\n        days = calendar.get(Calendar.DAY_OF_MONTH);\n        System.out.println(days);\n\n        //getTime(): 日历类--\x3eDate\n        Date date = calendar.getTime();\n        System.out.println(date);\n\n        //setTime(): Date---\x3e日历类\n        Date date1 = new Date();\n        calendar.setTime(date1);\n        days = calendar.get(Calendar.DAY_OF_MONTH);\n        System.out.println(days);\n    }\n}\n\n\n注意\n\n * 获取月份时：一月是0，二月是1，以此类推12月是11\n * 获取星期时：周日是1，周二是2.。。。周六是7\n\n\n# 3.5 JDK8 之前时间日期api的一些问题\n\n如果我们可以跟别人说:“我们在1502643933071见晚了!”那么就再简单不过了。但是我们希望时间与量夜和四季有关,于是事情就变复杂了。JDK10中包含了个 java util. Date类,但是它的大多数方法已经在JDK11引入 Calendar类之后被弃用而 Calendar并不比Date好多少。它们面临的问题是：\n\n**可变性: **像日期和时间这样的类应该是不可变的。\n\n**偏移性: **Date中的年份是从1900开始的,而月份都从0开始。\n\n格式化: 格式化只对Date有用, Calendar则不行\n\n此外,它们也不是线程安全的;不能处理闰秒等。\n\n因此我们需要引入 以下 新的时间日期api来处理这些问题。\n\n\n# 4. JDK8 中新的时间日期 api\n\n * 第三次引入的API是成功的，并且Java8中引入的 java. time API 已经纠正了过去的缺陷，将来很长一段时间内它都会为我们服务。\n * Java8 吸收了Joda-Time的精华，以一个新的开始为Java创建优秀的AP新的 java. time中包含了所有关于本地日期( LocalDate)、本地时间( LocalTime)、本地日期时间( LocalDate Time)、**时区( Zoned Date Time)和持续时间( Duration)**的类。历史悠久的Date类新增了 tolnstant()方法，用于把Date转换成新的表示形式。这些新增的本地化时间口期 API 大大简化了日期时间和本地化的管理。\n * 在JDK8 之前joda-time是作为jar包的形式导入项目使用的，在jdk8 的时候官方将其引入.\n\n\n# 4.1 LocalDate、LocalTime、LocalDateTime 类的使用\n\n实例化：\n\n * 实例化方式一：使用静态方法 now() / now(zoneld zone) 获取当前的日期时间\n * 实例化方式二：使用静态方法 of()自定义时间，无 Date 中偏移量的问题\n\n方法 :\n\n * now() / now(zoneld zone)\n\n * of()\n\n * getXxx() 获取相关属性\n\n * withXxxx() 设置相关属性\n\n * plusXxx() 在现有基础上加上指定数据\n\n * minusXxx() 在现有基础上减去指定数据\n\n说明 :\n\n * 三个类都具有不可变性\n * LocalDateTime 相较于 LocalDate , LocalTime 使用频率更高\n * 类似于 jdk8 之前的 Calendar 类\n\nDemo：\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\n\n/**\n * jdk 8 中的时间日期 api\n *\n * @author 13roky\n * @date 2021-05-10 7:05\n */\npublic class JDK8DateTimeTest {\n\n    /*\n    LocalDate、LocalTime、LocalDateTime 类的使用:\n\n     */\n\n    @Test\n    public void test01(){\n        // 实例化方式一：使用静态方法 now() / now(zoneld zone) 获取当前的日期时间\n        LocalDateTime localDateTime = LocalDateTime.now();\n        LocalDate localDate = LocalDate.now();\n        LocalTime localTime = LocalTime.now();\n\n        System.out.println(localDateTime);\n        System.out.println(localDate);\n        System.out.println(localTime);\n\n        // 实例化方式二：of() 可以自定义时间，无 Date 中偏移量的问题\n\n        LocalDateTime localDateTime1 = LocalDateTime.of(2020, 10, 1, 4, 23, 43);\n        System.out.println(localDateTime1);\n\n        // getXxx() 获取相关属性\n        System.out.println(localDateTime.getDayOfMonth());\n        System.out.println(localDateTime.getDayOfWeek());\n        System.out.println(localDateTime.getMonth());\n        System.out.println(localDateTime.getMonthValue());\n        System.out.println(localDateTime.getMinute());\n\n        // withXxxx() 设置相关属性， 具有不可变性\n        LocalDate localDate1 = localDate.withDayOfMonth(20);\n        System.out.println(localDate1);\n\n        LocalDateTime localDateTime2 = localDateTime.withHour(16);\n        System.out.println(localDateTime);\n        System.out.println(localDateTime2);\n\n        //plusXxx() 在现有基础上加上指定数据\n        LocalDateTime localDateTime3 = localDateTime.plusMonths(3);\n        System.out.println(localDateTime);\n        System.out.println(localDateTime3);\n\n        // minusXxx() 在现有基础上减去指定数据\n        LocalDateTime localDateTime4 = localDateTime.minusMonths(3);\n        System.out.println(localDateTime);\n        System.out.println(localDateTime4);\n    }\n}\n\n\n\n# 4.2 Instant 类的使用\n\n>  * Instant : 时间线上的瞬时点. 这可能被用来记录应用程序中的事件时间戳.\n\n方法 :\n\n * now() 静态方法, 返回 UTC 时区的 Instant 类对象\n * atOffset() 添加 默认时区 与 当前需要时区 的 时间 的 偏移量\n * toEpochMilli() 获取 1970年1月1日0时0分0秒 (UTC) 开始的毫秒数\n * ofEpochMilli() 静态方法, 通过给定的毫秒数获取 Instant 的实例\n\nDemo :\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.time.*;\n\n/**\n * jdk 8 中的时间日期 api\n *\n * @author 13roky\n * @date 2021-05-10 7:05\n */\npublic class JDK8DateTimeTest {\n\n    /*\n    Instant 的使用\n     */\n\n    @Test\n    public void test02() {\n        // now : 获取本初子午线的时间\n        Instant instant = Instant.now(); //格林威治时间\n        System.out.println(instant);\n\n        // 添加 默认时区 与 当前需要时区 的 时间 的 偏移量\n        OffsetDateTime offsetDateTime = instant.atOffset(ZoneOffset.ofHours(8));\n        System.out.println(offsetDateTime);\n\n        // 获取 1970年1月1日0时0分0秒 (UTC) 开始的毫秒数\n        long milli = instant.toEpochMilli();\n        System.out.println(milli);\n        \n        // ofEpochMilli 通过给定的毫秒数获取 Instant 的实例\n        Instant instant1 = Instant.ofEpochMilli(1620783200875L);\n        System.out.println(instant1);\n    }\n}\n\n\n\n# 4.3 DateTimeFormatter 类\n\n> 用于格式化和解析 LocalDate、LocalTime、LocalDateTime\n> \n> 类似于 SimpleDateFormat\n\n格式化方式 :\n\n 1. 预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME;\n 2. 本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG);\n 3. 自定义的格式。如：ofPattern("yyyy-MM-dd hh:mm:ss E");\n\n解析方式 :\n\n 1. parse() 方法\n\nDemo :\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.time.*;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.FormatStyle;\nimport java.time.temporal.TemporalAccessor;\n\n/**\n * jdk 8 中的时间日期 api\n *\n * @author 13roky\n * @date 2021-05-10 7:05\n */\npublic class JDK8DateTimeTest {\n\n    /*\n    DateTimeFormatter:格式化或解析日期、时间\n    类似于SimpleDateFormat\n     */\n\n    @Test\n    public void test03() {\n        // 方式一：预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME;\n        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n        LocalDateTime localDateTime = LocalDateTime.now();\n        System.out.println(localDateTime);\n        String s = formatter.format(localDateTime);\n        System.out.println(s);\n        // 因为使用标准格式进行格式化，所以 localDateTime 格式化前后的值基本没有变化，但是类型变变为了 String\n        // 解析：字符串--\x3e日期\n        TemporalAccessor parse = formatter.parse("2021-05-12T20:48:52.1539765");\n        System.out.println(parse);\n\n        // 方式二：\n        // 本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG);\n        // FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDateTime\n        DateTimeFormatter formatter1 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);\n        String s1 = formatter1.format(localDateTime);\n        System.out.println(s1);\n\n        // 本地化相关的格式。如：ofLocalizedDate()\n        // FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDateTime\n        DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL);\n        String s2 = formatter2.format(LocalDate.now());\n        System.out.println(s2);\n\n        /*\n        可能会报错 ： java.time.DateTimeException: Unable to extract ZoneId from temporal\n        参考：https://stackoverflow.com/questions/59531046/java-time-datetimeexception-unable-to-extract-zoneid-from-temporal\n         */\n\n        // 方式三：自定义的格式。如：ofPattern("yyyy-MM-dd hh:mm:ss E");\n        DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern("yyyy-MM-dd hh:mm:ss");\n        String s3 = formatter3.format(localDateTime);\n        System.out.println(s3);\n\n        // 解析\n        TemporalAccessor parse1 = formatter3.parse("2021-05-12 09:24:47");\n        System.out.println(parse1);\n    }\n}\n\n\n\n# 4.4 其它API\n\n * **ZoneId：**该类中包含了所有的时区信息，一个时区的ID，如 Europe/Paris\n * ZonedDateTime：一个在ISO-8601日历系统时区的日期时间，如 2007-12- 03T10:15:30+01:00 Europe/Paris。\n * 其中每个时区都对应着ID，地区ID都为“{区域}/{城市}”的格式，例如： Asia/Shanghai等\n * Clock：使用时区提供对当前即时、日期和时间的访问的时钟。\n * 持续时间：Duration，用于计算两个“时间”间隔\n * 日期间隔：Period，用于计算两个“日期”间隔\n * TemporalAdjuster : 时间校正器。有时我们可能需要获取例如：将日期调整 到“下一个工作日”等操作。\n * TemporalAdjusters : 该类通过静态方法 (firstDayOfXxx()/lastDayOfXxx()/nextXxx())提供了大量的常用 TemporalAdjuster 的实现。\n\n\n# 5. Comparable 和 Comparator 接口\n\n\n# 5.1 Comparable 接口 自然排序\n\n> 用于对象与对象的比较, Comparable属于自然排序\n\n说明：\n\nJava中的对象, 正常情况下, 只能进行比较:==或!= 不能使用>或<\n\n但是在开发场景中, 我们需要对多个对象进行排序, 言外之意, 就需要比较对象的大小\n\n使用两个接口中的任何一个来实现: Comparable 或 Comparator\n\nComparable 接口的使用举例 :\n\n 1. 像 String, 包装类等实现了 Comparable 接口, 重写了 compareTo(obj) 方法, 给出了比较两个对象\n 2. 像 String, 包装类重写了compareTo()方法以后, 进行了从小到大的排列\n 3. 重写 compareTo(obj) 的规则: 如果当前对象 this 等于形参对象 obj, 则返回为零 如果当前对象 this 小于形参对象 obj, 则返回负整数 如果当前对象 this 大于形参对象 obj, 则返回正整数\n 4. 对于自定义类来说, 如果需要排序, 我们可以让自定义类实现 Comparable 接口, 重写 compareTo(obj) 方法并在 compareTO(obj) 方法中指明如何排序\n\nDemo：\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\n\n/**\n * 1) 说明: Java中的对象, 正常情况下, 只能进行比较:==或!= 不能使用>或<\n *          但是在开发场景中, 我们需要对多个对象进行排序, 言外之意, 就需要比较对象的大小\n *          如何实现? 使用两个接口中的任何一个: Comparable 或 Comparator\n * 2) Comparable 接口的使用\n *\n * @author 13roky\n * @date 2021-05-12 22:15\n */\npublic class CompareTest {\n    /*\n    Comparable 接口的使用举例: 自然排序\n    1. 像 String, 包装类等实现了 Comparable 接口, 重写了 compareTo(obj) 方法, 给出了比较两个对象\n    2. 像 String, 包装类重写了compareTo()方法以后,进行了从小到大的排列\n    3. 重写 compareTo(obj) 的规则:\n        如果当前对象 this 等于形参对象 obj, 则返回为零\n        如果当前对象 this 小于形参对象 obj, 则返回负整数\n        如果当前对象 this 大于形参对象 obj, 则返回正整数\n    4. 对于自定义类来说, 如果需要排序, 我们可以让自定义类实现 Comparable 接口, 重写compareTo(obj) 方法\n        在 compareTO(obj) 方法中知名如何排序\n     */\n    @Test\n    public void test01(){\n        String[] arr = new String[]{"aa","cc","kk","mm","gg","jj","dd"};\n        Arrays.sort(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n\n    @Test\n    public void test02() {\n        Goods[] arr = new Goods[4];\n        arr[0] = new Goods("lenovoMouse",34);\n        arr[1] = new Goods("dellMouse",43);\n        arr[2] = new Goods("xiaomiMouse",12);\n        arr[3] = new Goods("huaweiMouse",65);\n        arr[3] = new Goods("MicroSoftiMouse",12);\n\t\t\n        // 根据arr所对应类的CompareTo方法排序\n        Arrays.sort(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n\n}\n\n\npackage com.broky.commonClass;\n\n/**\n * 商品类 实现Comparable方法\n *\n * @author 13roky\n * @date 2021-05-12 22:42\n */\npublic class Goods implements Comparable {\n    private String name;\n    private double price;\n\n    public Goods() {\n    }\n\n    public Goods(String name, double price) {\n        this.name = name;\n        this.price = price;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    @Override\n    public String toString() {\n        return "Goods{" + "name=\'" + name + \'\\\'\' + ", price=" + price + \'}\';\n    }\n\n    // 指明商品比较大小的方式：按照价格从低到高排序，再按照产品名称从第到高排序\n    @Override\n    public int compareTo(Object o) {\n        if (o instanceof Goods) {\n            // 方式一\n            Goods goods = (Goods) o;\n            if (this.price > goods.price) {\n                return 1;\n            } else if (this.price < goods.price) {\n                return -1;\n            } else {\n                // 字符串类型的本身就有 compareTo 方法\n                return this.name.compareTo(goods.name);\n                // return -this.name.compareTo(goods.name); 加了负号变成了从高到低排\n            }\n            // 方式二\n            //return Double.compare(this.price,goods.price);\n\n        }\n        throw new RuntimeException("传入的数据类型不一致");\n    }\n}\n\n\n\n# 5.2 Comparator 接口 定制排序\n\n> 根据定制的规则进行比较, Comparator属于定制排序\n> \n> 当元素的类型没有实现java.lang.Comparable 接口而又不方便修改代码，或者实现了java.lang.Comparable 接口的排序规则不适合当前的操作, 那么可以使用 Compare(obj o1,obj o2)方法, 比较o1和o2的大小\n\n说明 :\n\n 1. 当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码， 或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序，强行对多个对象进行整体排序的比较。\n\n使用 :\n\n 1. 在 Arrays.sort() 方法中使用匿名内部类的方法实现定制排序 (详情见Demo)\n\n**Comparable 接口与 Comparator 的使用的对比 : **\n\n 1. Comparable 接口的方式一旦实现,保证 Comparable 接口实现类的对象在任何位置都可以比较大小\n\n 2. Comparator 接口属于临时性的比较.\n\nDemo :\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\n\n/**\n * 1) 说明: Java中的对象, 正常情况下, 只能进行比较:==或!= 不能使用>或<\n *          但是在开发场景中, 我们需要对多个对象进行排序, 言外之意, 就需要比较对象的大小\n *          如何实现? 使用两个接口中的任何一个: Comparable 或 Comparator\n * 2) Comparable 接口与 Comparator 的使用的对比\n *          Comparable 接口的方式一旦实现,保证 Comparable 接口实现类的对象在任何位置都可以比较大小\n *          Comparator 接口属于临时性的比较.\n *\n * @author 13roky\n * @date 2021-05-12 22:15\n */\npublic class CompareTest {\n    \n    /*\n    Comparator 接口的使用： 定制排序\n    1. 背景\n    当元素的类型没有实现java.lang.Comparable 接口而又不方便修改代码，\n    或者实现了java.lang.Comparable 接口的排序规则不适合当前的操作\n    那么可以使用 Compare(obj o1,obj o2)方法, 比较o1和o2的大小\n    2. 重写 Compare(obj o1,obj o2) 方法, 比较o1和o2的大小\n    如果方法返回正数,则表示o1大于o2\n    如果方法返回负数,则表示01小于02\n    如果方法返回0, 则表示相等\n     */\n    @Test\n    public void test03(){\n        // test1\n        String[] arr = new String[]{"aa","cc","kk","mm","gg","jj","dd"};\n        // 从大到小排序\n        Arrays.sort(arr, new Comparator() {\n            @Override\n            public int compare(Object o1, Object o2) {\n                if(o1 instanceof String && o2 instanceof String){\n                    String s1 = (String) o1;\n                    String s2 = (String) o2;\n                    return -s1.compareTo(s2);\n                }\n                throw new RuntimeException("输入的类型不一致");\n            }\n        });\n\n        System.out.println(Arrays.toString(arr));\n\n    }\n\n    @Test\n    public void test04() {\n\n        Goods[] arr = new Goods[5];\n        arr[0] = new Goods("lenovoMouse",34);\n        arr[1] = new Goods("huaweiMouse",43);\n        arr[2] = new Goods("xiaomiMouse",12);\n        arr[3] = new Goods("huaweiMouse",65);\n        arr[4] = new Goods("microSoftiMouse",12);\n\n        Arrays.sort(arr,new Comparator(){\n            // 指明商品比较大小的方式：再按照产品名称从第到高排序, 按照价格从高到低排序\n            @Override\n            public int compare(Object o1, Object o2) {\n                if (o1 instanceof Goods && o2 instanceof Goods){\n                    Goods g1 = (Goods) o1;\n                    Goods g2 = (Goods) o2;\n                    if (g1.getName().equals(g2.getName())){\n                        return -Double.compare(g1.getPrice(),g2.getPrice());\n                    }else {\n                        return g1.getName().compareTo(g2.getName());\n                    }\n                }\n                throw new RuntimeException("输入的数据类型不一致");\n            }\n        });\n\n        System.out.println(Arrays.toString(arr));\n    }\n}\n\n\n\n# 6. System 类\n\n> System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。 该类位于java.lang包。\n> \n> 由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实 例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便 的进行调用。\n> \n>  成员方法  native long currentTimeMillis()： 该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时 间和GMT时间(格林威治时间)1970年1月1号0时0分0秒所差的毫秒数。  void exit(int status)： 该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表 异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。\n\n成员变量 ：\n\n * System类内部包含in、out和err三个成员变量，分别代表标准输入流 (键盘输入)，标准输出流(显示器)和标准错误输出流(显示器)。\n\n成员方法 :\n\n * native long currentTimeMillis()： 该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时 间和GMT时间(格林威治时间)1970年1月1号0时0分0秒所差的毫秒数。\n * void exit(int status)： 该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表 异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。\n * void gc()： 该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则 取决于系统中垃圾回收算法的实现以及系统执行时的情况。\n * String getProperty(String key)： 该方法的作用是获得系统中属性名为key的属性对应的值。系统中常见 的属性名以及属性的作用如下表所示：\n\n\n\n\n# 7. Math类\n\n> java.lang.Math提供了一系列静态方法用于科学计算。\n> \n> 其方法的参数和返回 值类型一般为double型。\n\n方法 :\n\n * abs 绝对值\n * acos,asin,atan,cos,sin,tan 三角函数\n * sqrt 平方根\n * pow(double a,doble b) a的b次幂\n * log 自然对数\n * exp e为底指数\n * max(double a,double b)\n * min(double a,double b)\n * random() 返回0.0到1.0的随机数\n * long round(double a) double型数据a转换为long型（四舍五入）\n * toDegrees(double angrad) 弧度—>角度\n * toRadians(double angdeg) 角度—>弧度\n\n\n# 8. BigInteger 与 BigDecimal 类\n\n> 用于操作较大的整数\n\n\n# 8.1 BigInteger 类\n\n> 类似于整形\n\n说明 :\n\n 1. Integer类作为int的包装类，能存储的最大整型值为2 31-1，Long类也是有限的， 最大为2 63-1。如果要表示再大的整数，不管是基本数据类型还是他们的包装类 都无能为力，更不用说进行运算了。\n 2. **java.math包的BigInteger可以表示不可变的任意精度的整数。**BigInteger 提供 所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。 另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、 位操作以及一些其他操作。\n\n构造器 :\n\n * BigInteger(String val)：根据字符串构建 BigInteger 对象\n\n常用方法 :\n\npublic BigInteger abs()：返回此 BigInteger 的绝对值的 BigInteger。\n\nBigInteger add(BigInteger val) ：返回其值为 (this + val) 的 BigInteger\n\nBigInteger subtract(BigInteger val) ：返回其值为 (this - val) 的 BigInteger\n\nBigInteger multiply(BigInteger val) ：返回其值为 (this * val) 的 BigInteger\n\nBigInteger divide(BigInteger val) ：返回其值为 (this / val) 的 BigInteger。整数 相除只保留整数部分。\n\nBigInteger remainder(BigInteger val) ：返回其值为 (this % val) 的 BigInteger。\n\nBigInteger[] divideAndRemainder(BigInteger val)：返回包含 (this / val) 后跟 (this % val) 的两个 BigInteger 的数组。\n\nBigInteger pow(int exponent) ：返回其值为 (thisexponent) 的 BigInteger。\n\n\n# 8.2 BigDecimal 类\n\n> 类似于浮点型\n\n说明 :\n\n 1. 一般的Float类和Double类可以用来做科学计算或工程计算，但在商业计算中， 要求数字精度比较高，故用到java.math.BigDecimal类。\n 2. BigDecimal 类支持不可变的、任意精度的有符号十进制定点数。\n\n构造器 :\n\n * public BigDecimal(double val)\n\n * public BigDecimal(String val)\n\n常用方法 :\n\npublic BigDecimal add(BigDecimal augend)\n\npublic BigDecimal subtract(BigDecimal subtrahend)\n\npublic BigDecimal multiply(BigDecimal multiplicand)\n\npublic BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)\n\nDemo :\n\npackage com.broky.commonClass;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\n/**\n * @author 13roky\n * @date 2021-05-13 12:56\n */\npublic class OtherClassTest {\n    \n    @Test\n    public void testBigInteger() {\n        BigInteger bi = new BigInteger("12433241123");\n        BigDecimal bd = new BigDecimal("12435.351");\n        BigDecimal bd2 = new BigDecimal("11");\n        System.out.println(bi);\n        // BigDecimal.ROUND_HALF_UP 四舍五入\n        System.out.println(bd.divide(bd2, BigDecimal.ROUND_HALF_UP));\n        System.out.println(bd.divide(bd2, 15, BigDecimal.ROUND_HALF_UP));\n    }\n\n}\n',normalizedContent:'# java常用类\n\n\n\n * 1. string类\n   * 1.1 string的特性\n   * 1.2 string字面量赋值的内存理解\n   * 1.3 string new方式赋值的内存理解\n   * 1.4 string 拼接字面量和变量的方式赋值\n   * 1.5 string类常用方法\n   * 1.6 string与其它类型的转换\n   * 1.7 常见算法题目\n * 2. stringbuffer 和 stringbuilder类\n   * 2.1 string、stringbuffer、stringbuilder 三者的异同\n   * 2.2 stringbuffer 类的常用方法\n   * 2.3 string、stringbuffer、stringbuilder 三者的效率\n * 3. jdk8 之前的日期和时间 api 相关类\n   * 3.1 java.lang.system 类\n   * 3.2 java.util.date 和 java.sql.date 类\n   * 3.3 simpledateformat 类\n   * 3.4 calendar 类\n   * 3.5 jdk8 之前时间日期api的一些问题\n * 4. jdk8 中新的时间日期 api\n   * 4.1 localdate、localtime、localdatetime 类的使用\n   * 4.2 instant 类的使用\n   * 4.3 datetimeformatter 类\n   * 4.4 其它api\n * 5. comparable 和 comparator 接口\n   * 5.1 comparable 接口 自然排序\n   * 5.2 comparator 接口 定制排序\n * 6. system 类\n * 7. math类\n * 8. biginteger 与 bigdecimal 类\n   * 8.1 biginteger 类\n   * 8.2 bigdecimal 类\n\n\n\n\n# 1. string类\n\n\n# 1.1 string的特性\n\n * **string类：**代表字符串。java程序中的所有字符串字面值（如“abc”）都作为此类的实例实现。\n\n * string是一个final类，代表==不可变的字符序列==。\n\n * string字符串是常量，用双引号引起来表示。他们的值在创建之后不能更改。\n\n * string对象的找字符内容是存储在一个字符数组value[]中的。（jdk新版本已改为使用byte类型的数组value[]存放）\n\n\n\n\n# 1.2 string字面量赋值的内存理解\n\n字面量赋值是直接在常量池中赋值的\n\ndemo:\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\n/**\n * string 的使用\n *\n * @author 13roky\n * @date 2021-04-24 10:34\n */\npublic class stringtest {\n    /*\n        string:字符串,使用一对""来表示.\n        1.string类是被声明为final的,不可被继承.\n        2.string实现了serializable接口:标识字符串是支持序列化的. (io流)\n                实现了comparable接口:可以比较大小.\n        3.string内部定义了final char[] value用于存储字符串数字. final表示数组和其元素不能被修改。(为了节省jvm的内存空间jdk9已经改为byte[]类型数组)\n        4.string:代表不可变的字符序列。简称：不可变性。\n                体现:1.当对字符串重新赋值时,需要重新指定内存区域赋值,不能使用原有的value进行赋值.(因为原有的value是final的)\n                    2.当对现有的字符串进行连接操作时,需要重新指定内存区域赋值,不能使用原有的value赋值.\n                    3.当调用string的replace()方法修改字符或字符串时,也必须重新指定内存区域赋值,不能使用原有的value赋值.\n        5.通过字面量的方式(区别于new)给一个字符串赋值,此时的字符串值生命在字符串常量池中.\n        6.字符串常量池中是不会存储相同内容的字符串的.\n     */\n    @test\n    public void test01(){\n        //字面量的定义方式, 在内存中用的是同一个内存地址\n        string s1 = "abc";\n        string s2 = "abc";\n        //==比较的是地址值,为true说明s1和s2在内存中指向的是同一个位置\n        system.out.println(s1 == s2);//true\n        \n        s1 = "hello";\n        \n        system.out.println(s1);//hello\n        system.out.println(s2);//abc\n\n        system.out.println("================================================");\n\n        string s3 = "abc";\n        s3 += "def";\n        system.out.println(s3);//abcdef\n        system.out.println(s2);//abc\n\n        system.out.println("================================================");\n\n        string s4 = "adb";\n        string s5 = s4.replace(\'a\',\'m\');\n\n        system.out.println(s4);//abc\n        system.out.println(s5);//mbc\n    }\n}\n\n\n\n图解:\n\n * 由于==字符串常量池中是不会存储相同内容的字符串的==，所以在字符串常量池中s1和s2指向同一个内存地址。\n\n\n\n * 由于string内部定义了final char[] value用于存储字符串数字，final表示数组和其元素不能被修改，其也就有了==不可变的字符序列==的性质。所以改变s1取值为hello后，并不会改变字符串常量池中的对应位置的值，而是会新开辟一个内存地址存放hello值，并且s1指向新的内存地址。\n\n\n\n * 以下图解类似。\n\n\n\n\n\n\n# 1.3 string new方式赋值的内存理解\n\ndemo:\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\n/**\n * string 的使用\n *\n * @author 13roky\n * @date 2021-04-24 10:34\n */\npublic class stringtest {\n    /*\n    string实例化方式测试:\n    方式一: 通过字面量定义的方式\n    方式二: 通过new + 构造器的方式\n\n    面试题：string s = new string("abc);方式创建对象，在内存中创建了几个对象？\n            两个：一个是堆空间中new结构，另一个是char[]对应的常量池中的数据"abc"\n     */\n    @test\n    public void test2() {\n        //通过字面量定义的方式:此时的s1和s2的数据javaee生命在方法区中的字符串常量池中.\n        string s1 = "javaee";\n        string s2 = "javaee";\n        //通过new + 构造器的方式:此时的s3和s4保存的地址值是数据在堆空间中开辟空间后对应的地址值.\n        string s3 = new string("javaee");\n        string s4 = new string("javaee");\n\n        system.out.println(s1 == s2);//true\n        system.out.println(s1 == s3);//false\n        system.out.println(s1 == s4);//false\n        system.out.println(s3 == s4);//false\n        system.out.println(s3.equals(s4));//true\n\n        system.out.println("=================================================");\n\n        person p1 = new person("tom",12);\n        person p2 = new person("tom",12);\n\n        system.out.println(p1.name.equals(p2.name));//true\n        system.out.println(p1.name == p2.name);//true\n    }\n}\n\nclass person{\n    public string name;\n    public int age;\n\n    public person(string name,int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n\n\n\n图解:\n\nnew的结构是存在于堆中的，比如 string s3 = new string("javaee");\n\n\n\n\n# 1.4 string 拼接字面量和变量的方式赋值\n\ndemo：\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\n/**\n * string 的使用\n *\n * @author 13roky\n * @date 2021-04-24 10:34\n */\npublic class stringtest {\n    /*\n    1.常量与常量的拼接结果在常量池。且常量池中不会存在享同内容的常量。\n    2.只要其中有一个是变量，结果就在堆中。\n    3.如果拼接的结果调用intern()方法，返回值就会在常量池中。\n     */\n    @test\n    public void test03() {\n        string s1 = "javaee";\n        string s2 = "hadoop";\n        string s3 = "javaeehadoop";\n        string s4 = "javaee" + "hadoop";//引号中的为字面量，这里是字面量的拼接\n        string s5 = s1 + "hadoop";\n        string s6 = "javaee" + s2;\n        string s7 = s1 + s2;\n        final string s8 = "hadoop";\n        string s9 = "javaee" + s8;\n\n        system.out.println(s3 == s4);//true\n        system.out.println(s3 == s5);//false\n        system.out.println(s3 == s6);//false\n        system.out.println(s3 == s7);//false\n        system.out.println(s5 == s6);//false\n        system.out.println(s5 == s7);//false\n        system.out.println(s6 == s7);//false\n        system.out.println(s3 == s9);//true\n\n        string s10 = s5.intern();//返回值得到的s8使用的常量值中已经存在的”javaeehadoop“（s5.intern返回的时常量池中对应的内存地址）\n        system.out.println(s3 == s10);//true\n    }    \n}\n\n\n图解：\n\n * 常量与常量的拼接，结果直接保存在常量池中。如string s4 = "javaee" + "hadoop";,如果常量池中存在“javaeehadoop”，那么s4直接指向其地址。\n * 只要拼接赋值时，其中有一个是变量，那么结果就会存在于堆中，如string s5 = s1 + "hadoop";,栈中的变量名s5指向堆中对应的地址0x0001，堆中的地址又指向常量池的地址0x1214。\n * s5指向的是堆中的内存地址0x0001，但是方法s5.intern返回的直接是常量池中的地址。所以string s10 = s5.intern();这行代码会让s10直接指向常量池对应的内存地址。\n\n\n\npackage com.broky.commonclass.exer;\n\nimport java.util.arrays;\n\n/**\n * @author 13roky\n * @date 2021-04-26 7:27\n */\npublic class stringvaluechangeex {\n    string str = new string("good");\n    char[]  ch = {\'t\',\'e\',\'s\',\'t\'};\n\n    public void change(string str,char ch[]){\n        str = "test ok";\n        ch[0] = \'b\';\n    }\n\n    public static void main(string[] args) {\n        stringvaluechangeex test01 = new stringvaluechangeex();\n        test01.change(test01.str, test01.ch);\n        //这里涉及字符串的拼接,所以会用tostring方法,而char中的tostring返回的是哈希值,所以要用arrays类\n        system.out.println(test01.str + " and " + arrays.tostring(test01.ch));   //good and [c@2f4d3709\n        system.out.println(test01.str); //good\n        system.out.println(test01.ch);  //test\n    }\n}\n\n\n\n# 1.5 string类常用方法\n\n 1.  int length():返回字符的长度: return value.length\n 2.  char charat(int index):返回某索引处的字return value[index]\n 3.  boolean isempty():判断是否是空字符牢: return value. length == 0\n 4.  string tolowercase():使用默认语言环境,将 string中的所有字符转换为小写\n 5.  string touppercase():使用默认语言环境,将 string中的所有字符转换为大写\n 6.  string trim():返回字符的副本,忽略前导空白和尾部空白\n 7.  boolean equals(object obj):比较字符的内容是否相同\n 8.  boolean equalsignorecase(string anotherstring):与equls方法类似,忽略大小写\n 9.  string concat(string str):将指定字符牢连接到此字符的结尾。等价于用"+"\n 10. int compare to(string anotherstring):比较两个字符的大小\n 11. string substring(int beginindex):返回一个新的字符,它是此字符的从 beginindex开始截取到最后一个子字符串.\n 12. string substring(int beginindex, int endindex):返回一个新字符串,它是此字符从beginindex开始截取到endindex(不包含)的一个子字符串.\n\ndemo:\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\nimport java.util.locale;\n\n/**\n * @author 13roky\n * @date 2021-04-26 21:47\n */\npublic class commonmethod {\n    /*\n    int length():返回字符的长度: return value.length\n    char charat( nt index):返回某索引处的字return value[index]\n    boolean isempty():判断是否是空字符牢: return value. length == 0\n    string tolowercase():使用默认语言环境,将 string中的所有字符转换为小写\n    string touppercase():使用默认语言环境,将 string中的所有字符转换为大写\n    string trim():返园字符的副本,忽略前导空白和尾部空白\n    boolean equals(object obj):比较字符的内容是否相同\n    boolean equalsignorecase(string anotherstring):与equls方法类似,忽略大小写\n    string concat(string str):将指定字符牢连接到此字符的结尾。等价于用"+"\n    int compare to(string anotherstring):比较两个字符的大小\n    string substring(int beginindex):返回一个新的字符,它是此字符的从 beginindex开始截取到最后一个子字符串.\n    string substring(int beginindex, int endindex):返回一个新字符串,它是此字符从beginindex开始截取到endindex(不包含)的一个子字符串.\n     */\n    @test\n    public void test01(){\n        string s1 ="helloworld";\n        system.out.println(s1.length());\n        system.out.println(s1.charat(0));\n        system.out.println(s1.charat(9));\n        system.out.println(s1.isempty());\n\n        string s2 = s1.tolowercase();\n        system.out.println(s1);\n        system.out.println(s2);\n\n        string s3 = "    he  llo    world    ";\n        string s4 = s3.trim();\n        system.out.println(s3);\n        system.out.println(s4);\n    }\n\n    @test\n    public void test02(){\n        string s1 = "helloworld";\n        string s2 = "helloworld";\n        system.out.println(s1.equals(s2));\n        system.out.println(s1.equalsignorecase(s2));\n\n        string s3 = "abc";\n        string s4 = "def".concat(s3);\n        system.out.println(s4);\n\n        string s5 = "abc";\n        string s6 = new string("abd");\n        system.out.println(s5.compareto(s6));\n\n        string s7 = "13roky学java";\n        string s8 = s7.substring(2,6);\n        system.out.println(s7);\n        system.out.println(s8);\n    }\n}\n\n\n 13. boolean endswith(string suffix):测试此字符串是否以指定的后缀结束\n 14. boolean startswith(string prefix):测试此字符串是否以指定的前缀开始\n 15. boolean startswith(string prefix, int toffset):测试此字符串从指定索引开始的子字符串是否以指定的前缀开始\n 16. boolean contains(charsequence s):当且仅当此字符串包含指定的char值序列时,返回true\n 17. int indexof(string str): 返回指定子字符串在此字符串中第一次出现处的索引\n 18. int indexof(string str,int fromindex):返回指定子字符串在此字符串中第一次出现处的索引,从指定的索引处开始\n 19. int lastindexof(string str):返回指定子字符串在此字符串中最右边出现处的索引\n 20. int lastindexof(string str,int fromindex):返回指定子字符串在此字符串中最后一次出现处的索引,从指定的索引开始反向搜索(从右往左搜索)indexof和lastindexof方法如果未找到,返回结果都是-1\n\ndemo:\n\npackage com.broky.commonclass;\n\nimport jdk.jfr.dataamount;\nimport org.junit.jupiter.api.test;\n\nimport java.util.locale;\n\n/**\n * @author 13roky\n * @date 2021-04-26 21:47\n */\npublic class commonmethod {\n    /*\n    boolean endswith(string suffix):测试此字符串是否以指定的后缀结束\n    boolean startswith(string prefix):测试此字符串是否以指定的前缀开始\n    boolean startswith(string prefix, int toffset):测试此字符串从指定索引开始的子字符串是否以指定的前缀开始\n\n    boolean contains(charsequence s):当且仅当此字符串包含指定的char值序列时,返回true\n    int indexof(string str): 返回指定子字符串在此字符串中第一次出现处的索引\n    int indexof(string str,int fromindex):返回指定子字符串在此字符串中第一次出现处的索引,从指定的索引处开始\n    int lastindexof(string str):返回指定子字符串在此字符串中最右边出现处的索引\n    int lastindexof(string str,int fromindex):返回指定子字符串在此字符串中最后一次出现处的索引,从指定的索引开始反向搜索(从右往左搜索)\n    indexof和lastindexof方法如果未找到,返回结果都是-1\n    */\n    @test\n    public void test03(){\n        string str1 = "helloworld";\n        boolean b1 = str1.endswith("rld");\n        system.out.println(b1);\n\n        boolean b2 = str1.startswith("he");\n        system.out.println(b2);\n\n        boolean b3 =str1.startswith("ll",2);\n        system.out.println(b3);\n\n        string str2 = "wo";\n        system.out.println(str1.contains(str2));\n\n        system.out.println(str1.indexof("lol"));\n        system.out.println(str1.indexof("l"));\n        system.out.println(str1.indexof("lo", 5));\n\n        string str3 = "hellorworld";\n        system.out.println(str3.lastindexof("or"));\n        system.out.println(str3.lastindexof("or",6));\n    }\n    //什么情况下,indexof(str)和lastindexof(str)返回值相同?\n    //情况一:存在唯一的一个str.\n    //情况二:不存在str\n}\n\n\n 21. 替换: string replace(char oldchar,char newchar):返回一个新的字符串,它是通过用newchar替换oldchar string replace(charsequence target,charsequence replacement):使用字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串. string replaceall(string regex,string replacement):使用给定的replacement替换此字符串多有匹配给定的正则表达式的子字符串 string replacefirst(string regex,string replacement):使用给定的replacement替换此字符串匹配给定的正则表达式的第一个子字符串.\n 22. 匹配: boolean matches(string regex):告知此字符串是否匹配给定得正则表达式\n 23. 切片: string[] split(string regex):根据给定的正则表达式的匹配拆分此字符串 string[] split(string regex,int limit):根据匹配给定的正则表达式来分此字符串,最多不超过limit个,如果超出,剩下的全部都放到最后一个元素\n\ndemo:\n\npackage com.broky.commonclass;\n\nimport jdk.jfr.dataamount;\nimport org.junit.jupiter.api.test;\n\nimport java.util.locale;\n\n/**\n * @author 13roky\n * @date 2021-04-26 21:47\n */\npublic class commonmethod {\n    /*\n    替换\n    string replace(char oldchar,char newchar):返回一个新的字符串,它是通过用newchar替换oldchar\n    string replace(charsequence target,charsequence replacement):使用字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串.\n    string replaceall(string regex,string replacement):使用给定的replacement替换此字符串多有匹配给定的正则表达式的子字符串\n    string replacefirst(string regex,string replacement):使用给定的replacement替换此字符串匹配给定的正则表达式的第一个子字符串.\n    匹配:\n    boolean matches(string regex):告知此字符串是否匹配给定得正则表达式\n    切片:\n    string[] split(string regex):根据给定的正则表达式的匹配拆分此字符串\n    string[] split(string regex,int limit):根据匹配给定的正则表达式来分此字符串,最多不超过limit个,如果超出,剩下的全部都放到最后一个元素\n     */\n    @test\n    public void test04(){\n        string str1 = "13roky学java";\n        string str2 = str1.replace(\'学\',\'写\');\n\n        system.out.println(str1);\n        system.out.println(str2);\n\n        string str3 = str1.replace("13roky", "geek");\n        system.out.println(str3);\n\n        system.out.println("=====================================================");\n        string str = "123klnjklsdnafdmc123pojasvapos";\n        string string = str.replace("\\\\d+",",").replaceall("^,|,$","|");\n        system.out.println(string);\n\n        str = "12345";\n        //判断str字符串中是否全部有数字组成,即有1-n个数字组成\n        boolean matches = str.matches("\\\\d+");\n        system.out.println(matches);\n        string tel = "0571-4534289";\n        //判断一个电话是否是杭州的\n        boolean result = tel.matches("0571-\\\\d{7,8}");\n        system.out.println(result);\n\n        system.out.println("================================================");\n        str = "hello|world|java";\n        string[] strs = str.split("\\\\|");\n\n        for (int i = 0; i < strs.length; i++) {\n            system.out.println(strs[i]);\n        }\n        system.out.println();\n        str2 = "hello.world.java";\n        string[] strs2 = str2.split("\\\\|");\n        for (int i = 0; i < strs2.length; i++) {\n            system.out.println(strs2[i]);\n        }\n    }\n}\n\n\n\n# 1.6 string与其它类型的转换\n\ndemo：\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\nimport java.io.unsupportedencodingexception;\nimport java.util.arrays;\n\n/**\n * string类与其他结构之间的转换\n * string 与 char[] 之间的转换\n * string 与 byte[] 之间的转换\n *\n * @author 13roky\n * @date 2021-05-02 19:33\n */\npublic class stringchange {\n    /*\n    复习：string与其他数据类型，包装类之间的转换\n    string --\x3e 基本数据类型、包装类：调用包装类的静态方法：parsexxx(str)\n    基本数据类型、包装类 ——》string：调用string重载的valueof(xxx) 或者直接拼接“”\n     */\n    @test\n    public void test(){\n        string str = "123";\n        //int num = (int) str;   只有子父类的关系才可以使用强制类型转换\n\n        int num = integer.parseint(str);\n\n        string str2 = string.valueof(num);\n        string str3 = num + "";\n    }\n\n    /*\n    string 与 char[] 之间的转换\n\n    string --\x3e char[] ：string类中的tochararray()方法\n    char[] --\x3e string ：string的构造器\n     */\n    @test\n    public void test02(){\n        string str = "abcde";\n\n        char[] c1 = str.tochararray();\n\n        for (int i = 0; i < c1.length; i++) {\n            system.out.println(c1[i]);\n        }\n\n        char[] c2 = new char[]{\'f\',\'s\',\'c\',\'a\'};\n\n        string str2 = new string(c2);\n        system.out.println(str2);\n    }\n\n    /*\n    string 与 byte[] 之间的转换\n    编码：string --\x3e byte[] ：调用string的getbytes()\n    解码：\n\n    转化的时候会涉及编码和解码\n    编码：字符串 --\x3e 字节 （看得懂转换为看不懂的二进制数据）\n    解码 字节 --\x3e 字符串 （看不懂的二进制数据转换为看得懂）\n\n     */\n    @test\n    public void test03() throws unsupportedencodingexception {\n        string str = "abc123此方";\n        // 使用ide默认的编码集进行转换\n        byte[]  b1 = str.getbytes();\n        // 字节byte类型 采用ascll编码 由于ascll中没有中文编码，所以中文会转为默认的编码如（utf-8，utf-8中一个汉字占三位）然后再转为ascll\n        system.out.println(arrays.tostring(b1));\n        // 使用 gbk 字符集进行编码，需要处理异常\n        byte[] b2 = str.getbytes("gbk");\n\n        system.out.println(arrays.tostring(b2));\n        system.out.println("=======================================");\n        // 使用ide默认的编码集进行解码\n        string str2 = new string(b1);\n        system.out.println(str2);\n        // 出现乱码。原因：编码及和解码集不一致倒置的\n        string str3 = new string(b2);\n        system.out.println(str3);\n\n        // 指定编码集\n        string str4 = new string(b2, "gbk");\n        system.out.println(str4);\n    }\n}\n\n\n\n# 1.7 常见算法题目\n\n 1. 模拟一个trim方法，去除字符串两端的空格。\n 2. 将一个字符串进行反转。将字符串中间指定部分进行反转。比如“abcdefg”反转为“abfedcg”。\n 3. 获取一个字符串在另一个字符串中出现的次数。\n 4. 获取两个字符串中最大的相同字符串。\n 5. 将字符串中字符进行自然顺序排序。arrays.sort()\n\npackage com.broky.commonclass.exer;\n\nimport org.junit.jupiter.api.test;\n\nimport java.nio.charbuffer;\nimport java.util.arrays;\nimport java.util.objects;\n\n/**\n * 四道常见string算法题目\n * 1. 模拟一个 trim 方法，去除字符串两端的空格。\n *\n * @author 13roky\n * @date 2021-05-08 10:06\n */\npublic class algorithms {\n    @test\n    public void testmytrim() {\n        string s1 = "   123   ";\n        s1.trim();\n        s1 = mytrim(s1);\n        system.out.println(s1);\n    }\n\n    // 模拟一个 trim 方法，去除字符串两端的空格。\n    public string mytrim(string str) {\n        if (str != null) {\n            int start = 0;// 用于记录从前往后首次索引位置不是空格的位置的索引\n            int end = str.length() - 1;// 用于记录从后往前首次索引位置不是空格的位置的索引\n\n            while (start < end && str.charat(start) == \' \') {\n                start++;\n            }\n\n            while (start < end && str.charat(end) == \' \') {\n                end--;\n            }\n            if (str.charat(start) == \' \') {\n                return "";\n            }\n\n            return str.substring(start, end + 1);\n        }\n        return null;\n    }\n\n    @test\n    public void testmyreverse() {\n        system.out.println(myreverse01("abcdefg", 2, 5));\n        system.out.println(myreverse02("abcdefg", 2, 5));\n        system.out.println(myreverse03("abcdefg", 2, 5));\n    }\n\n    /*\n    将一个字符串进行反转。将字符串中指定部分进行反转。比如“abcdefg”反转为“abfedcg”\n     */\n    // 方式一：转换为char[]\n    public string myreverse01(string str, int start, int end) {\n        if (str != null) {\n            char[] chars = str.tochararray();\n            char tmp = 0;\n            for (int s = start, e = end; s < e; s++, e--) {\n                tmp = chars[s];\n                chars[s] = chars[e];\n                chars[e] = tmp;\n            }\n            return new string(chars);\n        }\n        return null;\n    }\n\n    // 方式二：使用string的拼接\n    public string myreverse02(string str, int start, int end) {\n        if (str != null) {\n            string partone = str.substring(0, start);\n            string parthree = str.substring(end + 1);\n            for (int i = end; i >= start; i--) {\n                partone += str.charat(i);\n            }\n            partone += parthree;\n            return partone;\n        }\n        return null;\n    }\n\n    // 方式三：使用stringbuffer 或 stringbuilder 替换string\n    public string myreverse03(string str, int start, int end) {\n        stringbuilder builder = new stringbuilder(str.length());\n        builder.append(str.substring(0, start));\n        for (int i = end; i >= start; i--) {\n            builder.append(str.charat(i));\n        }\n        builder.append(str.substring(end + 1));\n        return string.valueof(builder);\n    }\n\n    /*\n    获取一个字符串在另一个字符串中出现的次数。\n    如：获取 "ab" 在 “abkkcakabkebfkabkskab” 出现的次数\n     */\n    @test\n    public void testgetcount() {\n        getcount01("ab", "abkkcakabkebfkabkskab");\n        getcount02("ab", "abkkcakabkebfkabkskab");\n    }\n    // 方法一：\n    public int getcount01(string mainstr, string substr) {\n        int n = 0;\n        for (int i = 0; i < substr.length() - mainstr.length() + 1; i++) {\n            if (mainstr.charat(0) == substr.charat(i)) {\n                if (mainstr.equals(substr.substring(i, i + mainstr.length()))) {\n                    n++;\n                }\n            }\n        }\n        system.out.println(n);\n        return n;\n    }\n    // 方法二：\n    public int getcount02(string mainstr, string substr) {\n        int count = 0;\n        int index = 0;\n        if (substr.length() >= mainstr.length()) {\n//            while ((index = substr.indexof(mainstr)) != -1) {\n//                count++;\n//                substr = substr.substring(index + mainstr.length());\n//            }\n            // 改进\n            while ((index = substr.indexof(mainstr,index)) != -1) {\n                count++;\n                index += mainstr.length();\n            }\n            system.out.println(count);\n            return count;\n        } else {\n            return 0;\n        }\n    }\n}\n\n\n\n# 2. stringbuffer 和 stringbuilder类\n\n\n# 2.1 string、stringbuffer、stringbuilder 三者的异同\n\n * string：不可变的字符序列，底层使用char[]进行存储\n * stringbuffer：可变的字符序列，线程安全的，效率低，底层使用char[]进行存储\n * stringbuilder：可变的字符序列，线程不安全的，效率高，jdk5.0新特性，底层使用char[]进行存储\n\n源码分析：\n\n * string： string str = new string(); // 底层代码为 char[] value = new char[0]; string str1 = new string("abc"); // 底层代码为 char[] value = new char[]{\'a\',\'b\',\'c\'};\n * stringbuffer: string sb1 = new stringbuffer(); // char[] value = new char[16];底层创建了一个长度是16的数组 sb1.append(\'a\'); // value[0] = \'a\'; sb1.append(\'b\'); // value[1] = \'b\';\n * 问题：\n   1. system.out.println(sb1.length()); 返回的是有的值count，而不是底层开辟的空间value.length.\n   2. 扩容问题，如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。默认情况下，扩容为原来容量的2倍+2（源码中采用了位运算<<），同时将原有数组中的元素复制到新数组中。\n * 总结：\n   1. 开发中尽量不要用string，string不可变，效率最差，每次都会新造。而stringbuufer和stringbuilder只有长度不够用的时候才去扩容并复制。\n   2. 开发中如果知道会频繁使用append时，建议使用stringbuffer的指定容量的构造器，避免之后进行扩容。\n\n\n# 2.2 stringbuffer 类的常用方法\n\n * stringbuffer append(xx):提供了很多的 append()方法,用于进行字符拼接\n * stringbuffer delete( int start, int end):删除指定位置的内容，本身发生改变，并返回值。\n * stringbuffer replace( int start, int end, string str):把 start,end)位置替换为str\n * stringbuffer insert( int offset,xxx):在指定位置插入xxx\n * stringbuffer reverse():把当前字符序列逆转\n * public int indexof(string str)\n * public string substring (int start, int end) 返回一个从start开始到end结束的左闭右开区间的子字符串，本身值并未变化\n * public int length\n * public char charat(int n)\n * public void setcharat (int n, char ch)\n * 总结： 增：append(xx) 删：delete( int start, int end) 改：setcharat(int n,char ch) / replace( int start, int end, string str) 查：charat(int n) 插：insert( int offset,xxx) 长度：length() 遍历：for() + charat() / tostring()\n * 方法链的原理：s1.append().append().append(); s1调用完append后返回的依旧是s1，可以继续调用append\n\npackage com.broky.commonclass.exer;\n\nimport org.junit.jupiter.api.test;\n\n/**\n * stringbuffer 的常用方法\n *\n * @author 13roky\n * @date 2021-05-07 13:27\n */\npublic class stringbuffermethod {\n\n    @test\n    public void test(){\n        stringbuffer s1 = new stringbuffer("abc");\n        s1.append(1);\n        s1.append("234");\n        system.out.println(s1.delete(2, 4));\n        system.out.println(s1);\n        system.out.println(s1.replace(2, 4, "hello"));\n        system.out.println(s1.reverse());\n\n    }\n}\n\n\n关于append方法\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\npublic class stringbufferbuildertest {\n   \n    @test\n    public void test2(){\n        string str = null;\n        stringbuffer sb = new stringbuffer();\n        //stringbuffer 的 append 方法会将null值转换为字符“null”加入\n        sb.append(str);\n\n        system.out.println(sb.length());//4\n\n        system.out.println(sb);//"null"\n\n        stringbuffer sb2 = new stringbuffer(str);\n        system.out.println(sb2);\n    }\n}\n\n\n\n# 2.3 string、stringbuffer、stringbuilder 三者的效率\n\n**效率：**stringbuilder > stringbuffer > string\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\n    /**\n     * string stringbuffer stringbuilder 效率测试\n     */\n    @test\n    public void timetest() {\n        long starttime = 0l;\n        long endtime = 0l;\n        string text = "";\n        stringbuffer buffer = new stringbuffer("");\n        stringbuilder builder = new stringbuilder("");\n\n        starttime = system.currenttimemillis();\n        for (int i = 0; i < 20000; i++) {\n            buffer.append(string.valueof(i));\n        }\n        endtime = system.currenttimemillis();\n        system.out.println("stringbuffer 执行时间" + (endtime - starttime));\n\n        starttime = system.currenttimemillis();\n        for (int i = 0; i < 20000; i++) {\n            builder.append(string.valueof(i));\n        }\n        endtime = system.currenttimemillis();\n        system.out.println("stringbuilder 执行时间" + (endtime - starttime));\n\n        starttime = system.currenttimemillis();\n        for (int i = 0; i < 20000; i++) {\n            text = text + string.valueof(i);\n        }\n        endtime = system.currenttimemillis();\n        system.out.println("string 执行时间" + (endtime - starttime));\n\n    }\n}\n\n\n\n# 3. jdk8 之前的日期和时间 api 相关类\n\n\n# 3.1 java.lang.system 类\n\nsystem 类提供的 public static long currenttimemillis() 用来返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。\n\n\n# 3.2 java.util.date 和 java.sql.date 类\n\n 1. 两个构造器的使用\n    \n    > 构造器一：date()：创建一个对应当前时间的date对象 构造器二：创建指定毫秒数的date对象\n\n 2. 两个方法的使用\n    \n    > tostring()：显示当前的年、月、日、时、分、秒 gettime()：获取当前date对象对应的毫秒数。（时间戳）\n\n 3. java.sql.date 对应这数据库中的日期类型的变量\n    \n    > 实例化 将 sql.date 转换 util.date: 多态直接赋值 将 util.date 转换 sql.date: 通过共同的gettime()时间戳实现\n\ndemo：\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\nimport java.util.date;\n\n/**\n *  jdk8 之前的日期和时间的 api 测试\n *\n * @author 13roky\n * @date 2021-05-08 9:15\n */\npublic class datetimetest {\n\n    /*\n    system类提供的 public static long currenttimemillis()\n    用来返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。\n     */\n    @test\n    public void test() {\n        long time = system.currenttimemillis();\n        system.out.println(time);\n    }\n\n    /*\n    java.util.date 类\n            |---java.sql.date 类 数据库\n    1. 两个构造器的使用\n        > 构造器一：date()：创建一个对应当前时间的date对象\n        > 构造器二：创建指定毫秒数的date对象\n    2. 两个方法的使用\n        > tostring()：显示当前的年、月、日、时、分、秒\n        > gettime()：获取当前date对象对应的毫秒数。（时间戳）\n\n    3. java.sql.date 对应这数据库中的日期类型的变量\n        > 实例化\n        > 将 sql.date 转换 util.date: 多态直接赋值\n        > 将 util.date 转换 sql.date: 通过共同的gettime()时间戳实现\n     */\n\n    @test\n    public void test02() {\n        // 构造器一：date()：创建一个对应当前时间的date对象\n        date date1 = new date();\n        system.out.println(date1.tostring());\n        system.out.println(date1.gettime());\n\n        // 构造器二：创建指定毫秒数的date对象\n        date date2 = new date(1620437519431l);\n\n        java.sql.date date3 = new java.sql.date(1620437519431l);\n        system.out.println(date3);\n\n        // 将 util.date 转换 sql.date:\n        // 情况一\n        date date4 = new java.sql.date(1620437519431l);\n        java.sql.date date5 = (java.sql.date) date4;\n        // 情况二\n        date date6 = new date();\n        java.sql.date date7 = new java.sql.date(date6.gettime());\n\n        /*\n        当new的是父类的时候，如果强转为子类，那么编译时不会报错，运行时会报错，因为new的父类缺少子类特有的属性和方法\n        当new的是子类的时候，但是赋给了父类，这时候是可以强转成子类的，如情况一\n         */\n\n    }\n}\n\n\n注意：\n\n使用data的构造器，设置时间会存在 偏移量 的问题\n\ndemo：\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\nimport java.util.date;\n\n/**\n * jdk8 之前的日期和时间的 api 测试\n *\n * @author 13roky\n * @date 2021-05-08 9:15\n */\npublic class datetimetest {\n\n    // date中的偏移量\n    @test\n    public void test01() {\n        /*\n        由于构造方法存在一个偏移量，年份是从1990年开始，月份是从0开始所以构造时应该减去偏移量\n         */\n        date date1 = new date(2020, 9, 8);\n        system.out.println(date1);  // fri oct 08 00:00:00 cst 3920\n        date1 = new date(2020 - 1900, 9 - 1, 8);\n        system.out.println(date1);  // tue sep 08 00:00:00 cst 2020\n    }\n}\n\n\n\n# 3.3 simpledateformat 类\n\nsimpledateformat 是用来 格式化 date 类中 时间格式的 和 对格式进行解析成 date 的类\n\n可以使用默认格式，也可以自定义格式。\n\n 1. 两个操作 1.1 格式化：日期 ---\x3e 字符串 1.2 解析：格式化的逆过程，字符串 ---\x3e 日期\n 2. simpledateformat 的实例化\n\ndemo\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\nimport java.text.parseexception;\nimport java.text.simpledateformat;\nimport java.util.date;\n\n/**\n * jdk 8 之前的日期时间的api测试\n * 1. system类中currenttimemillis();\n * 2. java.util.date 和 子类 java.sql.date\n * 3. simpledateformat\n * 4. calendar\n *\n * @author 13roky\n * @date 2021-05-09 12:53\n */\npublic class datetimetest2 {\n    /*\n    simpledateformat 的使用：simpledateformat对日期 date 类的格式化和解析\n\n    1. 两个操作\n    1.1 格式化：日期 ---\x3e 字符串\n    1.2 解析：格式化的逆过程，字符串 ---\x3e 日期\n\n    2. simpledateformat 的实例化\n     */\n    @test\n    public void testsimpledateformat() throws parseexception {\n        // 实例化simpledateformat:使用默认的构造器\n        simpledateformat sdf = new simpledateformat();\n\n        // 格式化：日期 ---\x3e 字符串\n        date date = new date();\n        system.out.println(date);\n\n        string format = sdf.format(date);\n        system.out.println(format);\n\n        // 解析： 格式化的逆过程，字符串 ---\x3e 日期\n        string str = "2021/5/9 下午1:04";\n        date date1 = null;\n\n        date1 = sdf.parse(str);\n\n        system.out.println(date1);\n\n        //*********************************\n        // simpledateformat sdf1 = new simpledateformat("yyyyy.mmmmm.dd ggg hh:mm aaa");\n        simpledateformat sdf1 = new simpledateformat("yyyy-mm-dd hh:mm:ss");\n        string format1 = sdf1.format(date);\n        system.out.println(format1);\n\n        date date2 = sdf1.parse("2021-05-09 01:09:56");\n        system.out.println(date2);\n\n    }\n}\n\n\n练习:\n\n 1. 字符串“2020-02-23”转化为java.sql.date\n 2. 三天打鱼两天晒网 1990-01-01 视频分析：p482480.尚硅谷_常用类-simpledateformat的课后练习2\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\nimport java.text.parseexception;\nimport java.text.simpledateformat;\nimport java.util.date;\n\n    @test\n    public void testex01() throws parseexception {\n        //练习一：字符串“2020-02-23”转化为java.sql.date\n        string str ="2020-02-23";\n        simpledateformat sdf = new simpledateformat("yyyy-mm-dd");\n\n        date date = sdf.parse(str);\n        system.out.println(date);\n\n        java.sql.date sqldate = new java.sql.date(date.gettime());\n\n        system.out.println(sqldate);\n    }\n\n    @test\n    public void testex02() throws parseexception {\n        simpledateformat sdf = new simpledateformat("yyyy-mm-dd");\n        date startdate = sdf.parse("1990-01-01");\n\n        long oneday = sdf.parse("1990-01-02").gettime() - startdate.gettime();\n        long period = oneday * 5;\n        //        long now = sdf.parse(sdf.format(new date())).gettime() - startdate.gettime();\n        long now = sdf.parse("1990-01-06").gettime() - startdate.gettime() + oneday;\n\n        if (now % period > 3 * oneday || now % period == 0) {\n            system.out.println("晒网");\n        } else {\n            system.out.println("打鱼");\n        }\n\n    }\n}\n\n\n\n# 3.4 calendar 类\n\n * calendar类是一个抽象类，是可变的\n\ndemo\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\nimport java.text.parseexception;\nimport java.text.simpledateformat;\nimport java.util.calendar;\nimport java.util.date;\n\n/**\n * jdk 8 之前的日期时间的api测试\n * 1. system类中currenttimemillis();\n * 2. java.util.date 和 子类 java.sql.date\n * 3. simpledateformat\n * 4. calendar\n *\n * @author 13roky\n * @date 2021-05-09 12:53\n */\npublic class datetimetest2 {\n    \n     /*\n        calendar 日历类（抽象类）的使用\n     */\n    @test\n    public void testcalendar(){\n        // 1. 实例化\n        // 方式一： 创建其子类 （gregoriancalendar）的对象\n        // 方式二：调用其静态方法getinstance()\n        // 两种创建方法本质上一样\n        calendar calendar = calendar.getinstance();\n        system.out.println(calendar.getclass());\n\n        // 2.常用方法\n        //get()\n        int days = calendar.get(calendar.day_of_month);\n        system.out.println(days);\n\n        //set()\n        calendar.set(calendar.day_of_month,22);\n        days = calendar.get(calendar.day_of_month);\n        system.out.println(days);\n\n        //add()\n        calendar.add(calendar.day_of_month,-3);\n        days = calendar.get(calendar.day_of_month);\n        system.out.println(days);\n\n        //gettime(): 日历类--\x3edate\n        date date = calendar.gettime();\n        system.out.println(date);\n\n        //settime(): date---\x3e日历类\n        date date1 = new date();\n        calendar.settime(date1);\n        days = calendar.get(calendar.day_of_month);\n        system.out.println(days);\n    }\n}\n\n\n注意\n\n * 获取月份时：一月是0，二月是1，以此类推12月是11\n * 获取星期时：周日是1，周二是2.。。。周六是7\n\n\n# 3.5 jdk8 之前时间日期api的一些问题\n\n如果我们可以跟别人说:“我们在1502643933071见晚了!”那么就再简单不过了。但是我们希望时间与量夜和四季有关,于是事情就变复杂了。jdk10中包含了个 java util. date类,但是它的大多数方法已经在jdk11引入 calendar类之后被弃用而 calendar并不比date好多少。它们面临的问题是：\n\n**可变性: **像日期和时间这样的类应该是不可变的。\n\n**偏移性: **date中的年份是从1900开始的,而月份都从0开始。\n\n格式化: 格式化只对date有用, calendar则不行\n\n此外,它们也不是线程安全的;不能处理闰秒等。\n\n因此我们需要引入 以下 新的时间日期api来处理这些问题。\n\n\n# 4. jdk8 中新的时间日期 api\n\n * 第三次引入的api是成功的，并且java8中引入的 java. time api 已经纠正了过去的缺陷，将来很长一段时间内它都会为我们服务。\n * java8 吸收了joda-time的精华，以一个新的开始为java创建优秀的ap新的 java. time中包含了所有关于本地日期( localdate)、本地时间( localtime)、本地日期时间( localdate time)、**时区( zoned date time)和持续时间( duration)**的类。历史悠久的date类新增了 tolnstant()方法，用于把date转换成新的表示形式。这些新增的本地化时间口期 api 大大简化了日期时间和本地化的管理。\n * 在jdk8 之前joda-time是作为jar包的形式导入项目使用的，在jdk8 的时候官方将其引入.\n\n\n# 4.1 localdate、localtime、localdatetime 类的使用\n\n实例化：\n\n * 实例化方式一：使用静态方法 now() / now(zoneld zone) 获取当前的日期时间\n * 实例化方式二：使用静态方法 of()自定义时间，无 date 中偏移量的问题\n\n方法 :\n\n * now() / now(zoneld zone)\n\n * of()\n\n * getxxx() 获取相关属性\n\n * withxxxx() 设置相关属性\n\n * plusxxx() 在现有基础上加上指定数据\n\n * minusxxx() 在现有基础上减去指定数据\n\n说明 :\n\n * 三个类都具有不可变性\n * localdatetime 相较于 localdate , localtime 使用频率更高\n * 类似于 jdk8 之前的 calendar 类\n\ndemo：\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\nimport java.time.localdate;\nimport java.time.localdatetime;\nimport java.time.localtime;\n\n/**\n * jdk 8 中的时间日期 api\n *\n * @author 13roky\n * @date 2021-05-10 7:05\n */\npublic class jdk8datetimetest {\n\n    /*\n    localdate、localtime、localdatetime 类的使用:\n\n     */\n\n    @test\n    public void test01(){\n        // 实例化方式一：使用静态方法 now() / now(zoneld zone) 获取当前的日期时间\n        localdatetime localdatetime = localdatetime.now();\n        localdate localdate = localdate.now();\n        localtime localtime = localtime.now();\n\n        system.out.println(localdatetime);\n        system.out.println(localdate);\n        system.out.println(localtime);\n\n        // 实例化方式二：of() 可以自定义时间，无 date 中偏移量的问题\n\n        localdatetime localdatetime1 = localdatetime.of(2020, 10, 1, 4, 23, 43);\n        system.out.println(localdatetime1);\n\n        // getxxx() 获取相关属性\n        system.out.println(localdatetime.getdayofmonth());\n        system.out.println(localdatetime.getdayofweek());\n        system.out.println(localdatetime.getmonth());\n        system.out.println(localdatetime.getmonthvalue());\n        system.out.println(localdatetime.getminute());\n\n        // withxxxx() 设置相关属性， 具有不可变性\n        localdate localdate1 = localdate.withdayofmonth(20);\n        system.out.println(localdate1);\n\n        localdatetime localdatetime2 = localdatetime.withhour(16);\n        system.out.println(localdatetime);\n        system.out.println(localdatetime2);\n\n        //plusxxx() 在现有基础上加上指定数据\n        localdatetime localdatetime3 = localdatetime.plusmonths(3);\n        system.out.println(localdatetime);\n        system.out.println(localdatetime3);\n\n        // minusxxx() 在现有基础上减去指定数据\n        localdatetime localdatetime4 = localdatetime.minusmonths(3);\n        system.out.println(localdatetime);\n        system.out.println(localdatetime4);\n    }\n}\n\n\n\n# 4.2 instant 类的使用\n\n>  * instant : 时间线上的瞬时点. 这可能被用来记录应用程序中的事件时间戳.\n\n方法 :\n\n * now() 静态方法, 返回 utc 时区的 instant 类对象\n * atoffset() 添加 默认时区 与 当前需要时区 的 时间 的 偏移量\n * toepochmilli() 获取 1970年1月1日0时0分0秒 (utc) 开始的毫秒数\n * ofepochmilli() 静态方法, 通过给定的毫秒数获取 instant 的实例\n\ndemo :\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\nimport java.time.*;\n\n/**\n * jdk 8 中的时间日期 api\n *\n * @author 13roky\n * @date 2021-05-10 7:05\n */\npublic class jdk8datetimetest {\n\n    /*\n    instant 的使用\n     */\n\n    @test\n    public void test02() {\n        // now : 获取本初子午线的时间\n        instant instant = instant.now(); //格林威治时间\n        system.out.println(instant);\n\n        // 添加 默认时区 与 当前需要时区 的 时间 的 偏移量\n        offsetdatetime offsetdatetime = instant.atoffset(zoneoffset.ofhours(8));\n        system.out.println(offsetdatetime);\n\n        // 获取 1970年1月1日0时0分0秒 (utc) 开始的毫秒数\n        long milli = instant.toepochmilli();\n        system.out.println(milli);\n        \n        // ofepochmilli 通过给定的毫秒数获取 instant 的实例\n        instant instant1 = instant.ofepochmilli(1620783200875l);\n        system.out.println(instant1);\n    }\n}\n\n\n\n# 4.3 datetimeformatter 类\n\n> 用于格式化和解析 localdate、localtime、localdatetime\n> \n> 类似于 simpledateformat\n\n格式化方式 :\n\n 1. 预定义的标准格式。如：iso_local_date_time;iso_local_date;iso_local_time;\n 2. 本地化相关的格式。如：oflocalizeddatetime(formatstyle.long);\n 3. 自定义的格式。如：ofpattern("yyyy-mm-dd hh:mm:ss e");\n\n解析方式 :\n\n 1. parse() 方法\n\ndemo :\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\nimport java.time.*;\nimport java.time.format.datetimeformatter;\nimport java.time.format.formatstyle;\nimport java.time.temporal.temporalaccessor;\n\n/**\n * jdk 8 中的时间日期 api\n *\n * @author 13roky\n * @date 2021-05-10 7:05\n */\npublic class jdk8datetimetest {\n\n    /*\n    datetimeformatter:格式化或解析日期、时间\n    类似于simpledateformat\n     */\n\n    @test\n    public void test03() {\n        // 方式一：预定义的标准格式。如：iso_local_date_time;iso_local_date;iso_local_time;\n        datetimeformatter formatter = datetimeformatter.iso_local_date_time;\n        localdatetime localdatetime = localdatetime.now();\n        system.out.println(localdatetime);\n        string s = formatter.format(localdatetime);\n        system.out.println(s);\n        // 因为使用标准格式进行格式化，所以 localdatetime 格式化前后的值基本没有变化，但是类型变变为了 string\n        // 解析：字符串--\x3e日期\n        temporalaccessor parse = formatter.parse("2021-05-12t20:48:52.1539765");\n        system.out.println(parse);\n\n        // 方式二：\n        // 本地化相关的格式。如：oflocalizeddatetime(formatstyle.long);\n        // formatstyle.long / formatstyle.medium / formatstyle.short : 适用于localdatetime\n        datetimeformatter formatter1 = datetimeformatter.oflocalizeddatetime(formatstyle.medium);\n        string s1 = formatter1.format(localdatetime);\n        system.out.println(s1);\n\n        // 本地化相关的格式。如：oflocalizeddate()\n        // formatstyle.full / formatstyle.long / formatstyle.medium / formatstyle.short : 适用于localdatetime\n        datetimeformatter formatter2 = datetimeformatter.oflocalizeddate(formatstyle.full);\n        string s2 = formatter2.format(localdate.now());\n        system.out.println(s2);\n\n        /*\n        可能会报错 ： java.time.datetimeexception: unable to extract zoneid from temporal\n        参考：https://stackoverflow.com/questions/59531046/java-time-datetimeexception-unable-to-extract-zoneid-from-temporal\n         */\n\n        // 方式三：自定义的格式。如：ofpattern("yyyy-mm-dd hh:mm:ss e");\n        datetimeformatter formatter3 = datetimeformatter.ofpattern("yyyy-mm-dd hh:mm:ss");\n        string s3 = formatter3.format(localdatetime);\n        system.out.println(s3);\n\n        // 解析\n        temporalaccessor parse1 = formatter3.parse("2021-05-12 09:24:47");\n        system.out.println(parse1);\n    }\n}\n\n\n\n# 4.4 其它api\n\n * **zoneid：**该类中包含了所有的时区信息，一个时区的id，如 europe/paris\n * zoneddatetime：一个在iso-8601日历系统时区的日期时间，如 2007-12- 03t10:15:30+01:00 europe/paris。\n * 其中每个时区都对应着id，地区id都为“{区域}/{城市}”的格式，例如： asia/shanghai等\n * clock：使用时区提供对当前即时、日期和时间的访问的时钟。\n * 持续时间：duration，用于计算两个“时间”间隔\n * 日期间隔：period，用于计算两个“日期”间隔\n * temporaladjuster : 时间校正器。有时我们可能需要获取例如：将日期调整 到“下一个工作日”等操作。\n * temporaladjusters : 该类通过静态方法 (firstdayofxxx()/lastdayofxxx()/nextxxx())提供了大量的常用 temporaladjuster 的实现。\n\n\n# 5. comparable 和 comparator 接口\n\n\n# 5.1 comparable 接口 自然排序\n\n> 用于对象与对象的比较, comparable属于自然排序\n\n说明：\n\njava中的对象, 正常情况下, 只能进行比较:==或!= 不能使用>或<\n\n但是在开发场景中, 我们需要对多个对象进行排序, 言外之意, 就需要比较对象的大小\n\n使用两个接口中的任何一个来实现: comparable 或 comparator\n\ncomparable 接口的使用举例 :\n\n 1. 像 string, 包装类等实现了 comparable 接口, 重写了 compareto(obj) 方法, 给出了比较两个对象\n 2. 像 string, 包装类重写了compareto()方法以后, 进行了从小到大的排列\n 3. 重写 compareto(obj) 的规则: 如果当前对象 this 等于形参对象 obj, 则返回为零 如果当前对象 this 小于形参对象 obj, 则返回负整数 如果当前对象 this 大于形参对象 obj, 则返回正整数\n 4. 对于自定义类来说, 如果需要排序, 我们可以让自定义类实现 comparable 接口, 重写 compareto(obj) 方法并在 compareto(obj) 方法中指明如何排序\n\ndemo：\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\nimport java.util.arrays;\n\n/**\n * 1) 说明: java中的对象, 正常情况下, 只能进行比较:==或!= 不能使用>或<\n *          但是在开发场景中, 我们需要对多个对象进行排序, 言外之意, 就需要比较对象的大小\n *          如何实现? 使用两个接口中的任何一个: comparable 或 comparator\n * 2) comparable 接口的使用\n *\n * @author 13roky\n * @date 2021-05-12 22:15\n */\npublic class comparetest {\n    /*\n    comparable 接口的使用举例: 自然排序\n    1. 像 string, 包装类等实现了 comparable 接口, 重写了 compareto(obj) 方法, 给出了比较两个对象\n    2. 像 string, 包装类重写了compareto()方法以后,进行了从小到大的排列\n    3. 重写 compareto(obj) 的规则:\n        如果当前对象 this 等于形参对象 obj, 则返回为零\n        如果当前对象 this 小于形参对象 obj, 则返回负整数\n        如果当前对象 this 大于形参对象 obj, 则返回正整数\n    4. 对于自定义类来说, 如果需要排序, 我们可以让自定义类实现 comparable 接口, 重写compareto(obj) 方法\n        在 compareto(obj) 方法中知名如何排序\n     */\n    @test\n    public void test01(){\n        string[] arr = new string[]{"aa","cc","kk","mm","gg","jj","dd"};\n        arrays.sort(arr);\n        system.out.println(arrays.tostring(arr));\n    }\n\n    @test\n    public void test02() {\n        goods[] arr = new goods[4];\n        arr[0] = new goods("lenovomouse",34);\n        arr[1] = new goods("dellmouse",43);\n        arr[2] = new goods("xiaomimouse",12);\n        arr[3] = new goods("huaweimouse",65);\n        arr[3] = new goods("microsoftimouse",12);\n\t\t\n        // 根据arr所对应类的compareto方法排序\n        arrays.sort(arr);\n        system.out.println(arrays.tostring(arr));\n    }\n\n}\n\n\npackage com.broky.commonclass;\n\n/**\n * 商品类 实现comparable方法\n *\n * @author 13roky\n * @date 2021-05-12 22:42\n */\npublic class goods implements comparable {\n    private string name;\n    private double price;\n\n    public goods() {\n    }\n\n    public goods(string name, double price) {\n        this.name = name;\n        this.price = price;\n    }\n\n    public string getname() {\n        return name;\n    }\n\n    public void setname(string name) {\n        this.name = name;\n    }\n\n    public double getprice() {\n        return price;\n    }\n\n    public void setprice(double price) {\n        this.price = price;\n    }\n\n    @override\n    public string tostring() {\n        return "goods{" + "name=\'" + name + \'\\\'\' + ", price=" + price + \'}\';\n    }\n\n    // 指明商品比较大小的方式：按照价格从低到高排序，再按照产品名称从第到高排序\n    @override\n    public int compareto(object o) {\n        if (o instanceof goods) {\n            // 方式一\n            goods goods = (goods) o;\n            if (this.price > goods.price) {\n                return 1;\n            } else if (this.price < goods.price) {\n                return -1;\n            } else {\n                // 字符串类型的本身就有 compareto 方法\n                return this.name.compareto(goods.name);\n                // return -this.name.compareto(goods.name); 加了负号变成了从高到低排\n            }\n            // 方式二\n            //return double.compare(this.price,goods.price);\n\n        }\n        throw new runtimeexception("传入的数据类型不一致");\n    }\n}\n\n\n\n# 5.2 comparator 接口 定制排序\n\n> 根据定制的规则进行比较, comparator属于定制排序\n> \n> 当元素的类型没有实现java.lang.comparable 接口而又不方便修改代码，或者实现了java.lang.comparable 接口的排序规则不适合当前的操作, 那么可以使用 compare(obj o1,obj o2)方法, 比较o1和o2的大小\n\n说明 :\n\n 1. 当元素的类型没有实现java.lang.comparable接口而又不方便修改代码， 或者实现了java.lang.comparable接口的排序规则不适合当前的操作，那么可以考虑使用 comparator 的对象来排序，强行对多个对象进行整体排序的比较。\n\n使用 :\n\n 1. 在 arrays.sort() 方法中使用匿名内部类的方法实现定制排序 (详情见demo)\n\n**comparable 接口与 comparator 的使用的对比 : **\n\n 1. comparable 接口的方式一旦实现,保证 comparable 接口实现类的对象在任何位置都可以比较大小\n\n 2. comparator 接口属于临时性的比较.\n\ndemo :\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\nimport java.util.arrays;\nimport java.util.comparator;\n\n/**\n * 1) 说明: java中的对象, 正常情况下, 只能进行比较:==或!= 不能使用>或<\n *          但是在开发场景中, 我们需要对多个对象进行排序, 言外之意, 就需要比较对象的大小\n *          如何实现? 使用两个接口中的任何一个: comparable 或 comparator\n * 2) comparable 接口与 comparator 的使用的对比\n *          comparable 接口的方式一旦实现,保证 comparable 接口实现类的对象在任何位置都可以比较大小\n *          comparator 接口属于临时性的比较.\n *\n * @author 13roky\n * @date 2021-05-12 22:15\n */\npublic class comparetest {\n    \n    /*\n    comparator 接口的使用： 定制排序\n    1. 背景\n    当元素的类型没有实现java.lang.comparable 接口而又不方便修改代码，\n    或者实现了java.lang.comparable 接口的排序规则不适合当前的操作\n    那么可以使用 compare(obj o1,obj o2)方法, 比较o1和o2的大小\n    2. 重写 compare(obj o1,obj o2) 方法, 比较o1和o2的大小\n    如果方法返回正数,则表示o1大于o2\n    如果方法返回负数,则表示01小于02\n    如果方法返回0, 则表示相等\n     */\n    @test\n    public void test03(){\n        // test1\n        string[] arr = new string[]{"aa","cc","kk","mm","gg","jj","dd"};\n        // 从大到小排序\n        arrays.sort(arr, new comparator() {\n            @override\n            public int compare(object o1, object o2) {\n                if(o1 instanceof string && o2 instanceof string){\n                    string s1 = (string) o1;\n                    string s2 = (string) o2;\n                    return -s1.compareto(s2);\n                }\n                throw new runtimeexception("输入的类型不一致");\n            }\n        });\n\n        system.out.println(arrays.tostring(arr));\n\n    }\n\n    @test\n    public void test04() {\n\n        goods[] arr = new goods[5];\n        arr[0] = new goods("lenovomouse",34);\n        arr[1] = new goods("huaweimouse",43);\n        arr[2] = new goods("xiaomimouse",12);\n        arr[3] = new goods("huaweimouse",65);\n        arr[4] = new goods("microsoftimouse",12);\n\n        arrays.sort(arr,new comparator(){\n            // 指明商品比较大小的方式：再按照产品名称从第到高排序, 按照价格从高到低排序\n            @override\n            public int compare(object o1, object o2) {\n                if (o1 instanceof goods && o2 instanceof goods){\n                    goods g1 = (goods) o1;\n                    goods g2 = (goods) o2;\n                    if (g1.getname().equals(g2.getname())){\n                        return -double.compare(g1.getprice(),g2.getprice());\n                    }else {\n                        return g1.getname().compareto(g2.getname());\n                    }\n                }\n                throw new runtimeexception("输入的数据类型不一致");\n            }\n        });\n\n        system.out.println(arrays.tostring(arr));\n    }\n}\n\n\n\n# 6. system 类\n\n> system类代表系统，系统级的很多属性和控制方法都放置在该类的内部。 该类位于java.lang包。\n> \n> 由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实 例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便 的进行调用。\n> \n>  成员方法  native long currenttimemillis()： 该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时 间和gmt时间(格林威治时间)1970年1月1号0时0分0秒所差的毫秒数。  void exit(int status)： 该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表 异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。\n\n成员变量 ：\n\n * system类内部包含in、out和err三个成员变量，分别代表标准输入流 (键盘输入)，标准输出流(显示器)和标准错误输出流(显示器)。\n\n成员方法 :\n\n * native long currenttimemillis()： 该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时 间和gmt时间(格林威治时间)1970年1月1号0时0分0秒所差的毫秒数。\n * void exit(int status)： 该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表 异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。\n * void gc()： 该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则 取决于系统中垃圾回收算法的实现以及系统执行时的情况。\n * string getproperty(string key)： 该方法的作用是获得系统中属性名为key的属性对应的值。系统中常见 的属性名以及属性的作用如下表所示：\n\n\n\n\n# 7. math类\n\n> java.lang.math提供了一系列静态方法用于科学计算。\n> \n> 其方法的参数和返回 值类型一般为double型。\n\n方法 :\n\n * abs 绝对值\n * acos,asin,atan,cos,sin,tan 三角函数\n * sqrt 平方根\n * pow(double a,doble b) a的b次幂\n * log 自然对数\n * exp e为底指数\n * max(double a,double b)\n * min(double a,double b)\n * random() 返回0.0到1.0的随机数\n * long round(double a) double型数据a转换为long型（四舍五入）\n * todegrees(double angrad) 弧度—>角度\n * toradians(double angdeg) 角度—>弧度\n\n\n# 8. biginteger 与 bigdecimal 类\n\n> 用于操作较大的整数\n\n\n# 8.1 biginteger 类\n\n> 类似于整形\n\n说明 :\n\n 1. integer类作为int的包装类，能存储的最大整型值为2 31-1，long类也是有限的， 最大为2 63-1。如果要表示再大的整数，不管是基本数据类型还是他们的包装类 都无能为力，更不用说进行运算了。\n 2. **java.math包的biginteger可以表示不可变的任意精度的整数。**biginteger 提供 所有 java 的基本整数操作符的对应物，并提供 java.lang.math 的所有相关方法。 另外，biginteger 还提供以下运算：模算术、gcd 计算、质数测试、素数生成、 位操作以及一些其他操作。\n\n构造器 :\n\n * biginteger(string val)：根据字符串构建 biginteger 对象\n\n常用方法 :\n\npublic biginteger abs()：返回此 biginteger 的绝对值的 biginteger。\n\nbiginteger add(biginteger val) ：返回其值为 (this + val) 的 biginteger\n\nbiginteger subtract(biginteger val) ：返回其值为 (this - val) 的 biginteger\n\nbiginteger multiply(biginteger val) ：返回其值为 (this * val) 的 biginteger\n\nbiginteger divide(biginteger val) ：返回其值为 (this / val) 的 biginteger。整数 相除只保留整数部分。\n\nbiginteger remainder(biginteger val) ：返回其值为 (this % val) 的 biginteger。\n\nbiginteger[] divideandremainder(biginteger val)：返回包含 (this / val) 后跟 (this % val) 的两个 biginteger 的数组。\n\nbiginteger pow(int exponent) ：返回其值为 (thisexponent) 的 biginteger。\n\n\n# 8.2 bigdecimal 类\n\n> 类似于浮点型\n\n说明 :\n\n 1. 一般的float类和double类可以用来做科学计算或工程计算，但在商业计算中， 要求数字精度比较高，故用到java.math.bigdecimal类。\n 2. bigdecimal 类支持不可变的、任意精度的有符号十进制定点数。\n\n构造器 :\n\n * public bigdecimal(double val)\n\n * public bigdecimal(string val)\n\n常用方法 :\n\npublic bigdecimal add(bigdecimal augend)\n\npublic bigdecimal subtract(bigdecimal subtrahend)\n\npublic bigdecimal multiply(bigdecimal multiplicand)\n\npublic bigdecimal divide(bigdecimal divisor, int scale, int roundingmode)\n\ndemo :\n\npackage com.broky.commonclass;\n\nimport org.junit.jupiter.api.test;\n\nimport java.math.bigdecimal;\nimport java.math.biginteger;\n\n/**\n * @author 13roky\n * @date 2021-05-13 12:56\n */\npublic class otherclasstest {\n    \n    @test\n    public void testbiginteger() {\n        biginteger bi = new biginteger("12433241123");\n        bigdecimal bd = new bigdecimal("12435.351");\n        bigdecimal bd2 = new bigdecimal("11");\n        system.out.println(bi);\n        // bigdecimal.round_half_up 四舍五入\n        system.out.println(bd.divide(bd2, bigdecimal.round_half_up));\n        system.out.println(bd.divide(bd2, 15, bigdecimal.round_half_up));\n    }\n\n}\n',charsets:{cjk:!0},rightAnchor:{ignore:["/","/api/"],expand:{default:!1,trigger:"hover"},customClass:"your-customClass",disableGlobalUI:!1,isIgnore:!1}},{title:"Java异常",frontmatter:{},regularPath:"/JavaDoc/Java%E5%BC%82%E5%B8%B8.html",relativePath:"JavaDoc/Java异常.md",key:"v-38b2273a",path:"/JavaDoc/Java%E5%BC%82%E5%B8%B8.html",headers:[{level:2,title:"1. 异常的体系结构",slug:"_1-异常的体系结构",normalizedTitle:"1. 异常的体系结构",charIndex:15},{level:2,title:"2. 常见的异常",slug:"_2-常见的异常",normalizedTitle:"2. 常见的异常",charIndex:29},{level:3,title:"2.1. 运行时异常",slug:"_2-1-运行时异常",normalizedTitle:"2.1. 运行时异常",charIndex:43},{level:3,title:"2.2. 编译时异常 (编译时异常必须进行处理否则无法运行)",slug:"_2-2-编译时异常-编译时异常必须进行处理否则无法运行",normalizedTitle:"2.2. 编译时异常 (编译时异常必须进行处理否则无法运行)",charIndex:59},{level:3,title:"2.3. 常见异常的运行Demo",slug:"_2-3-常见异常的运行demo",normalizedTitle:"2.3. 常见异常的运行demo",charIndex:95},{level:2,title:"3. 异常的抓抛模型原理",slug:"_3-异常的抓抛模型原理",normalizedTitle:"3. 异常的抓抛模型原理",charIndex:115},{level:2,title:"4. 异常的处理",slug:"_4-异常的处理",normalizedTitle:"4. 异常的处理",charIndex:131},{level:3,title:"4.1. try - catch - finally",slug:"_4-1-try-catch-finally",normalizedTitle:"4.1. try - catch - finally",charIndex:145},{level:3,title:"4.2. throws + 异常类型",slug:"_4-2-throws-异常类型",normalizedTitle:"4.2. throws + 异常类型",charIndex:177},{level:2,title:"5. 重写方法异常抛出的规则",slug:"_5-重写方法异常抛出的规则",normalizedTitle:"5. 重写方法异常抛出的规则",charIndex:199},{level:2,title:"6. 开发中如何选择使用try-catch-finally 还是throws?",slug:"_6-开发中如何选择使用try-catch-finally-还是throws",normalizedTitle:"6. 开发中如何选择使用try-catch-finally 还是throws?",charIndex:217},{level:2,title:"7. 手动抛出异常 throw",slug:"_7-手动抛出异常-throw",normalizedTitle:"7. 手动抛出异常 throw",charIndex:260},{level:2,title:"8. 自定义异常类",slug:"_8-自定义异常类",normalizedTitle:"8. 自定义异常类",charIndex:279},{level:2,title:"9. 异常处理练习题",slug:"_9-异常处理练习题",normalizedTitle:"9. 异常处理练习题",charIndex:292},{level:3,title:"9.1. 判断以下代码的输出内容",slug:"_9-1-判断以下代码的输出内容",normalizedTitle:"9.1. 判断以下代码的输出内容",charIndex:308},{level:3,title:"9.2. 异常处理综合练习",slug:"_9-2-异常处理综合练习",normalizedTitle:"9.2. 异常处理综合练习",charIndex:330}],headersStr:"1. 异常的体系结构 2. 常见的异常 2.1. 运行时异常 2.2. 编译时异常 (编译时异常必须进行处理否则无法运行) 2.3. 常见异常的运行Demo 3. 异常的抓抛模型原理 4. 异常的处理 4.1. try - catch - finally 4.2. throws + 异常类型 5. 重写方法异常抛出的规则 6. 开发中如何选择使用try-catch-finally 还是throws? 7. 手动抛出异常 throw 8. 自定义异常类 9. 异常处理练习题 9.1. 判断以下代码的输出内容 9.2. 异常处理综合练习",content:'# Java异常\n\n\n\n * 1. 异常的体系结构\n * 2. 常见的异常\n   * 2.1. 运行时异常\n   * 2.2. 编译时异常 (编译时异常必须进行处理否则无法运行)\n   * 2.3. 常见异常的运行Demo\n * 3. 异常的抓抛模型原理\n * 4. 异常的处理\n   * 4.1. try - catch - finally\n   * 4.2. throws + 异常类型\n * 5. 重写方法异常抛出的规则\n * 6. 开发中如何选择使用try-catch-finally 还是throws?\n * 7. 手动抛出异常 throw\n * 8. 自定义异常类\n * 9. 异常处理练习题\n   * 9.1. 判断以下代码的输出内容\n   * 9.2. 异常处理综合练习\n\n\n\n\n# 1. 异常的体系结构\n\n定义：异常就是有异于常态，和正常情况不一样，有错误出现。在java中，将程序执行过程中的不正常的情况称之为异常，开发过程中的语法错误和逻辑错误不是异常，发生异常时java会阻止当前方法或作用域的情况。\n\n异常的体系结构\n\n\n\n * Throwable：是java中所有异常和错误的超类,其两个子类为 Error(错误) 和 Exception(异常)\n   * Error： 是程序中无法处理的错误，表示运行应用程序中出现了严重的错误。此类错误一般表示代码运行时JVM出现问题。通常有Virtual MachineError（虚拟机运行错误）、NoClassDefFoundError（类定义错误）等。比如说当jvm耗完可用内存时，将出现OutOfMemoryError。此类错误发生时，JVM将终止线程。非代码性错误。因此，当此类错误发生时，应用不应该去处理此类错误。\n   * Exception： 是程序本身可以捕获并且可以处理的异常。其中可分为运行时异常（RuntimeException）和非运行时异常，也叫做受检异常\n     * 运行时异常(不受检异常)： RuntimeException类极其子类表示JVM在运行期间可能出现的错误。编译器不会检查此类异常，并且不要求处理异常，比如用空值对象的引用（NullPointerException）、数组下标越界（ArrayIndexOutBoundException）。此类异常属于不可查异常，一般是由程序逻辑错误引起的，在程序中可以选择捕获处理，也可以不处理。\n     * 非运行时异常(受检异常)： Exception中除RuntimeException极其子类之外的异常。编译器会检查此类异常，如果程序中出现此类异常，比如说IOException，必须对该异常进行处理，要么使用try-catch捕获，要么使用throws语句抛出，否则编译不通过。\n\n从程序执行的过程来看编译时异常和运行时异常\n\n * 编译时异常：程序在编译时发生的异常（javac 源文件名.java）\n * 运行时异常: 程序在运行时发生的异常（java 字节码文件名）\n\n\n# 2. 常见的异常\n\n\n# 2.1. 运行时异常\n\n * NullPointerException (空指针异常)：指针指向的对象为空（null）\n * ArrayIndexOutOfBoundException (数组角标越界异常) StringIndexOutOfBoundException (字符串越界异常) ...\n * ClassCastException (类型转换异常)\n\n\n# 2.2. 编译时异常 (编译时异常必须进行处理否则无法运行)\n\n * IOException\n   * FileNotFoundException\n * ClassNotFoundException\n\n\n# 2.3. 常见异常的运行Demo\n\npackage com.broky.exception.commonException;\n\nimport java.util.Scanner;\n\npublic class CommonEx {\n    static void ArithmeticExceptionDemo(){\n        int a = 10;\n        int b = 0;\n        int c = a / b;\n        /*Exception in thread "main" java.lang.ArithmeticException: / by zero\n        at com.broky.exception.ArithmeticEx.main(ArithmeticEx.java:7)*/\n    }\n\n    static void ClassCastExceptionDemo(){\n        Object obj = new Double(1);\n        String str = (String)obj;\n        /*Exception in thread "main" java.lang.ClassCastException: class java.lang.Double cannot be cast to class java.lang.String (java.lang.Double and java.lang.String are in module java.base of loader \'bootstrap\')\n        at com.broky.exception.ClassCastEx.main(ClassCastEx.java:7)*/\n    }\n\n    static void InputMismatchExceptionDemo(){\n        Scanner scan = new Scanner(System.in);\n        int num = scan.nextInt();\n        System.out.println(num);\n        /*asd\n        Exception in thread "main" java.util.InputMismatchException\n        at java.base/java.util.Scanner.throwFor(Scanner.java:939)\n        at java.base/java.util.Scanner.next(Scanner.java:1594)\n        at java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n        at java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n        at com.broky.exception.InputMismatchEx.main(InputMismatchEx.java:8)*/\n    }\n\n    static void NullPointerExceptionDemo(){\n        int[] arr = null;\n        System.out.println(arr[3]);\n\n        /*Exception in thread "main" java.lang.NullPointerException: Cannot load from int array because "arr" is null\n        at com.broky.exception.NullPointerEx.main(NullPointerEx.java:6)*/\n    }\n\n    static void NumberFormatExceptionDemo(){\n        String str = "abc";\n        int a = Integer.parseInt(str);\n        /*Exception in thread "main" java.lang.NumberFormatException: For input string: "abc"\n        at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n        at java.base/java.lang.Integer.parseInt(Integer.java:660)\n        at java.base/java.lang.Integer.parseInt(Integer.java:778)\n        at com.broky.exception.NumberMismatchEx.main(NumberMismatchEx.java:6)*/\n    }\n\n    static void ArrayIndexOutOfBoundExceptionDemo(){\n        int[] arr = new int[3];\n        System.out.println(arr[3]);\n        /*Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3\n        at com.broky.exception.XIndexOutOfBoundEx.main(XIndexOutOfBoundEx.java:6)*/\n\n        String str = "abc";\n        System.out.println(str.charAt(3));\n        /*Exception in thread "main" java.lang.StringIndexOutOfBoundsException: String index out of range: 3\n        at java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n        at java.base/java.lang.String.charAt(String.java:711)\n        at com.broky.exception.XIndexOutOfBoundEx.main(XIndexOutOfBoundEx.java:11)*/\n    }\n\n    public static void main(String[] args) {\n        ArrayIndexOutOfBoundExceptionDemo();\n    }\n}\n\n\n\n\n# 3. 异常的抓抛模型原理\n\n * 异常的抛出：如果程序在运行过程中执行某段代码时发生了异常，那么系统（JVM）将会根据异常的类型，在异常代码处创建对应的异常类型的对象并抛出，抛出给程序的调用者。一旦抛出对象以后,其后的代码不再运行,程序终止.\n   异常的抛出分为：① 系统向外抛出异常 ② 手动向外抛出异常（throw）\n * 异常的抓取：异常的抓取可以理解为异常的处理方式, 取有 try-catch-finally 和 throws 两种方式（详情见异常的处理部分）\n\n\n# 4. 异常的处理\n\n\n# 4.1. try - catch - finally\n\n * 将可能出现异常的代码放到try{}中, 运行时, 如果代码发成了异常的话,就会生成一个对应的异常类的对象.\n\n这个产生的异常对象会与catch的异常类型相匹配,匹配成功后就被 catch 捕获,然后运行catch{}中的代码, 一般catch中的代码为处理异常的代码, 比如返回异常的信息和返回异常的详细信息等. 一旦异常处理完成,就会跳出当前的try-catch结构\n\n无论有没有发生异常finally中的代码都会最后被执行\n\n * catch多个异常类型的时候, 如果有子父类关系,小的范围写上面大的范围写下面; 如果没有子父类关系,谁在上谁在下无所谓.\n * 常用的异常对象处理方式: ① e.getMessage() ② e.printSrackTrace()\n * 在try结构中生命的变量，在出了try结构以后，就不能在被调用。如果想避免这种情况，就需要在try之前声明变量并初始化，在try中赋值。\n * 如果finally里面有return那么返回的一定是finally里面的\n * try-catch-finally结构可以相互嵌套\n * 体会1：使用try-catch-finally处理编译时异常，是让程序在编译时就不再报错，但是运行时仍然有可能报错。相当于我们使用try-catch将一个编译时可能出现的异常，延迟到运行时出现。p376\n * 体会2：在开发中，运行时异常比较常见，此时一般不用try-catch去处理，因为处理和不处理都是一个报错，最好办法是去修改代码。针对编译时异常，我们一定要考虑异常处理。\n\n        package com.broky.exception.demo02;\n\npublic class TryCatchFinally {\n    public static void main(String[] args) {\n        String str = "abc";\n\n        try {\n            int i = Integer.parseInt(str);\n        } catch (NumberFormatException e) {\n            e.printStackTrace();\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        } finally {\n            System.out.println("运行完毕");\n        }\n    }\n}\n\n\n\n# 4.2. throws + 异常类型\n\n * throws 一般用于方法中可能存在异常时, 需要将异常情况向方法之上的层级抛出, 由抛出方法的上一级来解决这个问题, 如果方法的上一级无法解决的会就会再将异常向上抛出, 最终会抛给main方法. 这样一来main方法中调用了这个方法的时候,就需要解决这个可能出现的异常.\n   当然main方法也可以不解决异常, 将异常往上抛出给java虚拟机, 如果java虚拟机也无法解决的话,那么java虚拟机就over了\n\n * throws + 异常类型写在方法的声明处.指明此方法执行时,可能会抛出的异常类型.\n   一旦方法体执行时,出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。\n   异常代码的后续的代码，就不再执行！\n\n * 体会：tyr-catch-fianlly:真正的将异常给处理掉了。throws的方式只是将异常抛给了方法的调用者，并没有真正将异常处理掉。\n\n注意: 将异常向上抛出也算是一种处理异常的方法\n\npackage com.broky.exception;\n\nimport java.io.FileNotFoundException;\n\npublic class ThrowsEx {\n    public void setAge2(int age) throws FileNotFoundException {\n        if (age < 0) {\n            throw new FileNotFoundException("输入的年龄小于0");\n        }\n    }\n    \n    public void TestsetAge2() throws FileNotFoundException {\n        setAge2(2);\n    }\n    \n    public static void main(String[] args) {\n        try {\n            ThrowsEx.throwsExTest();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\n\n# 5. 重写方法异常抛出的规则\n\n 1. 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型\n\n下面代码中,main方法中向display方法中传入了SuperClass的子类对象.那么到display方法中调用s.method调用的就是SpuerClass的子类SubClass重写的method方法, 如果这个方法抛出的异常范围大于父类SuperClass所抛出的异常的话,那么在display方法中对异常的catch处理就会catch不到这个异常.\n\npackage com.broky.exception;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\npublic class OverrideTest {\n    public void display(SuperClass s) {\n        try {\n            s.method();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        OverrideTest overrideTest = new OverrideTest();\n        overrideTest.display(new SubClass());\n    }\n}\n\nclass SuperClass {\n    public void method() throws IOException {\n        System.out.println("super");\n    }\n}\n\nclass SubClass extends SuperClass {\n    public void method() throws FileNotFoundException {\n        System.out.println("sub");\n    }\n}\n\n\n\n# 6. 开发中如何选择使用try-catch-finally 还是throws?\n\n * 如果分类中被重写的方法没有throws方式处理异常,则子类重写的方法也不能使用throws,意味着如果子类重写的方法中有异常,必须使用tyr-catch-finally方式处理.\n * 执行的方法中,先后又调用了另外的几个方法,这几个方法是递进关系执行的.我们建议这几个方法使用throws的方式处理.而执行的方法a可以考虑使用try-catch-finally方式进行处理.\n   因为如果在a方法要调用d方法时,如果在b方法内try-catch,当b方法异常时,并不会给方法a返回所需要的数据.因此最好使用throws将异常集合到一块再处理.\n * 注意: try-catch和throws再方法中不要同时使用,因为只要使用try-catch就已经将异常处理掉了,再throws没有任何意义.\n\n\n# 7. 手动抛出异常 throw\n\n手动抛出的异常有两种, 分别为运行时异常和编译时异常.\n\n抛出运行时异常时, 可以不用处理抛出的这个异常.\n\n抛出编译时异常时, 必须要处理抛出的这个异常.\n\n详细解析请看下面的代码\n\npackage com.broky.exception;\n\n/*Demo\n    手动抛出异常\n    自己throw(制造一个异常抛出)\n */\n\n\nimport java.io.FileNotFoundException;\n\npublic class ThrowEx {\n\n    // 手动抛出运行时异常\n    public void setAge(int age) {\n        if (age < 0) {\n            throw new NullPointerException("输入的年龄小于0");\n        }\n    }\n    /*\n          此方法手动抛出了运行时异常\n          运行时异常可以不用处理\n     */\n\n    // 手动抛出编译时异常\n    public void setAge2(int age) throws FileNotFoundException {\n        if (age < 0) {\n            throw new FileNotFoundException("输入的年龄小于0");\n        }\n    }\n    /*\n          此方法手动抛出的了编译时异常\n          编译时异常需要被处理\n          这里采用了 throws 这个异常, 也就是说方法并没有处理这个异常, 而是将异常抛给了调用者\n      这样一来调用了这个方法的人就必须要处理这个异常才可以.\n          注意:   在这里并不用自己使用 try catch 处理这个异常\n                自己在方法里抛出异常, 方法再自己处理没有任何作用.\n               所以方法中的异常需要抛给调用者去处理.\n     */\n\n\n    public static void main(String[] args) {\n        ThrowEx throwEx = new ThrowEx();\n\n        throwEx.setAge(-5);\n    }\n\n}\n\n\n\n\n# 8. 自定义异常类\n\n 1. 继承现有的异常结构：RuntimeExceptiona（不用处理）、Exception（需要处理）\n 2. 提供全局常量：serialVersionUID\n 3. 提供重载的构造器\n\npackage com.broky.exception;\n\npublic class MyException extends RuntimeException{\n    static final long serialVersionUID = -1234719074324978L;\n\n    public MyException(){\n\n    }\n\n    public MyException(String message){\n        super(message);\n    }\n\n    public static void main(String[] args) {\n        throw new MyException("自定义运行时异常");\n        /*Exception in thread "main" com.broky.exception.MyException: 自定义运行时异常\n        at com.broky.exception.MyException.main(MyException.java:15)*/\n    }\n}\n\n\n\n# 9. 异常处理练习题\n\n\n# 9.1. 判断以下代码的输出内容\n\npackage com.broky.exception.practice;\n\npublic class ExceptionTest {\n    static void methodA() {\n        try {\n            System.out.println("运行A方法");\n            throw new RuntimeException("A方法手动抛出运行时异常");\n        } finally {\n            System.out.println("用A方法的finally");\n        }\n    }\n\n    static void methodB() {\n        try {\n            System.out.println("进入B方法");\n            return;\n        } finally {\n            System.out.println("用B方法的finally");\n        }\n    }\n\n\n    public static void main(String[] args) {\n\n        try {\n            methodA();\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n\n        methodB();\n    }\n}\n/*答案\n    运行A方法\n    用A方法的finally\n    A方法手动抛出运行时异常\n    进入B方法\n    用B方法的finally\n*/\n\n\n解析debug中的运行步骤：\n\n 1. methodA();\n 2. System.out.println("运行A方法");\n 3. throw new RuntimeException("A方法手动抛出运行时异常"); //此处抛出了异常但是由于还在方法A的运行还没有结束所以main中并没有进行到catch环节，但是方法中的finally又必须运行，这样一来方法中的finally必然在main中catch环节的前面\n 4. System.out.println("用A方法的finally");\n 5. atch (Exception e) {System.out.println(e.getMessage());}\n 6. methodB();\n\n\n# 9.2. 异常处理综合练习\n\n编写应用程序 EcmDef java,接收命令行的两个参数,要求不能输入负数,计算两数相除对数据类型不一致( Number FormatException)、 缺少命令行参数(ArraylndexOutofBounds Exception、除0( Arithmetic EXception)及输入负数( EcDef自定义的异常)进行异常处理。\n\n提示:\n\n 1. 在主类( EcmDef)中定义异常方法(ecm)完成两数相除功能。\n 2. 在man(方法中使用异常处理语句进行异常处理\n 3. 在程序中,自定义对应输入负数的异常类( EcDef)。\n 4. 运行时接受参数 java EcmDef 20 10∥args[0]=“20“ args[1]=”10“ I\n 5. nterger类的 static方法 parseInt( String s)将s转换成对应的int值\n\npackage com.broky.exception.practice;\n\npublic class EcDef extends Exception{\n    static final long serialVersionUID = -338751612344229948L;\n\n    public EcDef(){\n\n    }\n\n    public EcDef(String str){\n        super(str);\n    }\n\n}\n\n\n\npackage com.broky.exception.practice;\n\npublic class EcmDef {\n    public static int ecm(int a, int b) throws EcDef, ArithmeticException {\n        if (a < 0 || b < 0)\n            throw new EcDef("输入的数据小于0");\n        if (b == 0)\n            throw new ArithmeticException("除数不能等于0");\n        return a / b;\n    }\n\n    public static void main(String[] args) {\n        int a = 0;\n        int b = 0;\n\n        try {\n            a = Integer.parseInt(args[0]);\n            b = Integer.parseInt(args[1]);\n\n            System.out.println(ecm(a, b));\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println("缺少命令行参数");\n            e.printStackTrace();\n        } catch (NumberFormatException e) {\n            e.printStackTrace();\n        } catch (ArithmeticException e) {\n            e.printStackTrace();\n        } catch (EcDef ecDef) {\n            ecDef.printStackTrace();\n        }\n\n    }\n}\n',normalizedContent:'# java异常\n\n\n\n * 1. 异常的体系结构\n * 2. 常见的异常\n   * 2.1. 运行时异常\n   * 2.2. 编译时异常 (编译时异常必须进行处理否则无法运行)\n   * 2.3. 常见异常的运行demo\n * 3. 异常的抓抛模型原理\n * 4. 异常的处理\n   * 4.1. try - catch - finally\n   * 4.2. throws + 异常类型\n * 5. 重写方法异常抛出的规则\n * 6. 开发中如何选择使用try-catch-finally 还是throws?\n * 7. 手动抛出异常 throw\n * 8. 自定义异常类\n * 9. 异常处理练习题\n   * 9.1. 判断以下代码的输出内容\n   * 9.2. 异常处理综合练习\n\n\n\n\n# 1. 异常的体系结构\n\n定义：异常就是有异于常态，和正常情况不一样，有错误出现。在java中，将程序执行过程中的不正常的情况称之为异常，开发过程中的语法错误和逻辑错误不是异常，发生异常时java会阻止当前方法或作用域的情况。\n\n异常的体系结构\n\n\n\n * throwable：是java中所有异常和错误的超类,其两个子类为 error(错误) 和 exception(异常)\n   * error： 是程序中无法处理的错误，表示运行应用程序中出现了严重的错误。此类错误一般表示代码运行时jvm出现问题。通常有virtual machineerror（虚拟机运行错误）、noclassdeffounderror（类定义错误）等。比如说当jvm耗完可用内存时，将出现outofmemoryerror。此类错误发生时，jvm将终止线程。非代码性错误。因此，当此类错误发生时，应用不应该去处理此类错误。\n   * exception： 是程序本身可以捕获并且可以处理的异常。其中可分为运行时异常（runtimeexception）和非运行时异常，也叫做受检异常\n     * 运行时异常(不受检异常)： runtimeexception类极其子类表示jvm在运行期间可能出现的错误。编译器不会检查此类异常，并且不要求处理异常，比如用空值对象的引用（nullpointerexception）、数组下标越界（arrayindexoutboundexception）。此类异常属于不可查异常，一般是由程序逻辑错误引起的，在程序中可以选择捕获处理，也可以不处理。\n     * 非运行时异常(受检异常)： exception中除runtimeexception极其子类之外的异常。编译器会检查此类异常，如果程序中出现此类异常，比如说ioexception，必须对该异常进行处理，要么使用try-catch捕获，要么使用throws语句抛出，否则编译不通过。\n\n从程序执行的过程来看编译时异常和运行时异常\n\n * 编译时异常：程序在编译时发生的异常（javac 源文件名.java）\n * 运行时异常: 程序在运行时发生的异常（java 字节码文件名）\n\n\n# 2. 常见的异常\n\n\n# 2.1. 运行时异常\n\n * nullpointerexception (空指针异常)：指针指向的对象为空（null）\n * arrayindexoutofboundexception (数组角标越界异常) stringindexoutofboundexception (字符串越界异常) ...\n * classcastexception (类型转换异常)\n\n\n# 2.2. 编译时异常 (编译时异常必须进行处理否则无法运行)\n\n * ioexception\n   * filenotfoundexception\n * classnotfoundexception\n\n\n# 2.3. 常见异常的运行demo\n\npackage com.broky.exception.commonexception;\n\nimport java.util.scanner;\n\npublic class commonex {\n    static void arithmeticexceptiondemo(){\n        int a = 10;\n        int b = 0;\n        int c = a / b;\n        /*exception in thread "main" java.lang.arithmeticexception: / by zero\n        at com.broky.exception.arithmeticex.main(arithmeticex.java:7)*/\n    }\n\n    static void classcastexceptiondemo(){\n        object obj = new double(1);\n        string str = (string)obj;\n        /*exception in thread "main" java.lang.classcastexception: class java.lang.double cannot be cast to class java.lang.string (java.lang.double and java.lang.string are in module java.base of loader \'bootstrap\')\n        at com.broky.exception.classcastex.main(classcastex.java:7)*/\n    }\n\n    static void inputmismatchexceptiondemo(){\n        scanner scan = new scanner(system.in);\n        int num = scan.nextint();\n        system.out.println(num);\n        /*asd\n        exception in thread "main" java.util.inputmismatchexception\n        at java.base/java.util.scanner.throwfor(scanner.java:939)\n        at java.base/java.util.scanner.next(scanner.java:1594)\n        at java.base/java.util.scanner.nextint(scanner.java:2258)\n        at java.base/java.util.scanner.nextint(scanner.java:2212)\n        at com.broky.exception.inputmismatchex.main(inputmismatchex.java:8)*/\n    }\n\n    static void nullpointerexceptiondemo(){\n        int[] arr = null;\n        system.out.println(arr[3]);\n\n        /*exception in thread "main" java.lang.nullpointerexception: cannot load from int array because "arr" is null\n        at com.broky.exception.nullpointerex.main(nullpointerex.java:6)*/\n    }\n\n    static void numberformatexceptiondemo(){\n        string str = "abc";\n        int a = integer.parseint(str);\n        /*exception in thread "main" java.lang.numberformatexception: for input string: "abc"\n        at java.base/java.lang.numberformatexception.forinputstring(numberformatexception.java:67)\n        at java.base/java.lang.integer.parseint(integer.java:660)\n        at java.base/java.lang.integer.parseint(integer.java:778)\n        at com.broky.exception.numbermismatchex.main(numbermismatchex.java:6)*/\n    }\n\n    static void arrayindexoutofboundexceptiondemo(){\n        int[] arr = new int[3];\n        system.out.println(arr[3]);\n        /*exception in thread "main" java.lang.arrayindexoutofboundsexception: index 3 out of bounds for length 3\n        at com.broky.exception.xindexoutofboundex.main(xindexoutofboundex.java:6)*/\n\n        string str = "abc";\n        system.out.println(str.charat(3));\n        /*exception in thread "main" java.lang.stringindexoutofboundsexception: string index out of range: 3\n        at java.base/java.lang.stringlatin1.charat(stringlatin1.java:48)\n        at java.base/java.lang.string.charat(string.java:711)\n        at com.broky.exception.xindexoutofboundex.main(xindexoutofboundex.java:11)*/\n    }\n\n    public static void main(string[] args) {\n        arrayindexoutofboundexceptiondemo();\n    }\n}\n\n\n\n\n# 3. 异常的抓抛模型原理\n\n * 异常的抛出：如果程序在运行过程中执行某段代码时发生了异常，那么系统（jvm）将会根据异常的类型，在异常代码处创建对应的异常类型的对象并抛出，抛出给程序的调用者。一旦抛出对象以后,其后的代码不再运行,程序终止.\n   异常的抛出分为：① 系统向外抛出异常 ② 手动向外抛出异常（throw）\n * 异常的抓取：异常的抓取可以理解为异常的处理方式, 取有 try-catch-finally 和 throws 两种方式（详情见异常的处理部分）\n\n\n# 4. 异常的处理\n\n\n# 4.1. try - catch - finally\n\n * 将可能出现异常的代码放到try{}中, 运行时, 如果代码发成了异常的话,就会生成一个对应的异常类的对象.\n\n这个产生的异常对象会与catch的异常类型相匹配,匹配成功后就被 catch 捕获,然后运行catch{}中的代码, 一般catch中的代码为处理异常的代码, 比如返回异常的信息和返回异常的详细信息等. 一旦异常处理完成,就会跳出当前的try-catch结构\n\n无论有没有发生异常finally中的代码都会最后被执行\n\n * catch多个异常类型的时候, 如果有子父类关系,小的范围写上面大的范围写下面; 如果没有子父类关系,谁在上谁在下无所谓.\n * 常用的异常对象处理方式: ① e.getmessage() ② e.printsracktrace()\n * 在try结构中生命的变量，在出了try结构以后，就不能在被调用。如果想避免这种情况，就需要在try之前声明变量并初始化，在try中赋值。\n * 如果finally里面有return那么返回的一定是finally里面的\n * try-catch-finally结构可以相互嵌套\n * 体会1：使用try-catch-finally处理编译时异常，是让程序在编译时就不再报错，但是运行时仍然有可能报错。相当于我们使用try-catch将一个编译时可能出现的异常，延迟到运行时出现。p376\n * 体会2：在开发中，运行时异常比较常见，此时一般不用try-catch去处理，因为处理和不处理都是一个报错，最好办法是去修改代码。针对编译时异常，我们一定要考虑异常处理。\n\n        package com.broky.exception.demo02;\n\npublic class trycatchfinally {\n    public static void main(string[] args) {\n        string str = "abc";\n\n        try {\n            int i = integer.parseint(str);\n        } catch (numberformatexception e) {\n            e.printstacktrace();\n        } catch (exception e) {\n            system.out.println(e.getmessage());\n        } finally {\n            system.out.println("运行完毕");\n        }\n    }\n}\n\n\n\n# 4.2. throws + 异常类型\n\n * throws 一般用于方法中可能存在异常时, 需要将异常情况向方法之上的层级抛出, 由抛出方法的上一级来解决这个问题, 如果方法的上一级无法解决的会就会再将异常向上抛出, 最终会抛给main方法. 这样一来main方法中调用了这个方法的时候,就需要解决这个可能出现的异常.\n   当然main方法也可以不解决异常, 将异常往上抛出给java虚拟机, 如果java虚拟机也无法解决的话,那么java虚拟机就over了\n\n * throws + 异常类型写在方法的声明处.指明此方法执行时,可能会抛出的异常类型.\n   一旦方法体执行时,出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。\n   异常代码的后续的代码，就不再执行！\n\n * 体会：tyr-catch-fianlly:真正的将异常给处理掉了。throws的方式只是将异常抛给了方法的调用者，并没有真正将异常处理掉。\n\n注意: 将异常向上抛出也算是一种处理异常的方法\n\npackage com.broky.exception;\n\nimport java.io.filenotfoundexception;\n\npublic class throwsex {\n    public void setage2(int age) throws filenotfoundexception {\n        if (age < 0) {\n            throw new filenotfoundexception("输入的年龄小于0");\n        }\n    }\n    \n    public void testsetage2() throws filenotfoundexception {\n        setage2(2);\n    }\n    \n    public static void main(string[] args) {\n        try {\n            throwsex.throwsextest();\n        } catch (filenotfoundexception e) {\n            e.printstacktrace();\n        }\n    }\n}\n\n\n\n# 5. 重写方法异常抛出的规则\n\n 1. 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型\n\n下面代码中,main方法中向display方法中传入了superclass的子类对象.那么到display方法中调用s.method调用的就是spuerclass的子类subclass重写的method方法, 如果这个方法抛出的异常范围大于父类superclass所抛出的异常的话,那么在display方法中对异常的catch处理就会catch不到这个异常.\n\npackage com.broky.exception;\n\nimport java.io.filenotfoundexception;\nimport java.io.ioexception;\n\npublic class overridetest {\n    public void display(superclass s) {\n        try {\n            s.method();\n        } catch (ioexception e) {\n            e.printstacktrace();\n        }\n    }\n\n    public static void main(string[] args) {\n        overridetest overridetest = new overridetest();\n        overridetest.display(new subclass());\n    }\n}\n\nclass superclass {\n    public void method() throws ioexception {\n        system.out.println("super");\n    }\n}\n\nclass subclass extends superclass {\n    public void method() throws filenotfoundexception {\n        system.out.println("sub");\n    }\n}\n\n\n\n# 6. 开发中如何选择使用try-catch-finally 还是throws?\n\n * 如果分类中被重写的方法没有throws方式处理异常,则子类重写的方法也不能使用throws,意味着如果子类重写的方法中有异常,必须使用tyr-catch-finally方式处理.\n * 执行的方法中,先后又调用了另外的几个方法,这几个方法是递进关系执行的.我们建议这几个方法使用throws的方式处理.而执行的方法a可以考虑使用try-catch-finally方式进行处理.\n   因为如果在a方法要调用d方法时,如果在b方法内try-catch,当b方法异常时,并不会给方法a返回所需要的数据.因此最好使用throws将异常集合到一块再处理.\n * 注意: try-catch和throws再方法中不要同时使用,因为只要使用try-catch就已经将异常处理掉了,再throws没有任何意义.\n\n\n# 7. 手动抛出异常 throw\n\n手动抛出的异常有两种, 分别为运行时异常和编译时异常.\n\n抛出运行时异常时, 可以不用处理抛出的这个异常.\n\n抛出编译时异常时, 必须要处理抛出的这个异常.\n\n详细解析请看下面的代码\n\npackage com.broky.exception;\n\n/*demo\n    手动抛出异常\n    自己throw(制造一个异常抛出)\n */\n\n\nimport java.io.filenotfoundexception;\n\npublic class throwex {\n\n    // 手动抛出运行时异常\n    public void setage(int age) {\n        if (age < 0) {\n            throw new nullpointerexception("输入的年龄小于0");\n        }\n    }\n    /*\n          此方法手动抛出了运行时异常\n          运行时异常可以不用处理\n     */\n\n    // 手动抛出编译时异常\n    public void setage2(int age) throws filenotfoundexception {\n        if (age < 0) {\n            throw new filenotfoundexception("输入的年龄小于0");\n        }\n    }\n    /*\n          此方法手动抛出的了编译时异常\n          编译时异常需要被处理\n          这里采用了 throws 这个异常, 也就是说方法并没有处理这个异常, 而是将异常抛给了调用者\n      这样一来调用了这个方法的人就必须要处理这个异常才可以.\n          注意:   在这里并不用自己使用 try catch 处理这个异常\n                自己在方法里抛出异常, 方法再自己处理没有任何作用.\n               所以方法中的异常需要抛给调用者去处理.\n     */\n\n\n    public static void main(string[] args) {\n        throwex throwex = new throwex();\n\n        throwex.setage(-5);\n    }\n\n}\n\n\n\n\n# 8. 自定义异常类\n\n 1. 继承现有的异常结构：runtimeexceptiona（不用处理）、exception（需要处理）\n 2. 提供全局常量：serialversionuid\n 3. 提供重载的构造器\n\npackage com.broky.exception;\n\npublic class myexception extends runtimeexception{\n    static final long serialversionuid = -1234719074324978l;\n\n    public myexception(){\n\n    }\n\n    public myexception(string message){\n        super(message);\n    }\n\n    public static void main(string[] args) {\n        throw new myexception("自定义运行时异常");\n        /*exception in thread "main" com.broky.exception.myexception: 自定义运行时异常\n        at com.broky.exception.myexception.main(myexception.java:15)*/\n    }\n}\n\n\n\n# 9. 异常处理练习题\n\n\n# 9.1. 判断以下代码的输出内容\n\npackage com.broky.exception.practice;\n\npublic class exceptiontest {\n    static void methoda() {\n        try {\n            system.out.println("运行a方法");\n            throw new runtimeexception("a方法手动抛出运行时异常");\n        } finally {\n            system.out.println("用a方法的finally");\n        }\n    }\n\n    static void methodb() {\n        try {\n            system.out.println("进入b方法");\n            return;\n        } finally {\n            system.out.println("用b方法的finally");\n        }\n    }\n\n\n    public static void main(string[] args) {\n\n        try {\n            methoda();\n        } catch (exception e) {\n            system.out.println(e.getmessage());\n        }\n\n        methodb();\n    }\n}\n/*答案\n    运行a方法\n    用a方法的finally\n    a方法手动抛出运行时异常\n    进入b方法\n    用b方法的finally\n*/\n\n\n解析debug中的运行步骤：\n\n 1. methoda();\n 2. system.out.println("运行a方法");\n 3. throw new runtimeexception("a方法手动抛出运行时异常"); //此处抛出了异常但是由于还在方法a的运行还没有结束所以main中并没有进行到catch环节，但是方法中的finally又必须运行，这样一来方法中的finally必然在main中catch环节的前面\n 4. system.out.println("用a方法的finally");\n 5. atch (exception e) {system.out.println(e.getmessage());}\n 6. methodb();\n\n\n# 9.2. 异常处理综合练习\n\n编写应用程序 ecmdef java,接收命令行的两个参数,要求不能输入负数,计算两数相除对数据类型不一致( number formatexception)、 缺少命令行参数(arraylndexoutofbounds exception、除0( arithmetic exception)及输入负数( ecdef自定义的异常)进行异常处理。\n\n提示:\n\n 1. 在主类( ecmdef)中定义异常方法(ecm)完成两数相除功能。\n 2. 在man(方法中使用异常处理语句进行异常处理\n 3. 在程序中,自定义对应输入负数的异常类( ecdef)。\n 4. 运行时接受参数 java ecmdef 20 10∥args[0]=“20“ args[1]=”10“ i\n 5. nterger类的 static方法 parseint( string s)将s转换成对应的int值\n\npackage com.broky.exception.practice;\n\npublic class ecdef extends exception{\n    static final long serialversionuid = -338751612344229948l;\n\n    public ecdef(){\n\n    }\n\n    public ecdef(string str){\n        super(str);\n    }\n\n}\n\n\n\npackage com.broky.exception.practice;\n\npublic class ecmdef {\n    public static int ecm(int a, int b) throws ecdef, arithmeticexception {\n        if (a < 0 || b < 0)\n            throw new ecdef("输入的数据小于0");\n        if (b == 0)\n            throw new arithmeticexception("除数不能等于0");\n        return a / b;\n    }\n\n    public static void main(string[] args) {\n        int a = 0;\n        int b = 0;\n\n        try {\n            a = integer.parseint(args[0]);\n            b = integer.parseint(args[1]);\n\n            system.out.println(ecm(a, b));\n        } catch (arrayindexoutofboundsexception e) {\n            system.out.println("缺少命令行参数");\n            e.printstacktrace();\n        } catch (numberformatexception e) {\n            e.printstacktrace();\n        } catch (arithmeticexception e) {\n            e.printstacktrace();\n        } catch (ecdef ecdef) {\n            ecdef.printstacktrace();\n        }\n\n    }\n}\n',charsets:{cjk:!0},rightAnchor:{ignore:["/","/api/"],expand:{default:!1,trigger:"hover"},customClass:"your-customClass",disableGlobalUI:!1,isIgnore:!1}}],themeConfig:{displayAllHeaders:!1,nav:[{text:"首页",link:"/"},{text:"CodeServer",link:"http://code.13roky.tk"},{text:"Github",link:"https://github.com/13roky"},{text:"MyBlog",link:"http://cnblog.13roky.tk"},{text:"常用链接",items:[{text:"Baidu",link:"https://baidu.com"},{text:"Google",link:"https://google.com"}]},{text:"更多文档",items:[{text:"JavaDoc",link:"/JavaDoc/Java多线程.html"}]}],sidebarDepth:1,sidebar:{"/JavaDoc/":[{title:"Java基础",collapsable:!1,children:[{title:"Java异常",path:"Java异常"}]},{title:"Java进阶",collapsable:!1,children:[{title:"Java多线程",path:"Java多线程"},{title:"Java常用类",path:"Java常用类"},{title:"Java枚举类和注解",path:"Java枚举类和注解"}]}],"/Dir/":["Dir"]}}};e(308);Ia.component("Badge",(function(){return Promise.all([e.e(0),e.e(3)]).then(e.bind(null,394))})),Ia.component("CodeBlock",(function(){return Promise.all([e.e(0),e.e(4)]).then(e.bind(null,386))})),Ia.component("CodeGroup",(function(){return Promise.all([e.e(0),e.e(5)]).then(e.bind(null,387))}));e(309),e(310);var ps={name:"BackToTop",props:{threshold:{type:Number,default:300}},data:function(){return{scrollTop:null}},computed:{show:function(){return this.scrollTop>this.threshold}},mounted:function(){var n=this;this.scrollTop=this.getScrollTop(),window.addEventListener("scroll",ts()((function(){n.scrollTop=n.getScrollTop()}),100))},methods:{getScrollTop:function(){return window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0},scrollToTop:function(){window.scrollTo({top:0,behavior:"smooth"}),this.scrollTop=0}}},ds=(e(311),Object(ss.a)(ps,(function(){var n=this.$createElement,t=this._self._c||n;return t("transition",{attrs:{name:"fade"}},[this.show?t("svg",{staticClass:"go-to-top",attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 49.484 28.284"},on:{click:this.scrollToTop}},[t("g",{attrs:{transform:"translate(-229 -126.358)"}},[t("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(229 151.107) rotate(-45)"}}),this._v(" "),t("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(274.949 154.642) rotate(-135)"}})])]):this._e()])}),[],!1,null,"5fd4ef0c",null).exports),fs=(e(312),e(167)),ms=e.n(fs),hs={name:"right-anchor",props:{global:Boolean},data:function(){return{listData:[],activeIndex:null,expanded:!0}},watch:{"$page.regularPath":function(){this.filterDataByLevel()}},computed:{visible:function(){return this.listData&&this.listData.length&&!(this.rightAnchorOption.disableGlobalUI&&this.global)},rightAnchorOption:function(){return this.$page.rightAnchor},expandOption:function(){var n;return null===(n=this.$page.rightAnchor)||void 0===n?void 0:n.expand}},methods:{mouseover:function(){"hover"!==this.expandOption.trigger||this.expandOption.default||(this.expanded=!0)},mouseleave:function(){"hover"!==this.expandOption.trigger||this.expandOption.default||(this.expanded=!1)},btnClick:function(){"click"===this.expandOption.trigger&&(this.expanded=!this.expanded)},itemClick:function(n,t){this.activeIndex=n,window.scrollTo({top:document.getElementById(t).offsetTop,behavior:"smooth"})},filterDataByLevel:function(){var n=this;this.listData=[];var t=this.$page.headers,e=this.rightAnchorOption,r=e.isIgnore,a=e.showDepth;!r&&0!==a&&t&&(a?t.forEach((function(t){t.level<=a+1&&n.listData.push(JSON.parse(JSON.stringify(t)))})):this.listData=JSON.parse(JSON.stringify(t)),this.$nextTick((function(){n.listData.forEach((function(t){n.getEleById(t.slug).then((function(n){t.offsetTop=n.offsetTop}))}))})))},getEleById:function(n){return new Promise((function(t){var e=setInterval((function(){var r=document.getElementById(n);r&&(clearInterval(e),t(r))}),100)}))},getScrollTop:function(){return window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0}},created:function(){var n;this.expanded=null===(n=this.expandOption)||void 0===n?void 0:n.default},mounted:function(){var n=this;this.filterDataByLevel(),window.addEventListener("scroll",ms()((function(){var t=n.getScrollTop();n.listData.map((function(e,r){e.offsetTop&&t>=e.offsetTop&&(n.activeIndex=r)}))}),100))}},gs=(e(313),Object(ss.a)(hs,(function(){var n=this,t=n.$createElement,e=n._self._c||t;return n.visible?e("div",{staticClass:"ra-wrapper",class:[n.rightAnchorOption.customClass,n.global&&"is-global"],on:{mouseover:n.mouseover,mouseleave:n.mouseleave}},[n.expandOption.default&&"click"!==n.expandOption.trigger?n._e():e("div",{staticClass:"ra-button",on:{click:n.btnClick}},[e("svg",{staticClass:"icon",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",viewBox:"0 0 448 512"}},[e("path",{attrs:{fill:"currentColor",d:"M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"}})])]),n._v(" "),n.expanded?e("ul",{staticClass:"ra-menu"},n._l(n.listData,(function(t,r){return e("li",{key:r,staticClass:"ra-menu-item",class:{active:r===n.activeIndex,sub:3===t.level},on:{click:function(e){return n.itemClick(r,t.slug)}}},[n._v("\n      "+n._s(t.title)+"\n    ")])})),0):n._e()]):n._e()}),[],!1,null,"4b2ade1e",null).exports),vs=[{},function(n){n.Vue.mixin({computed:{$dataBlock:function(){return this.$options.__data__block__}}})},{},{},function(n){n.Vue.component("BackToTop",ds)},function(n){var t=n.Vue;t.component("RightAnchor",gs),t.component("GlobalRightAnchor",{name:"GlobalRightAnchor",functional:!0,render:function(){var n=arguments[0];return n(gs,{attrs:{global:!0}})}})}],ys=["BackToTop","GlobalRightAnchor"];function bs(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}e(182);function xs(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}function ws(n,t,e){return t&&xs(n.prototype,t),e&&xs(n,e),n}e(171);e(162);function Ss(n,t){return(Ss=Object.setPrototypeOf||function(n,t){return n.__proto__=t,n})(n,t)}e(163);function ks(n){return(ks=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}var js=e(168),Ts=e.n(js);function _s(n,t){return!t||"object"!==Ts()(t)&&"function"!=typeof t?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):t}function Es(n){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var e,r=ks(n);if(t){var a=ks(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return _s(this,e)}}var Os=function(n){!function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),t&&Ss(n,t)}(e,n);var t=Es(e);function e(){return bs(this,e),t.apply(this,arguments)}return e}(function(){function n(){bs(this,n),this.store=new Ia({data:{state:{}}})}return ws(n,[{key:"$get",value:function(n){return this.store.state[n]}},{key:"$set",value:function(n,t){Ia.set(this.store.state,n,t)}},{key:"$emit",value:function(){var n;(n=this.store).$emit.apply(n,arguments)}},{key:"$on",value:function(){var n;(n=this.store).$on.apply(n,arguments)}}]),n}());Object.assign(Os.prototype,{getPageAsyncComponent:Fo,getLayoutAsyncComponent:zo,getAsyncComponent:Jo,getVueComponent:Uo});var Cs={install:function(n){var t=new Os;n.$vuepress=t,n.prototype.$vuepress=t}};function As(n){n.beforeEach((function(t,e,r){if(Ds(n,t.path))r();else if(/(\/|\.html)$/.test(t.path))if(/\/$/.test(t.path)){var a=t.path.replace(/\/$/,"")+".html";Ds(n,a)?r(a):r()}else r();else{var i=t.path+"/",o=t.path+".html";Ds(n,o)?r(o):Ds(n,i)?r(i):r()}}))}function Ds(n,t){var e=t.toLowerCase();return n.options.routes.some((function(n){return n.path.toLowerCase()===e}))}var Is={props:{pageKey:String,slotKey:{type:String,default:"default"}},render:function(n){var t=this.pageKey||this.$parent.$page.key;return Go("pageKey",t),Ia.component(t)||Ia.component(t,Fo(t)),Ia.component(t)?n(t):n("")}},Ps={functional:!0,props:{slotKey:String,required:!0},render:function(n,t){var e=t.props,r=t.slots;return n("div",{class:["content__".concat(e.slotKey)]},r()[e.slotKey])}},$s={computed:{openInNewWindowTitle:function(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Ls=(e(315),e(316),Object(ss.a)($s,(function(){var n=this.$createElement,t=this._self._c||n;return t("span",[t("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[t("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),t("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),t("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports);function Bs(){return(Bs=Object(r.a)(regeneratorRuntime.mark((function n(t){var e,r,a,i;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:ls.routerBase||ls.base,As(r=new ko({base:e,mode:"history",fallback:!1,routes:us,scrollBehavior:function(n,t,e){return e||(n.hash?!Ia.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})}})),a={},n.prev=4,n.next=7,Promise.all(vs.filter((function(n){return"function"==typeof n})).map((function(n){return n({Vue:Ia,options:a,router:r,siteData:ls,isServer:t})})));case 7:n.next=12;break;case 9:n.prev=9,n.t0=n.catch(4),console.error(n.t0);case 12:return i=new Ia(Object.assign(a,{router:r,render:function(n){return n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},ys.map((function(t){return n(t)})))])}})),n.abrupt("return",{app:i,router:r});case 14:case"end":return n.stop()}}),n,null,[[4,9]])})))).apply(this,arguments)}Ia.config.productionTip=!1,Ia.use(ko),Ia.use(Cs),Ia.mixin(function(n,t){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Ia;jo(t),e.$vuepress.$set("siteData",t);var r=n(e.$vuepress.$get("siteData")),a=new r,i=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(a)),o={};return Object.keys(i).reduce((function(n,t){return t.startsWith("$")&&(n[t]=i[t].get),n}),o),{computed:o}}((function(n){return function(){function t(){bs(this,t)}return ws(t,[{key:"setPage",value:function(n){this.__page=n}},{key:"$site",get:function(){return n}},{key:"$themeConfig",get:function(){return this.$site.themeConfig}},{key:"$frontmatter",get:function(){return this.$page.frontmatter}},{key:"$localeConfig",get:function(){var n,t,e=this.$site.locales,r=void 0===e?{}:e;for(var a in r)"/"===a?t=r[a]:0===this.$page.path.indexOf(a)&&(n=r[a]);return n||t||{}}},{key:"$siteTitle",get:function(){return this.$localeConfig.title||this.$site.title||""}},{key:"$canonicalUrl",get:function(){var n=this.$page.frontmatter.canonicalUrl;return"string"==typeof n&&n}},{key:"$title",get:function(){var n=this.$page,t=this.$page.frontmatter.metaTitle;if("string"==typeof t)return t;var e=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return e?r?r+" | "+e:e:r||"VuePress"}},{key:"$description",get:function(){var n=function(n){if(n){var t=n.filter((function(n){return"description"===n.name}))[0];if(t)return t.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}},{key:"$lang",get:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}},{key:"$localePath",get:function(){return this.$localeConfig.path||"/"}},{key:"$themeLocaleConfig",get:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}},{key:"$page",get:function(){return this.__page?this.__page:function(n,t){for(var e=0;e<n.length;e++){var r=n[e];if(r.path.toLowerCase()===t.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}}]),t}()}),ls)),Ia.component("Content",Is),Ia.component("ContentSlotsDistributor",Ps),Ia.component("OutboundLink",Ls),Ia.component("ClientOnly",{functional:!0,render:function(n,t){var e=t.parent,r=t.children;if(e._isMounted)return r;e.$once("hook:mounted",(function(){e.$forceUpdate()}))}}),Ia.component("Layout",zo("Layout")),Ia.component("NotFound",zo("NotFound")),Ia.prototype.$withBase=function(n){var t=this.$site.base;return"/"===n.charAt(0)?t+n.slice(1):n},window.__VUEPRESS__={version:"1.8.2",hash:"db0026e"},function(n){return Bs.apply(this,arguments)}(!1).then((function(n){var t=n.app;n.router.onReady((function(){t.$mount("#app")}))}))}]);